language: go_test.go
name: HumanEval_86_anti_shuffle
results:
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.ToLower(word)\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiv4f8vt7_test.go:21:14: undefined: strings

    /tmp/tmpiv4f8vt7_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var\
    \ e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j\
    \ int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n\
    \    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n \
    \   var u int\n    var v int\n    var w int\n    var x int\n    var y int\n  \
    \  var z int\n    var a int\n    var b int\n    var c int\n    var d int\n   \
    \ var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o\
    \ int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n\
    \    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n \
    \   var z int\n    var a int\n    var b int\n    var c int\n    var d int\n  \
    \  var e int\n    var f int\n    var g int\n    var h int\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbvohaymx_test.go:149:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = strings.ToLower(words[i])\n  \
    \  }\n    sort.Strings(words)\n    result := \"\"\n    for _, word := range words\
    \ {\n        result += \" \" + word\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdr2b_pgb_test.go:21:14: undefined: strings

    /tmp/tmpdr2b_pgb_test.go:22:11: no new variables on left side of :=

    /tmp/tmpdr2b_pgb_test.go:24:20: undefined: strings

    /tmp/tmpdr2b_pgb_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i][:1] + strings.ToUpper(words[i][1:])\
    \ + words[i][2:]\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0a0dbsao_test.go:21:14: undefined: strings

    /tmp/tmp0a0dbsao_test.go:22:11: no new variables on left side of :=

    /tmp/tmp0a0dbsao_test.go:24:35: undefined: strings

    /tmp/tmp0a0dbsao_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.Replace(word, \"z\", \"a\", -1)\n \
    \       result += strings.Replace(word, \"Z\", \"A\", -1)\n        result += strings.Replace(word,\
    \ \"x\", \"b\", -1)\n        result += strings.Replace(word, \"X\", \"B\", -1)\n\
    \        result += strings.Replace(word, \"y\", \"c\", -1)\n        result +=\
    \ strings.Replace(word, \"Y\", \"C\", -1)\n        result += strings.Replace(word,\
    \ \"z\", \"d\", -1)\n        result += strings.Replace(word, \"Z\", \"D\", -1)\n\
    \        result += strings.Replace(word, \"x\", \"e\", -1)\n        result +=\
    \ strings.Replace(word, \"X\", \"E\", -1)\n        result += strings.Replace(word,\
    \ \"y\", \"f\", -1)\n        result += strings.Replace(word, \"Y\", \"F\", -1)\n\
    \        result += strings.Replace(word, \"z\", \"g\", -1)\n        result +=\
    \ strings.Replace(word, \"Z\", \"G\", -1)\n        result += strings.Replace(word,\
    \ \"x\", \"h\", -1)\n        result += strings.Replace(word, \"X\", \"H\", -1)\n\
    \        result += strings.Replace(word, \"y\", \"i\", -1)\n        result +=\
    \ strings.Replace(word, \"Y\", \"I\", -1)\n        result += strings.Replace(word,\
    \ \"z\", \"j\", -1)\n        result += strings.Replace(word, \"Z\", \"J\", -1)\n\
    \        result += strings.Replace(word, \"x\", \"k\", -1)\n        result +=\
    \ strings.Replace(word, \"X\", \"K\", -1)\n        result += strings.Replace(word,\
    \ \"y\", \"l\", -1)\n        result += strings.Replace(word, \"Y\", \"L\", -1)\n\
    \        result += strings.Replace(word, \"z\", \"m\", -1)\n        result +=\
    \ strings.Replace(word, \"Z\", \"M\", -1)\n        result += strings.Replace(word,\
    \ \"x\", \"n\", -1)\n        result += strings.Replace(word, \"X\", \"N\", -1)\n\
    \        result += strings.Replace(word, \"y\", \"o\", -1)\n        result +=\
    \ strings.Replace(word, \"Y\", \"O\", -1)\n        result += strings.Replace(word,\
    \ \"z\", \"p\", -1)\n        result += strings.Replace(word, \"Z\", \"P\", -1)\n\
    \        result += strings.Replace(word, \"x\", \"q\", -1)\n        result +=\
    \ strings.Replace(word, \"X\", \"Q\", -1)\n        result += strings.Replace(word,\
    \ \"y\", \"r\", -1)\n        result += strings.Replace(word, \"Y\", \"R\", -1)\n\
    \        result += strings.Replace(word, \"z\", \"s\", -1)\n        result +=\
    \ strings.Replace(word, \"Z\", \"S\", -1)\n        result += strings.Replace(word,\
    \ \"x\", \"t\", -1)\n        \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa61qpnzn_test.go:64:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \"_\"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1bgbbve3_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = strings.ToLower(words[i])\n  \
    \  }\n    sort.Strings(words)\n    result := \"\"\n    for _, word := range words\
    \ {\n        result += \" \" + word\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdr2b_pgb_test.go:21:14: undefined: strings

    /tmp/tmpdr2b_pgb_test.go:22:11: no new variables on left side of :=

    /tmp/tmpdr2b_pgb_test.go:24:20: undefined: strings

    /tmp/tmpdr2b_pgb_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = strings.ToLower(word)\n\
    \    }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3pkrem6_test.go:21:14: undefined: strings

    /tmp/tmpu3pkrem6_test.go:22:11: no new variables on left side of :=

    /tmp/tmpu3pkrem6_test.go:24:20: undefined: strings

    /tmp/tmpu3pkrem6_test.go:26:5: undefined: sort

    /tmp/tmpu3pkrem6_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += w\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwktvlw25_test.go:21:14: undefined: strings

    /tmp/tmpwktvlw25_test.go:22:11: no new variables on left side of :=

    /tmp/tmpwktvlw25_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i < len(s); i++ {\n        j = i\n        for k = i; k <\
    \ len(s); k++ {\n            if s[k] > s[k+1] {\n                j = k\n     \
    \       }\n        }\n        result = result + s[:j] + s[k:]\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvht3d10m_test.go:25:9: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \"_\"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1bgbbve3_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \"_\"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1bgbbve3_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"\\n\" + string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51tgjx7l_test.go:22:14: undefined: strings

    /tmp/tmp51tgjx7l_test.go:24:46: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var prev rune\n    for _, r := range s {\n       \
    \ if prev != r {\n            result = result + string(r)\n        }\n       \
    \ prev = r\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp405i79uf_test.go:51: expected 'ehllo', got 'helo'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp405i79uf_test.go:51:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp405i79uf_test.go:51: expected 'Hello !!!Wdlor', got 'Helo\
    \ World!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp405i79uf_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i] + strings.Repeat(\"\
    \ \", len(words[i])-len(words[i])+2)\n    }\n    return strings.Join(words, \"\
    \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vu6ewml_test.go:21:14: undefined: strings

    /tmp/tmp9vu6ewml_test.go:22:11: no new variables on left side of :=

    /tmp/tmp9vu6ewml_test.go:24:31: undefined: strings

    /tmp/tmp9vu6ewml_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    words := strings.Split(s, \" \")\n    for _,\
    \ word := range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5f1c4yv0_test.go:22:14: undefined: strings

    /tmp/tmp5f1c4yv0_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i] + strings.ToLower(words[i])\n\
    \    }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mivu56n_test.go:21:14: undefined: strings

    /tmp/tmp9mivu56n_test.go:22:11: no new variables on left side of :=

    /tmp/tmp9mivu56n_test.go:24:31: undefined: strings

    /tmp/tmp9mivu56n_test.go:26:5: undefined: sort

    /tmp/tmp9mivu56n_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.ToUpper(word[0]) + strings.ToLower(word[1:])\
    \ + \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9zh_aih_test.go:21:14: undefined: strings

    /tmp/tmpk9zh_aih_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        j = i\n        for ; j < len(s); j++ {\n            if s[j] >\
    \ s[j+1] {\n                j++\n            }\n        }\n        result = result\
    \ + s[:j]\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.anti_shuffle(...)\n\t/tmp/tmplznz8v90_test.go:27\n\
    command-line-arguments_test.TestAnti_Shuffle(0x0?)\n\t/tmp/tmplznz8v90_test.go:43\
    \ +0x8b2\ntesting.tRunner(0xc0001924e0, 0x528fd0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \"_\"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1bgbbve3_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        j = i\n        for k = i; k < len(s); k++ {\n\
    \            if s[k] < s[j] {\n                j = k\n            }\n        }\n\
    \        result = result + s[:i] + s[j:] + s[i:]\n    }\n    return result\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpvqcldrb0_test.go:56: expected 'Hi', got 'HiHiHii'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpvqcldrb0_test.go:56:\
    \ expected 'ehllo', got 'ellohellohelloellohellollohellolohelloo'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpvqcldrb0_test.go:56: expected\
    \ 'bemnru', got 'bernumbernberumbernubermbernumberbernumberernumberr'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__3 (0.00s)\n        tmpvqcldrb0_test.go:56:\
    \ expected 'abcd', got 'abcdabcdabcdbcdabcdcdabcdd'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpvqcldrb0_test.go:56: expected 'Hello !!!Wdlor', got ' World!!!Hello\
    \ World!!!H World!!!ello World!!!He World!!!llo World!!!Hel World!!!lo World!!!Hell\
    \ World!!!o World!!!Hello World!!! World!!!Hello !!!World!!!Hello W!!!orld!!!Hello\
    \ Wo!!!rld!!!Hello Wor!!!ld!!!Hello Worl!!!d!!!Hello World!!!!!!Hello World!!!!!Hello\
    \ World!!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpvqcldrb0_test.go:56:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got ' My name is Mister\
    \ Robot. How are you?Hi. My name is Mister Robot. How are you?H My name is Mister\
    \ Robot. How are you?i. My name is Mister Robot. How are you?Hi My name is Mister\
    \ Robot. How are you?. My name is Mister Robot. How are you?Hi. My name is Mister\
    \ Robot. How are you? My name is Mister Robot. How are you?Hi.  name is Mister\
    \ Robot. How are you?My name is Mister Robot. How are you?Hi. M name is Mister\
    \ Robot. How are you?y name is Mister Robot. How are you?Hi. My name is Mister\
    \ Robot. How are you? name is Mister Robot. How are you?Hi. My  is Mister Robot.\
    \ How are you?name is Mister Robot. How are you?Hi. My n is Mister Robot. How\
    \ are you?ame is Mister Robot. How are you?Hi. My na is Mister Robot. How are\
    \ you?me is Mister Robot. How are you?Hi. My nam is Mister Robot. How are you?e\
    \ is Mister Robot. How are you?Hi. My name is Mister Robot. How are you? is Mister\
    \ Robot. How are you?Hi. My name  Mister Robot. How a"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result string\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        words = append(words, word)\n    }\n    sort.Strings(words)\n\
    \    for _, word := range words {\n        result = result + string([]byte(word))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyq54k_p7_test.go:23:26: undefined: strings

    /tmp/tmpyq54k_p7_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = strings.ToLower(word)\n\
    \    }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3pkrem6_test.go:21:14: undefined: strings

    /tmp/tmpu3pkrem6_test.go:22:11: no new variables on left side of :=

    /tmp/tmpu3pkrem6_test.go:24:20: undefined: strings

    /tmp/tmpu3pkrem6_test.go:26:5: undefined: sort

    /tmp/tmpu3pkrem6_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub_pjaoe_test.go:21:14: undefined: strings

    /tmp/tmpub_pjaoe_test.go:22:11: no new variables on left side of :=

    /tmp/tmpub_pjaoe_test.go:26:5: undefined: sort

    /tmp/tmpub_pjaoe_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i][:1] + strings.ToLower(words[i][1:])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4tr3u3b_test.go:21:14: undefined: strings

    /tmp/tmpk4tr3u3b_test.go:22:11: no new variables on left side of :=

    /tmp/tmpk4tr3u3b_test.go:24:35: undefined: strings

    /tmp/tmpk4tr3u3b_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += w\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwktvlw25_test.go:21:14: undefined: strings

    /tmp/tmpwktvlw25_test.go:22:11: no new variables on left side of :=

    /tmp/tmpwktvlw25_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = \"\"\n    }\n    for i := range\
    \ words {\n        words[i] = words[i] + strings.ToUpper(words[i])\n    }\n  \
    \  sort.Strings(words)\n    result := \"\"\n    for _, word := range words {\n\
    \        result += \" \" + word\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3avjilq_test.go:21:14: undefined: strings

    /tmp/tmpy3avjilq_test.go:22:11: no new variables on left side of :=

    /tmp/tmpy3avjilq_test.go:27:31: undefined: strings

    /tmp/tmpy3avjilq_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var prev string\n    var i int\n    var j int\n  \
    \  for i = 0; i < len(s); i++ {\n        prev = result\n        result = \"\"\n\
    \        for j = i; j < len(s); j++ {\n            if s[j] < s[i] {\n        \
    \        result += s[j]\n            } else {\n                result += prev\n\
    \                prev = s[j]\n            }\n        }\n        result += prev\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps4jsqopg_test.go:30:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    /tmp/tmps4jsqopg_test.go:33:24: cannot use s[j] (value of type byte) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    words := strings.Split(s, \" \")\n    for _,\
    \ word := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gqklz85_test.go:22:14: undefined: strings

    /tmp/tmp8gqklz85_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.ToLower(word)\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiv4f8vt7_test.go:21:14: undefined: strings

    /tmp/tmpiv4f8vt7_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var prev string\n    var i int\n    var j int\n  \
    \  for i = 0; i < len(s); i++ {\n        j = i\n        for ; j < len(s); j++\
    \ {\n            if s[i] > s[j] {\n                prev := s[j]\n            \
    \    s[j] = s[i]\n                s[i] = prev\n            }\n        }\n    }\n\
    \    for i = 0; i < len(s); i++ {\n        result += s[i]\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplazjf3ez_test.go:22:9: prev declared but not used

    /tmp/tmplazjf3ez_test.go:30:17: cannot assign to s[j] (value of type byte)

    /tmp/tmplazjf3ez_test.go:31:17: cannot assign to s[i] (value of type byte)

    /tmp/tmplazjf3ez_test.go:36:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i] + strings.ToLower(string([]byte{byte(words[i][0])}))\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61fkv59l_test.go:21:14: undefined: strings

    /tmp/tmp61fkv59l_test.go:22:11: no new variables on left side of :=

    /tmp/tmp61fkv59l_test.go:24:31: undefined: strings

    /tmp/tmp61fkv59l_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub_pjaoe_test.go:21:14: undefined: strings

    /tmp/tmpub_pjaoe_test.go:22:11: no new variables on left side of :=

    /tmp/tmpub_pjaoe_test.go:26:5: undefined: sort

    /tmp/tmpub_pjaoe_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i][:1] + words[i][1:]\n\
    \    }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpai70xx60_test.go:21:14: undefined: strings

    /tmp/tmpai70xx60_test.go:22:11: no new variables on left side of :=

    /tmp/tmpai70xx60_test.go:26:5: undefined: sort

    /tmp/tmpai70xx60_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i < len(s); i++ {\n        result += s[i]\n    }\n    for\
    \ i = len(s) - 1; i >= 0; i-- {\n        result = result[:0]\n        for j =\
    \ i; j >= 0; j-- {\n            result += s[j] + string(rune('a'+(j+k)%26))\n\
    \        }\n        for k = i; k >= 0; k-- {\n            result += s[k] + string(rune('a'+(k+l)%26))\n\
    \        }\n        for l = i; l >= 0; l-- {\n            result += s[l] + string(rune('a'+(l+j)%26))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hdqktii_test.go:27:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    /tmp/tmp6hdqktii_test.go:32:23: invalid operation: s[j] + string(rune(''a'' +
    (j + k) % 26)) (mismatched types byte and string)

    /tmp/tmp6hdqktii_test.go:35:23: invalid operation: s[k] + string(rune(''a'' +
    (k + l) % 26)) (mismatched types byte and string)

    /tmp/tmp6hdqktii_test.go:38:23: invalid operation: s[l] + string(rune(''a'' +
    (l + j) % 26)) (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoips0_68_test.go:21:14: undefined: strings

    /tmp/tmpoips0_68_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = strings.ToLower(words[i])\n  \
    \  }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9xmfboz_test.go:21:14: undefined: strings

    /tmp/tmpa9xmfboz_test.go:22:11: no new variables on left side of :=

    /tmp/tmpa9xmfboz_test.go:24:20: undefined: strings

    /tmp/tmpa9xmfboz_test.go:26:5: undefined: sort

    /tmp/tmpa9xmfboz_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                result += s[j]\n                i++\n                j--\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9pma196_test.go:27:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += string([]byte(w))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5kd7241f_test.go:21:14: undefined: strings

    /tmp/tmp5kd7241f_test.go:22:11: no new variables on left side of :=

    /tmp/tmp5kd7241f_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.Replace(word, string([]rune(word)),\
    \ \"\", -1)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76plwoio_test.go:21:14: undefined: strings

    /tmp/tmp76plwoio_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        j = i\n        for j++; j < len(s); j++ {\n            if s[j]\
    \ < s[i] {\n                break\n            }\n        }\n        if j == len(s)\
    \ {\n            result = result + s[i]\n        } else {\n            result\
    \ = result + string(s[j])\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecotj_8d_test.go:32:22: invalid operation: result + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub_pjaoe_test.go:21:14: undefined: strings

    /tmp/tmpub_pjaoe_test.go:22:11: no new variables on left side of :=

    /tmp/tmpub_pjaoe_test.go:26:5: undefined: sort

    /tmp/tmpub_pjaoe_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoips0_68_test.go:21:14: undefined: strings

    /tmp/tmpoips0_68_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    var i int\n    var j int\n    for i = 0; i\
    \ < len(s); i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i]\
    \ == s[j] {\n                result += s[j] + \" \"\n                i++\n   \
    \             j--\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvl72cwh_test.go:27:27: invalid operation: s[j] + " " (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.Replace(word, string([]rune(word)),\
    \ \"\", -1) + \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6znq0mgk_test.go:21:14: undefined: strings

    /tmp/tmp6znq0mgk_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\" + word\n    }\n    return result\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsr762lh_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result string\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        word = strings.ToLower(word)\n        words = append(words,\
    \ word)\n    }\n    sort.Strings(words)\n    for _, word := range words {\n  \
    \      result = result + word + \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2z_j0s1_test.go:23:26: undefined: strings

    /tmp/tmpv2z_j0s1_test.go:24:16: undefined: strings

    /tmp/tmpv2z_j0s1_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += w\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwktvlw25_test.go:21:14: undefined: strings

    /tmp/tmpwktvlw25_test.go:22:11: no new variables on left side of :=

    /tmp/tmpwktvlw25_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += strings.ToLower(word)\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiv4f8vt7_test.go:21:14: undefined: strings

    /tmp/tmpiv4f8vt7_test.go:24:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                result += s[j]\n                i++\n                j--\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9pma196_test.go:27:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t5zlv6p_test.go:150:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub_pjaoe_test.go:21:14: undefined: strings

    /tmp/tmpub_pjaoe_test.go:22:11: no new variables on left side of :=

    /tmp/tmpub_pjaoe_test.go:26:5: undefined: sort

    /tmp/tmpub_pjaoe_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})[byte('a'+int(char))]\n     \
    \   }\n        result += \"_\"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk59goum__test.go:21:14:\
    \ undefined: strings\n/tmp/tmpk59goum__test.go:26:13: invalid operation: result\
    \ += string([]byte{\u2026})[byte('a' + int(char))] (mismatched types string and\
    \ byte)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.Map(func(r\
    \ rune) rune {\n            switch {\n            case r < 'a' || r > 'z':\n \
    \               return 'a'\n            case r < 'A' || r > 'Z':\n           \
    \     return 'A'\n            case r < '0' || r > '9':\n                return\
    \ '0'\n            }\n            return r\n        }, word)\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ejog6l4_test.go:22:14: undefined: strings

    /tmp/tmp_ejog6l4_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd52z_yg3_test.go:21:14: undefined: strings

    /tmp/tmpd52z_yg3_test.go:22:11: no new variables on left side of :=

    /tmp/tmpd52z_yg3_test.go:26:5: undefined: sort

    /tmp/tmpd52z_yg3_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result string\n    for _, word := range strings.Fields(s)\
    \ {\n        words = append(words, word)\n    }\n    sort.Strings(words)\n   \
    \ for _, word := range words {\n        result = result + string([]byte(word))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni240jb7_test.go:23:26: undefined: strings

    /tmp/tmpni240jb7_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word))\n \
    \   }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc51xvr6i_test.go:21:14: undefined: strings

    /tmp/tmpc51xvr6i_test.go:22:11: no new variables on left side of :=

    /tmp/tmpc51xvr6i_test.go:26:5: undefined: sort

    /tmp/tmpc51xvr6i_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr77aos4v_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            for j = i; j >\
    \ 0; j-- {\n                if s[j-1] > s[j] {\n                    result = result\
    \ + string(s[j-1]) + string(s[j])\n                    s[j-1], s[j] = s[j], s[j-1]\n\
    \                }\n            }\n        } else {\n            for j = i; j\
    \ > 0; j-- {\n                if s[j-1] > s[j] {\n                    result =\
    \ result + string(s[j-1]) + string(s[j])\n                    s[j-1], s[j] = s[j],\
    \ s[j-1]\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp681diuv6_test.go:24:9: k declared but not used

    /tmp/tmp681diuv6_test.go:30:21: cannot assign to s[j - 1] (value of type byte)

    /tmp/tmp681diuv6_test.go:30:29: cannot assign to s[j] (value of type byte)

    /tmp/tmp681diuv6_test.go:37:21: cannot assign to s[j - 1] (value of type byte)

    /tmp/tmp681diuv6_test.go:37:29: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcdfphau_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\" + strings.ToLower(word)\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8_2m07x_test.go:22:14: undefined: strings

    /tmp/tmpv8_2m07x_test.go:24:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i][:1] + strings.ToLower(words[i][1:])\
    \ + words[i][1:]\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltfvsqsu_test.go:21:14: undefined: strings

    /tmp/tmpltfvsqsu_test.go:22:11: no new variables on left side of :=

    /tmp/tmpltfvsqsu_test.go:24:35: undefined: strings

    /tmp/tmpltfvsqsu_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoips0_68_test.go:21:14: undefined: strings

    /tmp/tmpoips0_68_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub_pjaoe_test.go:21:14: undefined: strings

    /tmp/tmpub_pjaoe_test.go:22:11: no new variables on left side of :=

    /tmp/tmpub_pjaoe_test.go:26:5: undefined: sort

    /tmp/tmpub_pjaoe_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoips0_68_test.go:21:14: undefined: strings

    /tmp/tmpoips0_68_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy41rxlnk_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewgn9hrq_test.go:22:14: undefined: strings

    /tmp/tmpewgn9hrq_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycmf4rfd_test.go:21:14: undefined: strings

    /tmp/tmpycmf4rfd_test.go:22:11: no new variables on left side of :=

    /tmp/tmpycmf4rfd_test.go:24:40: undefined: rand

    /tmp/tmpycmf4rfd_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i < len(s); i++ {\n        result += s[i]\n    }\n    for\
    \ i = len(s) - 1; i >= 0; i-- {\n        for j = i; j >= 0; j-- {\n          \
    \  for k = j; k >= 0; k-- {\n                l = k\n                if s[k] >\
    \ s[k+1] {\n                    l = k + 1\n                }\n               \
    \ if s[k] < s[k+1] {\n                    l = k\n                }\n         \
    \       if l != i {\n                    result = result[:l] + s[i]+result[l:]\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29eqczu1_test.go:27:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    /tmp/tmp29eqczu1_test.go:40:36: invalid operation: result[:l] + s[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_rhypsb_test.go:21:14: undefined: strings

    /tmp/tmpk_rhypsb_test.go:24:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
