name: HumanEval_127_intersection
language: go_test.go
prompt: "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given two intervals,\n// where each interval is a pair of integers. For\
  \ example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"\
  NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n\
  // >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc\
  \ intersection(interval1 []interface{}, interval2 []interface{}) string {\n"
tests: "func TestIntersection(t *testing.T) {\n  candidate := intersection\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]interface{}{1, 2}, []interface{}{2, 3}),\
  \ expected: \"NO\" },\n     { actual: candidate([]interface{}{-1, 1}, []interface{}{0,\
  \ 4}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-3, -1}, []interface{}{-5,\
  \ 5}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-2, 2}, []interface{}{-4,\
  \ 0}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-11, 2}, []interface{}{-1,\
  \ -1}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{3,\
  \ 5}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{1,\
  \ 2}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-2, -2}, []interface{}{-3,\
  \ -2}), expected: \"NO\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End - interval2Start\
    \ - interval2End\n    \n    if intersection <= 0 {\n        return \"NO\"\n  \
    \  }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n    }\n  \
    \  \n    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n \
    \   interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval2End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval2Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End >= intersectionStart {\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1Start <= intersectionStart &&\
    \ interval1End >= intersectionEnd {\n            intersectionStart = interval1Start\n\
    \        }\n    }\n    \n    if intersectionEnd <= intersectionStart {\n     \
    \   return \"NO\"\n    }\n    \n    if isPrime(intersectionEnd - intersectionStart)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval2Start > interval2End {\n            return \"NO\"\n        }\n    \
    \    \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n            intersectionStart = interval1End\n\
    \            intersectionEnd = interval1End\n        }\n        \n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \  }\n    \n    if intersectionStart > intersectionEnd {\n        return \"NO\"\
    \n    }\n    \n    if intersectionStart <= intersectionEnd {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start < interval1End\
    \ && interval2Start < interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1End <= interval2End {\n     \
    \       intersectionEnd = interval1End\n        }\n        interval1Start += interval1Step\n\
    \        interval2Start += interval2Step\n    }\n    \n    if interval1Start <\
    \ interval1End {\n        intersectionStart = interval1Start\n        intersectionEnd\
    \ = interval1End\n    }\n    if interval2Start < interval2End {\n        intersectionEnd\
    \ = interval2Start\n        intersectionStart = interval2End\n    }\n    \n  \
    \  if intersectionStart > intersectionEnd {\n        return \"NO\"\n    }\n  \
    \  \n    if intersectionStart < interval1Start || intersectionEnd > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionStart <= interval1Start {\n            return \"YES\"\
    \n        }\n        if intersectionEnd <= interval2End {\n            return\
    \ \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    var intersectionLength int\n\
    \    var isPrime bool\n\n    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(int)\n        interval1End = interval1Start + interval1[i].(int)\n\
    \        interval2Start = interval2[i].(int)\n        interval2End = interval2Start\
    \ + interval2[i].(int)\n\n        if interval1Start > interval1End {\n       \
    \     return \"NO\"\n        }\n\n        if interval2Start > interval2End {\n\
    \            return \"NO\"\n        }\n\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            intersectionLength = interval1End\
    \ - interval1Start\n            if isPrime(intersectionLength) {\n           \
    \     return \"YES\"\n            }\n        }\n    }\n\n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval2Start > interval2End {\n            return \"NO\"\n        }\n    \
    \    \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n            intersectionStart = interval1End\n\
    \            intersectionEnd = interval1End\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \      \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n            intersectionStart = interval1Start\n\
    \            intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        return \"YES\"\n    }\n    \n    return \"NO\"\
    \n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n  \
    \  }\n    \n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    interval1Length := interval1End - interval1Start\n    interval2Length\
    \ := interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"NO\"\n\
    \        }\n        return \"YES\"\n    }\n    \n    if interval1Length < interval2Length\
    \ {\n        interval1Start += interval1Length\n        interval1End += interval1Length\n\
    \    }\n    \n    if interval1Length > interval2Length {\n        interval2Start\
    \ += interval2Length\n        interval2End += interval2Length\n    }\n    \n \
    \   if interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n \
    \   if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n \
    \   if interval1Start <= interval2Start {\n        return \"YES\"\n    }\n   \
    \ \n    return \"NO\"\n}\n", "    \n    interval1_start := interval1[0].(float64)\n\
    \    interval1_end := interval1[1].(float64)\n    interval2_start := interval2[0].(float64)\n\
    \    interval2_end := interval2[1].(float64)\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i := range interval1\
    \ {\n        interval1[i] = int(interval1[i])\n    }\n    for i := range interval2\
    \ {\n        interval2[i] = int(interval2[i])\n    }\n    \n    result := make([]int,\
    \ len(interval1))\n    \n    for i := range interval1 {\n        for j := range\
    \ interval2 {\n            if interval1[i] < interval2[j] {\n                result[i]\
    \ = interval1[i]\n                break\n            }\n            if interval1[i]\
    \ > interval2[j] {\n                result[i] = interval2[j]\n               \
    \ break\n            }\n        }\n    }\n    \n    if len(result) == 0 {\n  \
    \      return \"NO\"\n    }\n    \n    for i := range result {\n        if result[i]\
    \ == 0 {\n            return \"NO\"\n        }\n    }\n    \n    if isPrime(result[0])\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End || interval2Start > interval2End {\n   \
    \     return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1Length * interval2Length\n    \n    if intersectionLength == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if isPrime(intersectionLength) {\n  \
    \      return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    var result string\n    if len(interval1)\
    \ > len(interval2) {\n        result = intersection(interval2, interval1)\n  \
    \  } else {\n        result = intersection(interval1, interval2)\n    }\n    if\
    \ result == \"YES\" {\n        return \"YES\"\n    }\n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    return \"NO\"\n}\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    result := 0\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1Start <= interval1[i].([]interface{})[1]\
    \ && interval1[i].([]interface{})[1] < interval1End {\n            result += interval1[i].([]interface{})[1]\
    \ - interval1[i].([]interface{})[0]\n        }\n    }\n    \n    for i := 0; i\
    \ < len(interval2); i++ {\n        if interval2Start <= interval2[i].([]interface{})[1]\
    \ && interval2[i].([]interface{})[1] < interval2End {\n            result += interval2[i].([]interface{})[1]\
    \ - interval2[i].([]interface{})[0]\n        }\n    }\n    \n    if result % 2\
    \ == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    interval1Length := interval1End\
    \ - interval1Start\n    interval2Length := interval2End - interval2Start\n   \
    \ \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n    \n    intersectionLength := interval1Length * interval2Length\n \
    \   \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n \
    \   if interval1Length == interval2Length {\n        if interval1Start <= interval2Start\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if interval1Length > interval2Length {\n        interval1Length, interval2Length\
    \ = interval2Length, interval1Length\n    }\n    \n    if interval1Length % 2\
    \ == 0 {\n        interval1Length /= 2\n    }\n    if interval2Length % 2 == 0\
    \ {\n        interval2Length /= 2\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n    \n    if interval1Length > interval2Length\
    \ {\n        interval1Length, interval2Length = interval2Length, interval1Length\n\
    \    }\n    \n    if interval1Length == 0 {\n        return \"NO\"\n    }\n  \
    \  \n    if interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Length == interval2Length {\n        if interval1Start <= interval2Start\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if interval1Length > interval2Length {\n        interval1Length, interval2Length\
    \ = interval2Length, interval1Length\n    }\n    \n    if interval1Length == 0\
    \ {\n        return \"NO\"\n    }\n    \n    if interval2Length == 0 {\n     \
    \   return \"NO\"\n    }\n    \n    if interval1Length == interval2Length {\n\
    \        if interval1Start <= interval2Start {\n            return \"YES\"\n \
    \       }", "    \n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart <= interval2End {\n        if interval1Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End {\n            if interval1Start\
    \ <= intersectionStart && intersectionStart <= interval2Start {\n            \
    \    intersectionEnd = intersectionEnd\n            } else {\n               \
    \ intersectionStart = intersectionStart\n            }\n        } else {\n   \
    \         break\n        }\n    }\n    \n    if intersectionStart <= interval2End\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionLength := interval1End - interval1Start\n    \n   \
    \ if interval2Start <= interval2End && interval1Start <= interval1End {\n    \
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \           if interval2Start <= interval1Start && interval2End >= interval1End\
    \ {\n                if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n                    if interval2Start <= interval1Start && interval2End >=\
    \ interval1End {\n                        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                            if interval2Start\
    \ <= interval1Start && interval2End >= interval1End {\n                      \
    \          return \"YES\"\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n\n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\n   \
    \ if interval1End < interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ > interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start >\
    \ interval2End {\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"NO\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"NO\"\n  \
    \  }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval2End {\n            return \"NO\"\n        }\n\
    \        if intersectionEnd < interval2Start {\n            return \"NO\"\n  \
    \      }\n        \n        if intersectionStart <= intersectionEnd {\n      \
    \      intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n     \
    \   return \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1) ==\
    \ 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start + 1\n    interval2Length := interval2End -\
    \ interval2Start + 1\n    \n    if interval1Length == 0 || interval2Length ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        interval1Start += interval1Length\n   \
    \     interval1End += interval1Length\n        interval2Start += interval2Length\n\
    \        interval2End += interval2Length\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= interval2Start {\n            return \"NO\"\n        }\n\
    \        if interval1End >= interval2End {\n            return \"NO\"\n      \
    \  }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"NO\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start {\n            return \"NO\"\n        }\n \
    \       if interval1End >= interval2End {\n            return \"NO\"\n       \
    \ }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"NO\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n", "    \n    interval1Start := interval1[0].(int)\n  \
    \  interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        fmt.Println(\"interval1Start > interval1End\")\n        return \"\
    NO\"\n    }\n    if interval2Start > interval2End {\n        fmt.Println(\"interval2Start\
    \ > interval2End\")\n        return \"NO\"\n    }\n    \n    \n    if interval1Start\
    \ < interval2Start {\n        fmt.Println(\"interval1Start < interval2Start\"\
    )\n        return \"NO\"\n    }\n    if interval1End > interval2End {\n      \
    \  fmt.Println(\"interval1End > interval2End\")\n        return \"NO\"\n    }\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    var interval1Start, interval1End int\n\
    \    var interval2Start, interval2End int\n\n    interval1Start, interval1End\
    \ = interval1[0].(int), interval1[1].(int)\n    interval2Start, interval2End =\
    \ interval2[0].(int), interval2[1].(int)\n\n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start >= interval2End &&\
    \ interval1End <= interval2Start {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n\n    return\
    \ \"NO\"\n}\n", "    if len(interval1) == 0 || len(interval2) == 0 {\n       \
    \ return \"NO\"\n    }\n\n    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval1End - interval2Start - interval2End\n    if intersection\
    \ <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection) {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1End <= interval2End {\n     \
    \       intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ > intersectionEnd {\n            return \"NO\"\n        }\n        \n      \
    \  intersectionStart = intersectionStart + 1\n        intersectionEnd = intersectionEnd\
    \ + 1\n    }\n    \n    if intersectionStart > intersectionEnd {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd {\n       \
    \ return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for interval1Start\
    \ <= interval1End && interval2Start <= interval2End {\n        if interval1Start\
    \ <= interval2Start {\n            intersectionStart = interval1Start\n      \
    \      intersectionEnd = interval1End\n        }\n        if interval1End <= interval2End\
    \ {\n            intersectionEnd = interval1End\n        }\n        \n       \
    \ if intersectionStart <= intersectionEnd {\n            intersectionStart = interval1Start\n\
    \            intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
  "    var result string\n    \n    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n   \
    \     if interval1[i].(float64) >= interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    if isPrime(interval1[0].(float64)\
    \ + interval1[1].(float64)) && isPrime(interval2[0].(float64) + interval2[1].(float64))\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for interval1Start\
    \ < interval1End {\n        for interval2Start < interval2End {\n            if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \         intersectionStart = interval1Start\n                intersectionEnd\
    \ = interval1End\n                break\n            }\n            if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n                intersectionStart\
    \ = interval1End\n                intersectionEnd = interval1End\n           \
    \     break\n            }\n            if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                break\n     \
    \       }\n            if interval1Start >= interval2Start && interval1End <=\
    \ interval2End {\n                intersectionStart = interval1Start\n       \
    \         intersectionEnd = interval1End\n                break\n            }\n\
    \            if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n                intersectionStart = interval1Start\n                intersectionEnd\
    \ = interval1End\n                break\n            }\n        }\n    }\n   \
    \ \n    if intersectionStart > intersectionEnd {\n        return \"NO\"\n    }\n\
    \    if intersectionStart < intersectionEnd {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for intersectionStart <= interval2End\
    \ {\n        if intersectionEnd > interval2Start {\n            intersectionEnd\
    \ = interval2End\n        }\n        \n        if intersectionEnd > interval1End\
    \ {\n            intersectionEnd = interval1End\n        }\n        \n       \
    \ if intersectionStart <= intersectionEnd {\n            if intersectionEnd >\
    \ interval1Start {\n                intersectionEnd = interval1End\n         \
    \   }\n            \n            if intersectionStart <= intersectionEnd {\n \
    \               intersectionStart += interval1Start\n                intersectionEnd\
    \ += interval1Start\n            }\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd > interval1Start {\n      \
    \      intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ <= intersectionEnd {\n            intersectionStart += interval1Start\n    \
    \        intersectionEnd += interval1Start\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd > interval1Start {\n      \
    \      intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ <= intersectionEnd {\n            intersectionStart += interval1Start\n    \
    \        intersectionEnd += interval1Start\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd > interval1Start {\n      \
    \      intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ <= intersectionEnd {\n            intersectionStart += interval1Start\n    \
    \        intersectionEnd += interval1Start\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd > interval1Start {\n      \
    \      intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ <= intersectionEnd {\n            intersectionStart += interval1Start\n    \
    \        intersectionEnd += interval1Start\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd > interval1Start {\n      \
    \      intersectionEnd = interval1End\n        }\n        \n        if intersectionStart\
    \ <= intersectionEnd {", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionLength := interval1End - interval1Start\n\
    \    \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"YES\"\n \
    \   }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    var interval1Start int\n    var interval1End int\n    var interval2Start\
    \ int\n    var interval2End int\n    var interval1Length int\n    var interval2Length\
    \ int\n    var primeLength bool\n    \n    interval1Start = interval1[0].(int)\n\
    \    interval1End = interval1[1].(int)\n    interval2Start = interval2[0].(int)\n\
    \    interval2End = interval2[1].(int)\n    interval1Length = interval1End - interval1Start\
    \ + 1\n    interval2Length = interval2End - interval2Start + 1\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        result = \"NO\"\n    } else {\n    \
    \    primeLength = true\n        for i := 2; i <= interval1Length && i <= interval2Length;\
    \ i++ {\n            if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n                if interval1Start <= interval2Start {\n                 \
    \   interval1Start = interval1Start + 1\n                }\n                if\
    \ interval1End >= interval2End {\n                    interval1End = interval1End\
    \ - 1\n                }\n                if interval1Start <= interval2End {\n\
    \                    interval1Length = interval1End - interval1Start + 1\n   \
    \             }\n                if interval1Length == i {\n                 \
    \   primeLength = false\n                }\n            }\n            if interval1Start\
    \ <= interval2Start {\n                interval1Start = interval1Start + 1\n \
    \           }\n            if interval1End >= interval2End {\n               \
    \ interval1End = interval1End - 1\n            }\n            if interval1Start\
    \ <= interval2End {\n                interval1Length = interval1End - interval1Start\
    \ + 1\n            }\n            if interval1Length == i {\n                primeLength\
    \ = false\n            }\n        }\n        if primeLength {\n            result\
    \ = \"YES\"\n        } else {\n            result = \"NO\"\n        }\n    }\n\
    \    return result\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n\n    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n\n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n\n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1End - interval1Start\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        if intersectionLength == 0 {\n  \
    \          return \"NO\"\n        }\n        \n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n        \n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        if intersectionLength == 0 {\n            return \"NO\"\n       \
    \ }\n        \n        if isPrime(intersectionLength) {\n            return \"\
    YES\"\n        }\n        \n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        if intersectionLength\
    \ == 0 {\n            return \"NO\"\n        }\n        \n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n        \n        return \"NO\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    if interval1Start > interval2End {\n        interval1Start, interval1End\
    \ = interval2End, interval1Start\n    }\n    if interval2Start > interval1End\
    \ {\n        interval2Start, interval2End = interval1End, interval2Start\n   \
    \ }\n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n  \
    \  if interval2Start > interval1End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ < interval2Start {\n        return \"NO\"\n    }\n    if interval2Start < interval1Start\
    \ {\n        return \"NO\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End < interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End < interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ < interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start < interval2Start && interval1End < interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ < interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start < interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start < interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1End <= interval2End {\n        if interval1End < interval2Start\
    \ {\n            break\n        }\n        \n        if interval1End > intersectionEnd\
    \ {\n            intersectionStart = interval1End\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval1End < intersectionEnd\
    \ {\n            intersectionEnd = interval1End\n        }\n    }\n    \n    if\
    \ intersectionEnd < interval2Start {\n        return \"NO\"\n    }\n    \n   \
    \ if intersectionStart > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    if intersectionStart < intersectionEnd {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ == interval2Length {\n        if interval1Start <= interval2Start {\n      \
    \      return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ < interval2Length {\n        interval1Start += interval1Length\n        interval1End\
    \ += interval1Length\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"\" {\n        return \"YES\"\n    }\n    \n   \
    \ return result\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersection := interval1Start <= interval2Start &&\
    \ interval1End >= interval2End\n    if intersection {\n        return \"YES\"\n\
    \    }\n    \n    intersection := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n    if intersection {\n        return \"YES\"\n    }\n  \
    \  \n    return \"NO\"\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i] > interval2[i] {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i] < interval2[i] {\n            result = \"NO\"\
    \n            break\n        }\n    }\n    \n    if result == \"NO\" {\n     \
    \   return \"NO\"\n    }\n    \n    if result == \"YES\" {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for intersectionStart <= interval2End\
    \ {\n        if interval1Start <= intersectionStart && intersectionStart <= interval2End\
    \ {\n            if interval1End <= intersectionEnd && intersectionEnd <= interval2End\
    \ {\n                intersectionEnd = intersectionEnd + 1\n            } else\
    \ {\n                return \"NO\"\n            }\n        } else {\n        \
    \    return \"NO\"\n        }\n    }\n    \n    if interval1Start <= intersectionStart\
    \ && intersectionStart <= interval2End {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n", "    \n    // Your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if len(interval1) < len(interval2) {\n        interval1,\
    \ interval2 = interval2, interval1\n    }\n    \n    interval1 := interval1[:len(interval2)]\n\
    \    interval2 := interval2[:len(interval1)]\n    \n    result := make([]interface{},\
    \ len(interval1))\n    \n    for i := 0; i < len(interval1); i++ {\n        if\
    \ interval1[i] > interval2[i] {\n            result[i] = interval1[i]\n      \
    \  } else {\n            result[i] = interval2[i]\n        }\n    }\n    \n  \
    \  result := result[:len(interval1)]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := result[:len(result)/2]\n    \n    result := result[:len(result)/2]\n\
    \    \n    result := ", "    var result string\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) <= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        return \"NO\"\n    }\n    if\
    \ interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start\n    interval2Length := interval2End - interval2Start\n\
    \    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"\
    NO\"\n    }\n    \n    interval1Prime := true\n    interval2Prime := true\n  \
    \  \n    if interval1Length == interval2Length {\n        \n        for i := 0;\
    \ i < interval1Length; i++ {\n            \n            if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                interval1Prime = false\n\
    \            }\n            \n            if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n                interval1Prime = false\n \
    \           }\n            \n            if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n                interval1Prime = false\n   \
    \         }\n            \n            if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n                interval1Prime = false\n            }\n\
    \            \n            if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n                interval1Prime = false\n            }\n \
    \           \n            if interval1Start <= interval2End && interval1End >=\
    \ interval2Start {\n                interval1Prime = false\n            }\n  \
    \          \n            if interval1Start >= interval2Start && interval1End <=\
    \ interval2End {\n                interval1Prime = false\n            }\n    \
    \        \n            if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n                interval1Prime = false\n            }\n            \n   \
    \         if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n                interval1Prime = false\n            }\n            \n   \
    \         if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n                interval1Prime = false\n            }\n            \n   \
    \         if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n                interval1Prime = false\n            }\n            \n   \
    \         if ", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var interval1Length, interval2Length int\n    var isIntersecting\
    \ bool\n\n    if len(interval1) != len(interval2) {\n        return \"NO\"\n \
    \   }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1Start = interval1[i].(int)\n\
    \        interval1End = interval1Start + interval1[i].(int)\n        interval1Length\
    \ = interval1End - interval1Start\n\n        interval2Start = interval2[i].(int)\n\
    \        interval2End = interval2Start + interval2[i].(int)\n        interval2Length\
    \ = interval2End - interval2Start\n\n        if interval1Length == 0 || interval2Length\
    \ == 0 {\n            continue\n        }\n\n        if interval1Start > interval2End\
    \ {\n            isIntersecting = false\n            break\n        } else if\
    \ interval1Start < interval2Start {\n            isIntersecting = false\n    \
    \        break\n        } else if interval1End > interval2End {\n            isIntersecting\
    \ = false\n            break\n        }\n    }\n\n    if isIntersecting {\n  \
    \      return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval1End - interval2Start - interval2End\n    if intersection\
    \ <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection) {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End || interval2Start > interval2End {\n   \
    \     return \"NO\"\n    }\n    \n    intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n    \n    if intersection {\n        if interval1Start\
    \ <= interval2Start {\n            interval1Start += interval1End - interval2Start\n\
    \            interval1End -= interval2End - interval1Start\n        }\n      \
    \  if interval1End >= interval2End {\n            interval1End -= interval2End\
    \ - interval1Start\n            interval1Start += interval2Start - interval1End\n\
    \        }\n    }\n    \n    if interval1Start <= interval1End && interval1Start\
    \ <= interval2Start {\n        if interval1Start <= interval2End {\n         \
    \   interval1Start += interval1End - interval2Start\n            interval1End\
    \ -= interval2End - interval1Start\n        }\n        if interval1End >= interval2End\
    \ {\n            interval1End -= interval2End - interval1Start\n            interval1Start\
    \ += interval2Start - interval1End\n        }\n    }\n    \n    if interval1Start\
    \ <= interval1End && interval1Start <= interval2End {\n        if interval1Start\
    \ <= interval2End {\n            interval1Start += interval1End - interval2Start\n\
    \            interval1End -= interval2End - interval1Start\n        }\n      \
    \  if interval1End >= interval2End {\n            interval1End -= interval2End\
    \ - interval1Start\n            interval1Start += interval2Start - interval1End\n\
    \        }\n    }\n    \n    if interval1Start <= interval1End && interval1Start\
    \ > interval2Start {\n        if interval1Start <= interval2End {\n          \
    \  interval1Start += interval1End - interval2Start\n            interval1End -=\
    \ interval2End - interval1Start\n        }\n        if interval1End >= interval2End\
    \ {\n            interval1End -= interval2End - interval1Start\n            interval1Start\
    \ += interval2Start - interval1End\n        }\n    }\n    \n    if interval1Start\
    \ <= interval1End && interval1Start > interval2End {\n        if interval1Start\
    \ <= interval", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    interval1PrimeLength\
    \ := interval1Length - 1\n    interval2PrimeLength := interval2Length - 1\n  \
    \  \n    if interval1PrimeLength == 0 || interval2PrimeLength == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        if interval1Start <= interval2Start {\n            return \"NO\"\n\
    \        }\n        if interval1End >= interval2End {\n            return \"NO\"\
    \n        }\n        if interval1Start <= interval2End {\n            return \"\
    NO\"\n        }\n        if interval1End >= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n            return \"YES\"\n        }\n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            return \"YES\"\
    \n        }\n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    interval1Start,\
    \ interval1End := interval1[0].([]interface{})[0], interval1[0].([]interface{})[1]\n\
    \    interval2Start, interval2End := interval2[0].([]interface{})[0], interval2[0].([]interface{})[1]\n\
    \    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n    if interval1Start >= interval2Start {\n        fmt.Println(\"\
    interval1Start >= interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ <= interval2End {\n        fmt.Println(\"interval1End <= interval2End\")\n \
    \       return \"NO\"\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) == 0 || len(interval2) == 0\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    interval1Length := interval1End - interval1Start\n    interval2Length :=\
    \ interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    intersectionLength := interval1Length\
    \ * interval2Length\n    \n    if intersectionLength == 0 {\n        return \"\
    NO\"\n    }\n    \n    if isPrime(intersectionLength) {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    var result string\n    if len(interval1) > len(interval2)\
    \ {\n        result = intersection(interval2, interval1)\n    } else {\n     \
    \   result = intersection(interval1, interval2)\n    }\n    return result\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start + interval1End + interval2Start + interval2End\n\
    \    \n    if intersection <= 1 {\n        return \"NO\"\n    }\n    \n    if\
    \ isPrime(intersection) {\n        return \"YES\"\n    }\n    \n    return \"\
    NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End - interval2Start\
    \ - interval2End\n    \n    if intersection <= 0 {\n        return \"NO\"\n  \
    \  }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n    }\n  \
    \  \n    return \"NO\"\n}\n", "    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        fmt.Println(\"interval1Start > interval1End\")\n        return \"\
    NO\"\n    }\n    if interval2Start > interval2End {\n        fmt.Println(\"interval2Start\
    \ > interval2End\")\n        return \"NO\"\n    }\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval1End {\n      \
    \  interval1Start, interval1End = interval1End, interval1Start\n    }\n    if\
    \ interval2Start > interval2End {\n        interval2Start, interval2End = interval2End,\
    \ interval2Start\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        if interval1Start <= interval2End {\n           \
    \ interval1Start, interval1End = interval2Start, interval2End\n        }\n   \
    \     if interval1End >= interval2Start {\n            interval1End, interval1Start\
    \ = interval2End, interval2Start\n        }\n        \n        if interval1Start\
    \ <= interval1End && interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n            \n            interval1Start += interval1End - interval1Start\n\
    \            interval1End -= interval1End - interval1Start\n            interval2Start\
    \ += interval2End - interval2Start\n            interval2End -= interval2End -\
    \ interval2Start\n            \n            if interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n                \n                if interval1Start\
    \ <= interval2Start {\n                    interval1Start += interval2Start -\
    \ interval1Start\n                    interval1End -= interval2Start - interval1Start\n\
    \                }\n                if interval1End >= interval2End {\n      \
    \              interval1End -= interval2End - interval1End\n                }\n\
    \                \n                if interval1Start <= interval1End && interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n                    \n\
    \                    if interval1Start <= interval2End {\n                   \
    \     interval1Start += interval2End - interval1Start\n                      \
    \  interval1End -= interval2End - interval1Start\n                    }\n    \
    \                if interval1End >= interval2Start {\n                       \
    \ interval1End -= interval2Start - interval1End\n                    }\n     \
    \               \n                    if interval1Start <= interval1End && interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n                      \
    \  \n                        if interval1Start <= interval2End {\n           \
    \                 interval1Start += interval2End - interval1Start\n          \
    \                  interval1End -= interval2End - interval1Start\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End || interval2Start > interval2End {\n   \
    \     return \"NO\"\n    }\n    \n    interval1Start += 0.5\n    interval1End\
    \ += 0.5\n    interval2Start += 0.5\n    interval2End += 0.5\n    \n    interval1Start\
    \ := int(interval1Start)\n    interval1End := int(interval1End)\n    interval2Start\
    \ := int(interval2Start)\n    interval2End := int(interval2End)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start < interval2Start {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start < interval2Start {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start == interval2Start {\n        if interval1End > interval2End {\n\
    \            return \"NO\"\n        }\n    }\n    \n    if interval1Start == interval2Start\
    \ {\n        if interval1End > interval2End {\n            return \"NO\"\n   \
    \     }\n    }\n    \n    if interval1Start == interval2Start {\n        if interval1End\
    \ > interval2End {\n            return \"NO\"\n        }\n    }\n    \n    if\
    \ interval1Start == interval2Start {\n        if interval1End > interval2End {\n\
    \            return \"NO\"\n        }\n    }\n    \n    if interval1Start == interval2Start\
    \ {\n        if interval1End > interval2End {\n            return \"NO\"\n   \
    \     }\n    }\n    \n    if interval1Start == interval2Start {\n        if interval1End\
    \ > interval2End {\n            return \"NO\"\n        }\n    }\n    \n    if\
    \ interval1Start == interval2Start {\n        if interval1End > interval2End {\n\
    \            return \"NO\"\n        }\n    }\n    \n    if interval1Start == interval2Start\
    \ {\n        if interval1End > interval2End {\n            return \"NO\"\n   \
    \     }\n    }\n    \n    if interval1Start == interval2Start {\n        if interval1End\
    \ > interval2End {\n            return \"NO\"\n        }\n    }\n    \n    if\
    \ interval1Start == interval", "    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval2Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ {\n        interval1Start = interval1Start + 1\n    }\n    \n    if interval1End\
    \ <= interval2End {\n        interval1End = interval1End + 1\n    }\n    \n  \
    \  if interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n  \
    \  if interval1Start <= interval2Start {\n        interval1Start = interval1Start\
    \ + 1\n    }\n    \n    if interval1End >= interval2End {\n        interval1End\
    \ = interval1End + 1\n    }\n    \n    if interval1Start < interval2Start {\n\
    \        return \"NO\"\n    }\n    \n    if interval1End > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End < interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start >= interval2Start && interval1End\
    \ > interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ < interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start > interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start > interval2Start\
    \ && interval1End < interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End > interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start < interval2Start && interval1End\
    \ <= interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ > interval2Start && interval1End < interval2End {\n        return \"NO\"\n \
    \   }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start < interval2Start\
    \ && interval", "    var result string\n    var length int\n    var start int\n\
    \    var end int\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var a int\n   \
    \ var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var\
    \ g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval2End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval2Start\
    \ {\n            return \"NO\"\n        }\n        \n        if intersectionStart\
    \ <= interval1Start && intersectionEnd >= interval1End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \  }\n    \n    if intersectionStart <= intersectionEnd {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n", "    if len(interval1) < len(interval2) {\n\
    \        interval1, interval2 = interval2, interval1\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start\n    interval2Length := interval2End - interval2Start\n\
    \    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"\
    NO\"\n    }\n    \n    interval1PrimeLength := interval1Length - 1\n    interval2PrimeLength\
    \ := interval2Length - 1\n    \n    if interval1PrimeLength == 0 || interval2PrimeLength\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        interval1PrimeLength--\n        interval2PrimeLength--\n    }\n \
    \   \n    if interval1PrimeLength == 0 {\n        return \"NO\"\n    }\n    \n\
    \    if interval2PrimeLength == 0 {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1PrimeLength == interval2PrimeLength {\n        interval1PrimeLength--\n\
    \        interval2PrimeLength--\n    }\n    \n    if interval1PrimeLength == 0\
    \ {\n        return \"NO\"\n    }\n    \n    if interval2PrimeLength == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        interval1PrimeLength--\n        interval2PrimeLength--\n    }\n \
    \   \n    if interval1PrimeLength == 0 {\n        return \"NO\"\n    }\n    \n\
    \    if interval2PrimeLength == 0 {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1PrimeLength == interval2PrimeLength {\n        interval1PrimeLength--\n\
    \        interval2PrimeLength--\n    }\n    \n    if interval1PrimeLength == 0\
    \ {\n        return \"NO\"\n    }\n    \n    if interval2PrimeLength == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        interval1PrimeLength--\n        interval2PrimeLength--\n    }\n \
    \   \n    if interval1PrimeLength", "    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        fmt.Println(\"interval1Start > interval1End\")\n        return \"\
    NO\"\n    }\n    if interval2Start > interval2End {\n        fmt.Println(\"interval2Start\
    \ > interval2End\")\n        return \"NO\"\n    }\n    \n    \n    if interval1Start\
    \ < interval2Start {\n        fmt.Println(\"interval1Start < interval2Start\"\
    )\n        return \"NO\"\n    }\n    if interval1End > interval2End {\n      \
    \  fmt.Println(\"interval1End > interval2End\")\n        return \"NO\"\n    }\n\
    \    \n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End < interval2End {\n        fmt.Println(\"interval1Start <= interval2Start\
    \ && interval1End < interval2End\")\n        return \"NO\"\n    }\n    if interval1Start\
    \ < interval2Start && interval1End <= interval2End {\n        fmt.Println(\"interval1Start\
    \ < interval2Start && interval1End <= interval2End\")\n        return \"NO\"\n\
    \    }\n    if interval1Start > interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start > interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n    if interval1Start > interval2Start\
    \ && interval1End < interval2End {\n        fmt.Println(\"interval1Start > interval2Start\
    \ && interval1End < interval2End\")\n        return \"NO\"\n    }\n    \n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start && interval1End\
    \ < interval2End {\n        fmt.Println(\"interval1Start <= interval2Start &&\
    \ interval1End < interval2End\")\n        return \"NO\"\n    }\n    if interval1Start\
    \ < interval2Start && interval1End <= interval2End {\n        fmt.Println(\"interval1Start ",
  "    \n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i := 0; i < len(interval1); i++ {\n        interval1[i] = int(interval1[i])\n\
    \    }\n    for i := 0; i < len(interval2); i++ {\n        interval2[i] = int(interval2[i])\n\
    \    }\n    \n    result := make([]int, len(interval1))\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        for j := 0; j < len(interval2); j++ {\n \
    \           if interval1[i] < interval2[j] {\n                result[i] = interval1[i]\n\
    \                break\n            }\n        }\n    }\n    \n    if len(result)\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(result);\
    \ i++ {\n        if result[i] == interval1[i] {\n            continue\n      \
    \  }\n        if result[i] == interval2[i] {\n            continue\n        }\n\
    \        if result[i] > interval1[i] && result[i] < interval2[i] {\n         \
    \   return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval2Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start < interval2Start {\n            intersectionStart = interval1Start\n\
    \            intersectionEnd = interval1End\n        }\n        \n        if interval1End\
    \ > interval2End {\n            intersectionStart = interval1End\n           \
    \ intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ > intersectionEnd {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ < intersectionEnd {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ == intersectionEnd {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ < intersectionEnd {\n        return \"NO\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    if len(interval1) == 0 || len(interval2) == 0 {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval1End - interval2Start\n        interval1End\
    \ -= interval1End - interval2Start\n    }\n    if interval1End >= interval2End\
    \ {\n        interval1End += interval1Start - interval2End\n        interval1Start\
    \ -= interval1Start - interval2End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval1End - interval2Start\n        interval1End\
    \ -= interval1End - interval2Start\n    }\n    if interval1End >= interval2End\
    \ {\n        interval1End += interval1Start - interval2End\n        interval1Start\
    \ -= interval1Start - interval2End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval1End - interval2Start\n        interval1End\
    \ -= interval1End - interval2Start\n    }\n    if interval1End >= interval2End\
    \ {\n        interval1End += interval1Start - interval2End\n        interval1Start\
    \ -= interval1Start - interval2End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval1End - interval2Start\n        interval1End\
    \ -= interval1End - interval2Start\n    }\n    if interval1End >= interval2End\
    \ {\n        interval1End += interval1Start - interval2End\n        interval1Start\
    \ -= interval1Start - interval2End\n    }\n    \n", "    \n    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    interval1Start, interval1End := interval1[0].(int),\
    \ interval1[1].(int)\n    interval2Start, interval2End := interval2[0].(int),\
    \ interval2[1].(int)\n    \n    if interval1Start > interval1End {\n        fmt.Println(\"\
    interval1Start > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start\
    \ > interval2End {\n        fmt.Println(\"interval2Start > interval2End\")\n \
    \       return \"NO\"\n    }\n    \n    if interval1Start < interval2Start {\n\
    \        fmt.Println(\"interval1Start < interval2Start\")\n        return \"NO\"\
    \n    }\n    if interval1End > interval2End {\n        fmt.Println(\"interval1End\
    \ > interval2End\")\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        fmt.Println(\"\
    interval1Start <= interval2Start && interval1End >= interval2End\")\n        return\
    \ \"YES\"\n    }\n    if interval1Start <= interval2Start && interval1End < interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End <\
    \ interval2End\")\n        return \"NO\"\n    }\n    if interval1Start < interval2Start\
    \ && interval1End <= interval2End {\n        fmt.Println(\"interval1Start < interval2Start\
    \ && interval1End <= interval2End\")\n        return \"NO\"\n    }\n    \n   \
    \ if interval1Start <= interval2Start && interval1End >= interval2End {\n    \
    \    fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"YES\"\n    }\n    if interval1Start < interval2Start && interval1End\
    \ <= interval2End {\n        fmt.Println(\"interval1Start < interval2Start &&\
    \ interval1End <= interval2End\")\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End < interval2End {\n        fmt.Println(\"\
    interval1Start <= interval2Start && interval1End < interval2End\")\n        return\
    \ \"NO\"\n    }\n    if interval1Start < interval2Start && interval1End <= interval2End\
    \ {\n        fmt.Println(\"interval1Start < interval2Start && interval1End <=\
    \ interval2End\")\n        return \"NO\"\n    }\n    \n    if interval1Start <=\
    \ interval2Start && interval1End >= interval2End {\n        fmt.Println(\"interval1Start\
    \ <= interval2Start && interval1End ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    interval1Length := interval1End\
    \ - interval1Start\n    interval2Length := interval2End - interval2Start\n   \
    \ \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n    \n    intersectionLength := interval1Length * interval2Length\n \
    \   \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n \
    \   if interval1Length == interval2Length {\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return \"YES\"\n        }\n \
    \       return \"NO\"\n    }\n    \n    if interval1Length > interval2Length {\n\
    \        interval1Length, interval2Length = interval2Length, interval1Length\n\
    \    }\n    \n    if interval1Length == 1 {\n        if interval1Start <= interval2Start\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if interval2Length == 1 {\n        if interval2Start <= interval1Start\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if interval1Length == interval2Length {\n        if interval1Start <=\
    \ interval2Start {\n            return \"YES\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length > interval2Length {\n        interval1Length,\
    \ interval2Length = interval2Length, interval1Length\n    }\n    \n    if interval1Length\
    \ == 1 {\n        if interval1Start <= interval2Start {\n            return \"\
    YES\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval2Length\
    \ == 1 {\n        if interval2Start <= interval1Start {\n            return \"\
    YES\"\n        }\n        if interval2End >= interval1End {\n            return\
    \ \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ == interval2", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    interval1Start += interval2Start\n    interval1End += interval2Start\n\
    \    \n    if interval1Start < interval1End {\n        interval1Start += interval1End\n\
    \        interval1End += interval1End\n    }\n    if interval2Start < interval2End\
    \ {\n        interval2Start += interval2End\n        interval2End += interval2End\n\
    \    }\n    \n    if interval1Start > interval1End {\n        return \"NO\"\n\
    \    }\n    if interval2Start > interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start < interval2Start {\n        return \"NO\"\n    }\n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    if interval2Start < interval1End {\n        return \"NO\"\n    }\n    if\
    \ interval2Start > interval1End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval2Start <= interval1Start && interval2End\
    \ >= interval1End {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    \n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n   \
    \ }\n    if interval1Start < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    intersectionLength := interval1End - interval1Start\n    if interval1Start\
    \ <= interval2Start {\n        intersectionLength += interval2End - interval2Start\n\
    \    }\n    \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n\
    \    \n    if isPrime(intersectionLength) {\n        return \"YES\"\n    }\n \
    \   \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n  \
    \      return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i := range interval1\
    \ {\n        interval1[i] = int(interval1[i])\n    }\n    for i := range interval2\
    \ {\n        interval2[i] = int(interval2[i])\n    }\n    \n    result := make([]int,\
    \ len(interval1))\n    \n    for i := range interval1 {\n        for j := range\
    \ interval2 {\n            if interval1[i] <= interval2[j] {\n               \
    \ result[i] = interval1[i]\n                break\n            }\n        }\n\
    \    }\n    \n    if len(result) == 0 {\n        return \"NO\"\n    }\n    \n\
    \    result := make([]int, len(result))\n    \n    for i := range result {\n \
    \       if result[i] == 0 {\n            return \"NO\"\n        }\n    }\n   \
    \ \n    if isPrime(result[0]) {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n\n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\n   \
    \ if interval1End < interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start\n    interval2Length := interval2End - interval2Start\n\
    \    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-1 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-2 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-3 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-4 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-5 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-6 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-7 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-8 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-9 {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length-10 {\n        if\
    \ interval1Start <= interval2Start {\n            return \"", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if isPrime(interval1[0].(float64) + interval1[1].(float64)) {\n\
    \        result = \"YES\"\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            intersectionStart = interval1Start\n         \
    \   intersectionEnd = interval1End\n            continue\n        }\n        \n\
    \        if interval2Start > interval2End {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n            continue\n        }\n\
    \        \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End\n            continue\n        }\n       \
    \ \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n    interval2\
    \ := make([]int, len(interval2))\n    \n    for i, v := range interval1 {\n  \
    \      interval1[i] = v.(int)\n    }\n    for i, v := range interval2 {\n    \
    \    interval2[i] = v.(int)\n    }\n    \n    result := make([]int, len(interval1))\n\
    \    \n    for i, v := range interval1 {\n        for _, v2 := range interval2\
    \ {\n            if v >= v2 {\n                result[i] = v\n               \
    \ break\n            }\n        }\n    }\n    \n    if len(result) == 0 {\n  \
    \      return \"NO\"\n    }\n    \n    result := make([]int, len(result))\n  \
    \  \n    for i, v := range result {\n        if v%2 == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n \
    \   interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval2Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \     intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n        \n        if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n            intersectionEnd = interval1End\n        }\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd {\n        length :=\
    \ float64(intersectionEnd - intersectionStart)\n        if length == 2 {\n   \
    \         return \"YES\"\n        }\n        if length == 3 {\n            return\
    \ \"YES\"\n        }\n        if length == 4 {\n            return \"YES\"\n \
    \       }\n        if length == 5 {\n            return \"YES\"\n        }\n \
    \       if length == 6 {\n            return \"YES\"\n        }\n        if length\
    \ == 7 {\n            return \"YES\"\n        }\n        if length == 8 {\n  \
    \          return \"YES\"\n        }\n        if length == 9 {\n            return\
    \ \"YES\"\n        }\n        if length == 10 {\n            return \"YES\"\n\
    \        }\n        if length == 11 {\n            return \"YES\"\n        }\n\
    \        if length == 12 {\n            return \"YES\"\n        }\n        if\
    \ length == 13 {\n            return \"YES\"\n        }\n        if length ==\
    \ 14 {\n            return \"YES\"\n        }\n        if length == 15 {\n   \
    \         return \"YES\"\n        }\n        if length == 16 {\n            return\
    \ \"YES\"\n        }\n        if length == 17 {\n            return \"YES\"\n\
    \        }\n        if length == 18 {\n            return \"YES\"\n        }\n\
    \        if length == 19 {\n            return \"YES\"\n        }\n        if\
    \ length == 20 {\n            return \"YES\"\n        }\n        if length ==\
    \ 21 {\n            return \"YES\"\n        }\n        if length == 22 {\n   \
    \         return \"YES\"\n        }\n        if length == 100 {\n            return\
    \ \"YES\"\n        }\n        if length == 200 {\n            return \"YES\"\n\
    \        }\n        if length == 300 {\n            return \"YES", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1End - interval1Start\n    \n    if intersectionLength == 0 {\n \
    \       return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval1End - interval2Start - interval2End\n    if intersection\
    \ <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection) {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart <= interval1Start && intersectionEnd >= interval1End {\n\
    \            intersectionEnd = interval1End\n        } else {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \  }\n    \n    if intersectionEnd < interval2End {\n        return \"NO\"\n \
    \   }\n    \n    if intersectionStart <= interval2Start && intersectionEnd >=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1End {\n            return \"NO\"\n        }\n\
    \        if intersectionEnd < interval1Start {\n            return \"NO\"\n  \
    \      }\n        \n        intersectionStart = interval1Start\n        intersectionEnd\
    \ = interval1End\n    }\n    \n    if intersectionStart > intersectionEnd {\n\
    \        return \"NO\"\n    }\n    if intersectionEnd < intersectionStart {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionStart < intersectionEnd\
    \ {\n        intersectionStart += interval1Start\n        intersectionEnd += interval1End\n\
    \    }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\
    \n    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n  \
    \  }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart > interval2End {\n        return \"NO\"\n\
    \    }\n    if intersectionEnd < interval2Start {\n        return \"NO\"", " \
    \   \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionEnd = interval1End\n        }\n        if interval1Start\
    \ <= intersectionStart && interval1End >= intersectionEnd {\n            intersectionStart\
    \ = interval1Start\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start <= interval2Start && interval2Start <=\
    \ interval1End\n    intersectionEnd := interval1Start <= interval2End && interval2End\
    \ <= interval1End\n    \n    if intersectionStart && intersectionEnd {\n     \
    \   intersectionLength := interval1End - interval1Start\n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ <= interval1End && interval2Start <= interval2End {\n            intersectionStart\
    \ = min(intersectionStart, interval1Start)\n            intersectionEnd = max(intersectionEnd,\
    \ interval1End)\n        }\n    }\n    \n    for i := 1; i < len(interval2); i++\
    \ {\n        interval2Start := interval2[i].(float64)\n        interval2End :=\
    \ interval2[i+1].(float64)\n        \n        if interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n            intersectionStart = min(intersectionStart,\
    \ interval2Start)\n            intersectionEnd = max(intersectionEnd, interval2End)\n\
    \        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n     \
    \   if intersectionEnd - intersectionStart > 1 {\n            isPrime := true\n\
    \            for i := 2; i <= (intersectionEnd - intersectionStart)/2; i++ {\n\
    \                if i*i == (intersectionEnd - intersectionStart) {\n         \
    \           isPrime = false\n                    break\n                }\n  \
    \          }\n            if isPrime {\n                return \"YES\"\n     \
    \       }\n        }\n    }\n    return \"NO\"\n}\n", "    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start :=\
    \ interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval1End {\n        return \"NO\"\n    }\n    if interval2Start\
    \ > interval2End {\n        return \"NO\"\n    }\n    \n    intersection := interval1Start\
    \ <= interval2Start && interval1End >= interval2End\n    if intersection {\n \
    \       intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \        if intersection {\n            intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n            if intersection {\n           \
    \     intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \                if intersection {\n                    intersection := interval1Start\
    \ <= interval2End && interval1End >= interval2Start\n                    if intersection\
    \ {\n                        intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                        if intersection {\n\
    \                            intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                            if intersection\
    \ {\n                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                if intersection\
    \ {\n                                    intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                    if intersection\
    \ {\n                                        intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \             if intersection {\n                                            intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                      if intersection {\n                   \
    \                             intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                                           \
    \     if intersection {\n                                                    intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                              if intersection {\n           \
    \                                             intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \                             if intersection {\n                            \
    \                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                        \
    \                    if intersection {\n                                     \
    \                           intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                                           \
    \                     if intersection {\n                                    \
    \                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                        \
    \                            if intersection {\n                             \
    \   ", "    interval1Start, interval1End := interval1[0], interval1[1]\n    interval2Start,\
    \ interval2End := interval2[0], interval2[1]\n    if interval1Start > interval2End\
    \ {\n        interval1Start, interval1End = interval2End, interval1Start\n   \
    \ }\n    if interval2Start > interval1End {\n        interval2Start, interval2End\
    \ = interval1End, interval2Start\n    }\n    if interval1Start >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start >= interval1End {\n \
    \       return \"NO\"\n    }\n    if interval1Start <= interval2Start {\n    \
    \    return \"NO\"\n    }\n    if interval2Start <= interval1Start {\n       \
    \ return \"NO\"\n    }\n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    if interval2Start <= interval1Start\
    \ && interval2End >= interval1End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval2Start <= interval1Start && interval2End >= interval1End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval2Start\
    \ <= interval1Start && interval2End <= interval1End {\n        return \"YES\"\n\
    \    }\n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval2Start <= interval1Start &&\
    \ interval2End <= interval1End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval2Start <= interval1Start && interval2End <= interval1End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval2Start\
    \ <= interval1Start && interval2End <= interval1End {\n        return \"YES\"\n\
    \    }\n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval2Start <= interval1Start &&\
    \ interval2End <= interval1End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval2Start ", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i, val := range interval1\
    \ {\n        interval1[i] = val.(int)\n    }\n    for i, val := range interval2\
    \ {\n        interval2[i] = val.(int)\n    }\n    \n    result := make([]int,\
    \ len(interval1))\n    \n    for i, val := range interval1 {\n        for j, val2\
    \ := range interval2 {\n            if val >= val2 {\n                result[i]\
    \ = val\n                break\n            }\n        }\n    }\n    \n    if\
    \ len(result) == 0 {\n        return \"NO\"\n    }\n    \n    length := len(result)\n\
    \    \n    if length == 1 {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 2 && result[0] > result[1] {\n        return \"YES\"\n    }\n    \n    if\
    \ length == 2 && result[0] == result[1] {\n        return \"YES\"\n    }\n   \
    \ \n    if length == 3 && result[0] > result[1] && result[1] > result[2] {\n \
    \       return \"YES\"\n    }\n    \n    if length == 3 && result[0] == result[1]\
    \ && result[1] == result[2] {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 4 && result[0] > result[1] && result[1] > result[2] && result[2] > result[3]\
    \ {\n        return \"YES\"\n    }\n    \n    if length == 4 && result[0] == result[1]\
    \ && result[1] == result[2] && result[2] == result[3] {\n        return \"YES\"\
    \n    }\n    \n    if length == 5 && result[0] > result[1] && result[1] > result[2]\
    \ && result[2] > result[3] && result[3] > result[4] {\n        return \"YES\"\n\
    \    }\n    \n    if length == 5 && result[0] == result[1] && result[1] == result[2]\
    \ && result[2] == result[3] && result[3] == result[4] {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1End <= interval2End\
    \ {\n        if interval1End < intersectionEnd {\n            intersectionEnd\
    \ = interval1End\n        }\n    }\n    \n    for interval2Start <= interval1Start\
    \ {\n        if interval2Start < intersectionStart {\n            intersectionStart\
    \ = interval2Start\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionEnd % 2 == 0 {\n            return \"YES\"\n     \
    \   } else {\n            return \"NO\"\n        }\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionLength := interval1End\
    \ - interval1Start\n    \n    if interval2Start <= interval2End {\n        if\
    \ interval1Start <= interval2Start {\n            if interval1End <= interval2End\
    \ {\n                return \"YES\"\n            }\n            if interval1End\
    \ > interval2End {\n                return \"NO\"\n            }\n        }\n\
    \        if interval1Start > interval2Start {\n            if interval1End <=\
    \ interval2End {\n                return \"NO\"\n            }\n            if\
    \ interval1End > interval2End {\n                return \"YES\"\n            }\n\
    \        }\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionLength := interval1End - interval1Start\n\
    \    \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n\
    \    if interval2Start > interval1End {\n        return \"NO\"\n    }\n    if\
    \ interval2End < interval1Start {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"YES\"\n \
    \   }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1End < interval2Start {\n        interval1End += 1\n  \
    \  }\n    for interval2End < interval1Start {\n        interval2End += 1\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        intersectionStart = interval1Start\n        intersectionEnd = interval1End\n\
    \    }\n    if interval2Start <= interval1Start && interval2End >= interval1End\
    \ {\n        intersectionStart = interval2Start\n        intersectionEnd = interval2End\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd {\n        intersectionStart\
    \ += 1\n        intersectionEnd += 1\n    }\n    \n    if intersectionStart <=\
    \ interval1Start && intersectionEnd >= interval1End {\n        return \"YES\"\n\
    \    }\n    if intersectionStart <= interval2Start && intersectionEnd >= interval2End\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n   \
    \ }\n    \n    if interval1Start < interval2Start {\n        return \"NO\"\n \
    \   }\n    \n    if interval1End < interval2End {\n        return \"NO\"\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   if interval1Start >= interval2Start && interval1End <= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        } else {\n            return \"NO\"\n        }\n    }\n\
    \    \n    if intersectionEnd <= interval2Start {\n        return \"NO\"\n   \
    \ }\n    if intersectionStart >= interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if intersectionStart <= intersectionEnd {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    \n    // Your code here\n    \n    \n   \
    \ return \"\"\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    \n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    if interval1Start >=\
    \ interval2Start && interval1Start <= interval2End {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    \n    if interval1Start >= interval2End && interval1End <=\
    \ interval2Start {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    \n    // Your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    var intersectionLength int\n    var isPrime bool\n\n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n\n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n    }\n\n    for i := 0; i < len(interval2); i++ {\n \
    \       interval2Start = interval2[i].(int)\n        interval2End = interval2Start\
    \ + interval2[i].(int)\n    }\n\n    intersectionLength = interval1End - interval2Start\n\
    \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n\n    isPrime\
    \ = true\n\n    for i := 0; i < intersectionLength; i++ {\n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            isPrime = false\n\
    \            break\n        }\n    }\n\n    if isPrime {\n        return \"YES\"\
    \n    }\n\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval1End {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval2End\
    \ - interval1End - interval2Start\n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    var interval1Start, interval1End int\n\
    \    var interval2Start, interval2End int\n\n    for _, val := range interval1\
    \ {\n        interval1Start = val.(int)\n    }\n\n    for _, val := range interval2\
    \ {\n        interval2Start = val.(int)\n    }\n\n    if interval1Start <= interval2Start\
    \ {\n        interval1End = interval1Start + interval1End - interval2Start\n \
    \   } else {\n        interval1End = interval1Start + interval2End - interval2Start\n\
    \    }\n\n    if interval1End <= interval2End {\n        return \"NO\"\n    }\n\
    \n    if interval1Start <= interval2End {\n        return \"YES\"\n    }\n\n \
    \   return \"NO\"\n}\n", "    \n    interval1_start := interval1[0].(int)\n  \
    \  interval1_end := interval1[1].(int)\n    interval2_start := interval2[0].(int)\n\
    \    interval2_end := interval2[1].(int)\n    \n    if interval1_start > interval1_end\
    \ {\n        fmt.Println(\"interval1 start is greater than interval1 end\")\n\
    \        return \"NO\"\n    }\n    if interval2_start > interval2_end {\n    \
    \    fmt.Println(\"interval2 start is greater than interval2 end\")\n        return\
    \ \"NO\"\n    }\n    \n    if interval1_start < interval2_start {\n        fmt.Println(\"\
    interval1 start is less than interval2 start\")\n        return \"NO\"\n    }\n\
    \    if interval1_end > interval2_end {\n        fmt.Println(\"interval1 end is\
    \ greater than interval2 end\")\n        return \"NO\"\n    }\n    \n    if interval1_start\
    \ == interval1_end {\n        fmt.Println(\"interval1 start is equal to interval1\
    \ end\")\n        return \"NO\"\n    }\n    \n    if interval2_start == interval2_end\
    \ {\n        fmt.Println(\"interval2 start is equal to interval2 end\")\n    \
    \    return \"NO\"\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval1End {\n      \
    \  return \"NO\"\n    }\n    if interval2Start > interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start +\
    \ 1\n    interval2Length := interval2End - interval2Start + 1\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1Length * interval2Length\n    \n    if intersectionLength == 1 {\n\
    \        return \"YES\"\n    }\n    \n    if intersectionLength == 2 && interval1Length\
    \ == interval2Length {\n        return \"YES\"\n    }\n    \n    if intersectionLength\
    \ == 2 && interval1Length != interval2Length {\n        return \"NO\"\n    }\n\
    \    \n    if intersectionLength == 3 && interval1Length == interval2Length {\n\
    \        return \"YES\"\n    }\n    \n    if intersectionLength == 3 && interval1Length\
    \ != interval2Length {\n        return \"NO\"\n    }\n    \n    if intersectionLength\
    \ == 4 && interval1Length == interval2Length {\n        return \"YES\"\n    }\n\
    \    \n    if intersectionLength == 4 && interval1Length != interval2Length {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionLength == 5 && interval1Length\
    \ == interval2Length {\n        return \"YES\"\n    }\n    \n    if intersectionLength\
    \ == 5 && interval1Length != interval2Length {\n        return \"NO\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    \n    interval1_start := interval1[0].(float64)\n\
    \    interval1_end := interval1[1].(float64)\n    interval2_start := interval2[0].(float64)\n\
    \    interval2_end := interval2[1].(float64)\n    \n    \n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start\n    }\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n\n    if interval1Start < interval2Start {\n        fmt.Println(\"\
    interval1Start < interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ > interval2End {\n        fmt.Println(\"interval1End > interval2End\")\n   \
    \     return \"NO\"\n    }\n\n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        fmt.Println(\"interval1Start <= interval2Start &&\
    \ interval1End >= interval2End\")\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        fmt.Println(\"\
    interval1Start <= interval2End && interval1End >= interval2Start\")\n        return\
    \ \"YES\"\n    }\n\n    if interval1Start <= interval2Start && interval1End <=\
    \ interval2End {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End\
    \ <= interval2End\")\n        return \"YES\"\n    }\n\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        fmt.Println(\"interval1Start\
    \ >= interval2Start && interval1End <= interval2End\")\n        return \"YES\"\
    \n    }\n\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start >= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End || interval2Start > interval2End {\n\
    \        return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval2Start - interval1Length * interval2Length\n   \
    \ \n    if intersection <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    if interval2Start < interval2End {\n        intersectionStart\
    \ = interval2Start\n        intersectionEnd = interval2End\n    }\n    \n    if\
    \ intersectionStart > intersectionEnd {\n        fmt.Println(\"intersectionStart\
    \ > intersectionEnd\")\n        return \"NO\"\n    }\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        if interval1[i] > interval1End {\n            interval1End =\
    \ interval1[i]\n        }\n        if interval2[i] > interval2End {\n        \
    \    interval2End = interval2[i]\n        }\n    }\n    \n    for i := 1; i <\
    \ len(interval1); i++ {\n        if interval1[i] < interval1Start {\n        \
    \    interval1Start = interval1[i]\n        }\n        if interval2[i] < interval2Start\
    \ {\n            interval2Start = interval2[i]\n        }\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        intersectionStart = interval1Start\n\
    \        intersectionEnd = interval1End\n    } else {\n        intersectionStart\
    \ = interval2Start\n        intersectionEnd = interval2End\n    }\n    \n    if\
    \ intersectionStart > intersectionEnd {\n        return \"NO\"\n    }\n    \n\
    \    intersectionLength := intersectionEnd - intersectionStart\n    \n    if intersectionLength\
    \ == 2 {\n        return \"YES\"\n    }\n    \n    if intersectionLength % 2 ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    if intersectionLength == 1 {\n\
    \        return \"YES\"\n    }\n    \n    if intersectionLength == 3 {\n     \
    \   return \"YES\"\n    }\n    \n    if intersectionLength == 5 {\n        return\
    \ \"YES\"\n    }\n    \n    if intersectionLength == 7 {\n        return \"YES\"\
    \n    }\n    \n    if intersectionLength == 9 {\n        return \"YES\"\n    }\n\
    \    \n    if intersectionLength == 11 {\n        return \"YES\"\n    }\n    \n\
    \    if intersectionLength == 13 {\n        return \"YES\"\n    }\n    \n    if\
    \ intersectionLength == 17 {\n        return \"YES\"\n    }\n    \n    if intersectionLength\
    \ == 19 {\n        return \"YES\"\n    }\n    \n    if intersectionLength == 31\
    \ {\n        return \"YES\"\n    }\n    \n    if intersectionLength == 37 {\n\
    \        return \"YES\"\n    }\n    \n    if intersectionLength == ", "    if\
    \ len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    interval1Length := interval1End - interval1Start\n    interval2Length :=\
    \ interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"YES\"\
    \n        }\n        if interval1End >= interval2End {\n            return \"\
    YES\"\n        }\n    }\n    \n    if interval1Length > interval2Length {\n  \
    \      interval1Length -= interval2Length\n    }\n    if interval1Length < interval2Length\
    \ {\n        interval2Length -= interval1Length\n    }\n    \n    if interval1Length\
    \ == 0 {\n        return \"NO\"\n    }\n    if interval2Length == 0 {\n      \
    \  return \"NO\"\n    }\n    \n    if interval1Length == interval2Length {\n \
    \       if interval1Start <= interval2Start {\n            return \"YES\"\n  \
    \      }\n        if interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n    }\n    \n    if interval1Length > interval2Length {\n       \
    \ interval1Length -= interval2Length\n    }\n    if interval1Length < interval2Length\
    \ {\n        interval2Length -= interval1Length\n    }\n    \n    if interval1Length\
    \ == 0 {\n        return \"NO\"\n    }\n    if interval2Length == 0 {\n      \
    \  return \"NO\"\n    }\n    \n    if interval1Length == interval2Length {\n \
    \       if interval1Start <= interval2Start {\n            return \"YES\"\n  \
    \      }\n        if interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n    }\n    \n    if interval1Length > interval2Length {\n       \
    \ interval1Length -= interval2Length\n    }\n    if interval1Length < interval2Length\
    \ {\n        interval2Length -= interval1Length\n    }\n    \n    if interval1Length\
    \ == 0 {\n        return \"NO\"\n    }\n    if interval2Length == 0 {\n      \
    \  return \"NO\"\n    }\n    \n    if interval1Length == interval2Length {\n \
    \       if interval", "    if len(interval1) == 0 || len(interval2) == 0 {\n \
    \       return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2End && interval1End <= interval2Start {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start ",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval1End {\n  \
    \      interval1Start, interval1End = interval1End, interval1Start\n    }\n  \
    \  if interval2Start > interval2End {\n        interval2Start, interval2End =\
    \ interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            interval1Start++\n        } else {\n           \
    \ intersectionStart = interval2Start\n            intersectionEnd = interval2End\n\
    \            interval2Start++\n        }\n    }\n    \n    if interval1Start <=\
    \ interval1End {\n        intersectionStart = interval1Start\n        intersectionEnd\
    \ = interval1End\n    }\n    if interval2Start <= interval2End {\n        intersectionStart\
    \ = interval2Start\n        intersectionEnd = interval2End\n    }\n    \n    if\
    \ intersectionStart > intersectionEnd {\n        return \"NO\"\n    }\n    \n\
    \    if intersectionStart < interval1Start || intersectionEnd > interval1End {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionStart < interval2Start\
    \ || intersectionEnd > interval2End {\n        return \"NO\"\n    }\n    \n  \
    \  if intersectionStart <= interval1Start && intersectionEnd >= interval1End {\n\
    \        return \"YES\"\n    }\n    \n    if intersectionStart <= interval2Start\
    \ && intersectionEnd >= interval2End {\n        return \"YES\"\n    }\n    \n\
    \    if intersectionStart >= interval1Start && intersectionEnd <= interval1End\
    \ {\n        return \"YES\"\n    }\n    \n    if intersectionStart >= interval2Start\
    \ && intersectionEnd <= interval2End {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ == interval2Length {\n        if interval1Start <= interval2Start {\n      \
    \      return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ > interval2Length {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start {\n        if interval1Length == 2 {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Start <=\
    \ interval2End {\n        if interval1Length == 2 {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        if interval1Length == 2 {\n     \
    \       return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start >= interval2Start && interval1End <= interval2End {\n       \
    \ if interval1Length == 2 {\n            return \"YES\"\n        }\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start >= interval2Start && interval1End\
    \ >= interval2End {\n        if interval1Length == 2 {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        if interval1Length\
    \ == 2 {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        if interval1Length == 2 {\n            return \"YES\"\n        }\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        if interval1Length == 2 {\n        \
    \    return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        if interval1Length",
  "    if len(interval1) < len(interval2) {\n        interval1, interval2 = interval2,\
    \ interval1\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    for interval1Start <= interval1End && interval2Start\
    \ <= interval2End {\n        if interval1Start <= interval2Start {\n         \
    \   intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n        \n        if interval1End <= interval2End {\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if intersectionStart <= intersectionEnd\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionStart <= interval1Start {\n            return \"NO\"\
    \n        }\n        \n        if intersectionEnd <= interval1End {\n        \
    \    return \"NO\"\n        }\n        \n        if intersectionStart <= interval2Start\
    \ {\n            return \"NO\"\n        }\n        \n        if intersectionEnd\
    \ <= interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start {\n            return \"NO\"\n        }\n \
    \       \n        if interval1End <= interval2End {\n            return \"NO\"\
    \n        }\n        \n        if interval1Start <= intersectionEnd {\n      \
    \      return \"NO\"\n        }\n        \n        if interval1End <= intersectionEnd\
    \ {\n            return \"NO\"\n        }\n        \n        if interval2Start\
    \ <= intersectionEnd {\n            return \"NO\"\n        }\n        \n     \
    \   if interval2End <= intersectionEnd {\n            return \"NO\"\n        }\n\
    \        \n        if interval1Start <= interval2Start {\n            return \"\
    NO\"\n        }\n        \n        if interval1End <= interval2End {\n       \
    \     return \"NO\"\n        }\n        \n        if interval2Start <= interval1Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval2End <=\
    \ interval1End {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd {\n            return \"NO\"\n        }\n        \n     \
    \   if interval1End <= intersectionEnd {\n            return \"NO\"\n        }\n\
    \        \n        if interval2Start <= intersectionEnd {\n            return\
    \ \"NO\"\n        }\n        \n        if interval2End <= intersectionEnd {\n\
    \            return \"NO\"\n        }\n        \n        if interval1Start <=\
    \ interval2Start {\n            return \"NO\"\n        }", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n\n    interval1Start,\
    \ interval1End := interval1[0], interval1[1]\n    interval2Start, interval2End\
    \ := interval2[0], interval2[1]\n\n    if interval1Start > interval2End {\n  \
    \      interval1Start, interval1End = interval2End, interval1Start\n    }\n  \
    \  if interval2Start > interval1End {\n        interval2Start, interval2End =\
    \ interval1End, interval2Start\n    }\n\n    interval1Start += 1\n    interval1End\
    \ -= 1\n    interval2Start += 1\n    interval2End -= 1\n\n    result := 0\n  \
    \  for i := interval1Start; i <= interval1End; i++ {\n        for j := interval2Start;\
    \ j <= interval2End; j++ {\n            result ^= i&j\n        }\n    }\n\n  \
    \  if result != 0 {\n        return \"NO\"\n    }\n\n    return \"YES\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval1Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End >= intersectionStart {\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1Start <= intersectionStart &&\
    \ interval1End >= intersectionEnd {\n            intersectionStart = interval1Start\n\
    \        }\n    }\n    \n    if intersectionEnd <= intersectionStart {\n     \
    \   return \"NO\"\n    }\n    \n    if isPrime(intersectionEnd - intersectionStart)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start :=\
    \ interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for intersectionStart\
    \ <= interval2End {\n        if interval1Start <= intersectionEnd && intersectionEnd\
    \ <= interval2End {\n            if interval1Start <= intersectionStart && intersectionStart\
    \ <= interval2Start {\n                intersectionEnd = intersectionEnd + 1\n\
    \            } else {\n                intersectionStart = intersectionStart +\
    \ 1\n            }\n        } else {\n            break\n        }\n    }\n  \
    \  \n    if intersectionStart <= interval2End {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i, v := range interval1\
    \ {\n        interval1[i] = v.(int)\n    }\n    for i, v := range interval2 {\n\
    \        interval2[i] = v.(int)\n    }\n    \n    result := make([]int, len(interval1))\n\
    \    \n    for i, v := range interval1 {\n        for j, v2 := range interval2\
    \ {\n            if v == v2 {\n                result[i] = result[i] + 1\n   \
    \         }\n        }\n    }\n    \n    if result[len(result)-1] == len(interval1)\
    \ {\n        return \"NO\"\n    }\n    \n    if result[len(result)-1] == len(interval2)\
    \ {\n        return \"YES\"\n    }\n    \n    for i, v := range result {\n   \
    \     if v == 2 {\n            return \"YES\"\n        }\n    }\n    return \"\
    NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart <= interval2End {\n        if interval1Start\
    \ <= intersectionStart && intersectionStart <= interval2End {\n            if\
    \ interval1End <= intersectionEnd && intersectionEnd <= interval2End {\n     \
    \           intersectionEnd = intersectionEnd + 1\n            } else {\n    \
    \            return \"NO\"\n            }\n        } else {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n", "    \n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    var interval1_start, interval1_end\
    \ int\n    var interval2_start, interval2_end int\n    var interval1_length int\n\
    \    var interval2_length int\n    var interval1_prime bool\n    var interval2_prime\
    \ bool\n\n    if len(interval1) != len(interval2) {\n        return \"NO\"\n \
    \   }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1_start =\
    \ interval1[i].(int)\n        interval1_end = interval1[i].(int)\n        interval1_length\
    \ = interval1_end - interval1_start\n\n        for j := 0; j < len(interval2);\
    \ j++ {\n            interval2_start = interval2[j].(int)\n            interval2_end\
    \ = interval2[j].(int)\n            interval2_length = interval2_end - interval2_start\n\
    \n            if interval1_length == interval2_length {\n                if interval1_start\
    \ <= interval2_start {\n                    interval1_prime = true\n         \
    \       } else {\n                    interval1_prime = false\n              \
    \  }\n            } else {\n                if interval1_length < interval2_length\
    \ {\n                    interval1_prime = true\n                } else {\n  \
    \                  interval1_prime = false\n                }\n            }\n\
    \        }\n    }\n\n    if interval1_prime == true {\n        return \"YES\"\n\
    \    } else {\n        return \"NO\"\n    }\n}\n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    var interval1Length int\n\
    \    var interval2Length int\n    var primeLength int\n    var primeLength2 int\n\
    \    var primeLength3 int\n    var primeLength4 int\n    var primeLength5 int\n\
    \    var primeLength6 int\n    var primeLength7 int\n    var primeLength8 int\n\
    \    var primeLength9 int\n    var primeLength10 int\n    var primeLength11 int\n\
    \    var primeLength12 int\n    var primeLength13 int\n    var primeLength14 int\n\
    \    var primeLength15 int\n    var primeLength16 int\n    var primeLength17 int\n\
    \    var primeLength18 int\n    var primeLength19 int\n    var primeLength20 int\n\
    \    var primeLength21 int\n    var primeLength22 int\n    var primeLength23 int\n\
    \    var primeLength24 int\n    var primeLength25 int\n    var primeLength26 int\n\
    \    var primeLength27 int\n    var primeLength28 int\n    var primeLength29 int\n\
    \    var primeLength30 int\n    var primeLength31 int\n    var primeLength32 int\n\
    \    var primeLength33 int\n    var primeLength34 int\n    var primeLength35 int\n\
    \    var primeLength36 int\n    var primeLength37 int\n    var primeLength38 int\n\
    \    var primeLength39 int\n    var primeLength40 int\n    var primeLength41 int\n\
    \    var primeLength42 int\n    var primeLength43 int\n    var primeLength44 int\n\
    \    var primeLength45 int\n    var primeLength46 int\n    var primeLength47 int\n\
    \    var primeLength48 int\n    var primeLength49 int\n    var primeLength50 int\n\
    \    var primeLength51 int\n    var primeLength52 int\n    var primeLength53 int\n\
    \    var primeLength54 int\n    var primeLength55 int\n    var primeLength56 int\n\
    \    var primeLength57 int\n    var primeLength58 int\n    var primeLength59 int\n\
    \    var primeLength60 int\n    var primeLength61 int\n    var primeLength62 int\n\
    \    var primeLength63 int\n    var primeLength64 int\n    var primeLength65 int\n\
    \    var primeLength66 int\n    var primeLength67 int\n    var primeLength68 int\n\
    \    var primeLength69 int\n    var primeLength70 int\n    var primeLength71 int\n\
    \    var primeLength72 int\n    var primeLength73 int\n    var primeLength74 int\n\
    \    var primeLength75 ", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n\n    if interval1Start > interval2End {\n        return\
    \ \"NO\"\n    }\n    if interval1End < interval2Start {\n        return \"NO\"\
    \n    }\n\n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart < interval2End {\n        if interval1Start <=\
    \ intersectionEnd && intersectionEnd <= interval2Start {\n            intersectionEnd\
    \ = intersectionEnd + 1\n        } else {\n            return \"NO\"\n       \
    \ }\n    }\n    \n    if intersectionEnd > interval2End {\n        return \"NO\"\
    \n    }\n    \n    if intersectionStart <= interval2Start {\n        return \"\
    NO\"\n    }\n    \n    if intersectionStart <= interval2End {\n        return\
    \ \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    interval1Length := interval1End\
    \ - interval1Start\n    interval2Length := interval2End - interval2Start\n   \
    \ \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n    \n    if interval1Length == interval2Length {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        } else {\n        \
    \    return \"NO\"\n        }\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        interval1Start += interval1Length\n        interval1End -= interval1Length\n\
    \    } else {\n        interval2Start += interval2Length\n        interval2End\
    \ -= interval2Length\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End || interval2Start > interval2End {\n\
    \        return \"NO\"\n    }\n    \n    intersection := interval1Start + interval2Start\n\
    \    \n    if intersection <= interval1End && intersection <= interval2End {\n\
    \        if isPrime(intersection) {\n            return \"YES\"\n        }\n \
    \   }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for intersectionEnd <= interval2End\
    \ {\n        if interval1[intersectionStart].(int) == interval2[intersectionEnd].(int)\
    \ {\n            intersectionStart += 1\n            intersectionEnd += 1\n  \
    \      } else {\n            break\n        }\n    }\n    \n    if intersectionEnd\
    \ > interval2End {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ < interval1Start {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ > interval1End {\n        return \"NO\"\n    }\n    \n    if intersectionEnd\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    if intersectionEnd\
    \ > interval2End {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        return \"YES\"\n    }\n    \n    return \"NO\"\
    \n}\n", "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n\n    if len(interval1) != len(interval2) {\n        return \"NO\"\n  \
    \  }\n\n    for _, interval := range interval1 {\n        interval1Start, interval1End\
    \ = interval.(int64)\n    }\n\n    for _, interval := range interval2 {\n    \
    \    interval2Start, interval2End = interval.(int64)\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        if interval1Start\
    \ <= interval2End {\n            return fmt.Sprintf(\"YES\")\n        }\n    \
    \    if interval1End >= interval2Start {\n            return fmt.Sprintf(\"NO\"\
    )\n        }\n    }\n\n    return \"NO\"\n}\n", "    var result string\n    \n\
    \    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n   \
    \ \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) > interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"NO\"\n                break\n            }\n      \
    \  }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) > interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) < interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"NO\"\n                break\n            }\n      \
    \  }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) > interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) < interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"NO\"\n                break\n            }\n      \
    \  }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) > interval2[i].(float64) {\n  \
    \              result = \"NO\"\n                break\n            }\n       \
    \ }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start\
    \ := interval1[i].(float64)\n        interval1End := interval1[i+1].(float64)\n\
    \        \n        if interval1Start > interval2End {\n            return \"NO\"\
    \n        }\n        if interval1End < interval2Start {\n            return \"\
    NO\"\n        }\n        \n        if interval1Start <= intersectionEnd && interval1End\
    \ >= intersectionStart {\n            intersectionStart = interval1Start\n   \
    \         intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) == 0 || len(interval2)\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start > interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start < interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if interval1Start <= interval2End && interval1End >= interval2Start {\n    \
    \    return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2End && interval1End <= interval2Start {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if interval1Start <= interval2Start && interval1End >= interval2End {\n    \
    \    return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if interval1Start >= interval2Start && interval1End <= interval2End {\n    \
    \    return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End ", "   \
    \ if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart <= interval2End {\n        if interval2Start\
    \ < intersectionEnd {\n            break\n        }\n        \n        if interval2Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End {\n            if interval1Start\
    \ <= intersectionStart && intersectionStart <= interval1End {\n              \
    \  intersectionEnd = intersectionStart + 1\n            } else {\n           \
    \     intersectionEnd = interval1End\n            }\n        } else {\n      \
    \      break\n        }\n    }\n    \n    if intersectionEnd > interval1End {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionEnd > interval2End {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionStart <= interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionStart <= interval1Start\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionStart <= interval1End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd <= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd <= interval1End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd <= interval1Start\
    \ {\n        return \"NO\"\n    }\n    \n    return \"YES\"\n}\n", "    var result\
    \ string\n    if len(interval1) != len(interval2) {\n        return \"NO\"\n \
    \   }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i]\
    \ < interval2[i] {\n            result += \"NO\"\n            break\n        }\n\
    \    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n\
    \    for i := 0; i < len(interval1); i++ {\n        if interval1[i] > interval2[i]\
    \ {\n            result += \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionEnd = interval1End\n        } else {\n            return\
    \ \"NO\"\n        }\n    }\n    \n    if intersectionEnd <= interval2Start {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionStart >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd <= intersectionStart\
    \ {\n        return \"NO\"\n    }\n    \n    if isPrime(intersectionEnd - intersectionStart)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   if interval1Start >= interval2Start && interval1End <= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    var result string\n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    for _, interval1 := range\
    \ interval1 {\n        for _, interval2 := range interval2 {\n            if interval1\
    \ == interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n            if interval1 > interval2 {\n                interval1,\
    \ interval2 = interval2, interval1\n            }\n            if interval1 ==\
    \ interval2 {\n                continue\n            }\n            if interval1\
    \ > interval2 {\n                interval1, interval2 = interval2, interval1\n\
    \            }\n            if interval1 == interval2 {\n                continue\n\
    \            }\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        } else {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart <= interval2End {\n        if interval1Start\
    \ <= intersectionStart && intersectionStart <= interval2End {\n            intersectionEnd\
    \ = intersectionEnd\n        } else if intersectionStart <= interval1End && intersectionStart\
    \ <= interval2End {\n            intersectionEnd = intersectionEnd\n        }\
    \ else {\n            return \"NO\"\n        }\n    }\n    \n    if intersectionStart\
    \ <= interval1End && intersectionStart <= interval2End {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n", "    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start, interval1End\
    \ := interval1[0], interval1[1]\n    interval2Start, interval2End := interval2[0],\
    \ interval2[1]\n    \n    if interval1Start > interval2End {\n        return \"\
    NO\"\n    }\n    \n    if interval1End < interval2Start {\n        return \"NO\"\
    \n    }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   if interval1Start >= interval2Start && interval1End <= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start\n    interval2Length := interval2End - interval2Start\n\
    \    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length {\n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    \n    if interval1Length < interval2Length {\n        interval1Start\
    \ += interval1Length / 2\n        interval1End -= interval1Length / 2\n    } else\
    \ {\n        interval2Start += interval2Length / 2\n        interval2End -= interval2Length\
    \ / 2\n    }\n    \n    if interval1Start <= interval2Start {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionLength := interval1End\
    \ - interval1Start\n    \n    if interval2Start > interval2End {\n        interval2Start\
    \ := interval2End + interval1Start\n    }\n    \n    if interval2Start > interval1End\
    \ {\n        interval2Start := interval1End + interval2Start\n    }\n    \n  \
    \  if interval1Start > interval2End {\n        interval1Start := interval2End\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval2Start\
    \ + interval1Start\n    }\n    \n    if interval1Start > interval2Start {\n  \
    \      interval1Start := interval2Start + interval1Start\n    }\n    \n    if\
    \ interval1", "    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersectionLength := interval1End\
    \ - interval1Start\n    \n    if interval2Start >= interval1End {\n        return\
    \ \"NO\"\n    }\n    if interval2End >= interval1End {\n        return \"NO\"\n\
    \    }\n    \n    if interval2Start <= interval1Start {\n        return \"NO\"\
    \n    }\n    if interval2End <= interval1Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n        \n        for j := 0; j < len(interval2); j++\
    \ {\n            interval2Start = interval2[j].(int)\n            interval2End\
    \ = interval2Start + interval2[j].(int)\n            \n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                result\
    \ += \"YES\"\n                break\n            }\n        }\n    }\n    \n \
    \   if result == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"\
    NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \    if intersection {\n        intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n        if intersection {\n            intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \      if intersection {\n                intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n                if intersection {\n       \
    \             intersection := interval1Start <= interval2End && interval1End >=\
    \ interval2Start\n                    if intersection {\n                    \
    \    intersection := interval1Start <= interval2Start && interval1End >= interval2End\n\
    \                        if intersection {\n                            intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                      if intersection {\n                                intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                          if intersection {\n                               \
    \     intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \                                    if intersection {\n                     \
    \                   intersection := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n                                        if intersection {\n\
    \                                            intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \                 if intersection {\n                                        \
    \        intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \                                                if intersection {\n         \
    \                                           intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \                         if intersection {\n                                \
    \                        intersection := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n                                                        if\
    \ intersection {\n                                                           \
    \ intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \                                                            if intersection {\n\
    \                                                                intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                                          if intersection {\n\
    \                                                                    intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                                              if intersection\
    \ {\n                                ", "    \n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    var lengthOfIntersection int\n\n    // Your code here\n    interval1Start,\
    \ interval1End = interval1[0].(int), interval1[1].(int)\n    interval2Start, interval2End\
    \ = interval2[0].(int), interval2[1].(int)\n    lengthOfIntersection = interval1End\
    \ - interval1Start + interval2End - interval2Start\n    if lengthOfIntersection\
    \ == 0 {\n        return \"NO\"\n    }\n    if lengthOfIntersection == 1 {\n \
    \       return \"YES\"\n    }\n    if lengthOfIntersection == 2 {\n        if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \     return \"YES\"\n        }\n        if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n            return \"YES\"\n        }\n  \
    \      if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2End\
    \ && interval1End <= interval2Start {\n            return \"YES\"\n        }\n\
    \    }\n    if lengthOfIntersection == 3 {\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start <= interval2End && interval1End >= interval2Start {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start >= interval2End && interval1End <= interval2Start {\n\
    \            return \"YES\"\n        }\n    }\n    if lengthOfIntersection ==\
    \ 4 {\n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n            return \"YES\"\n        }\n\
    \        if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2End\
    \ && interval1End <= interval2Start {\n            return \"YES\"\n        }\n\
    \    }\n    if lengthOfIntersection == 5 {\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return \"YES\"\n        }\n \
    \       if interval1Start <= interval2End && interval1End >= interval2Start {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1 := interval1[0].([]interface{})\n    interval2 := interval2[0].([]interface{})\n\
    \    \n    result := make([]interface{}, len(interval1))\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i] > interval2[i] {\n      \
    \      result[i] = interval1[i]\n        } else {\n            result[i] = interval2[i]\n\
    \        }\n    }\n    \n    result := result[:len(interval1)]\n    \n    result\
    \ := append(result, interval1[len(interval1):]...)\n    result := append(result,\
    \ interval2[len(interval2):]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]...)\n    result := append(result,\
    \ interval2[:len(interval2)]...)\n    \n    result := append(result, interval1[:len(interval1)]...)\n\
    \    result := append(result, interval2[:len(interval2)]...)\n    \n    result\
    \ := append(result, interval1[:len(interval1)]", "    \n    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersection := interval1Start\
    \ <= interval2End && interval2Start <= interval1End\n    \n    if intersection\
    \ {\n        if interval1Start <= interval2Start {\n            interval1Start,\
    \ interval2Start = interval2Start, interval1Start\n        }\n        if interval1End\
    \ >= interval2End {\n            interval1End, interval2End = interval2End, interval1End\n\
    \        }\n        \n        if interval1Start <= interval2Start {\n        \
    \    interval1Start, interval2Start = interval2Start, interval1Start\n       \
    \ }\n        if interval1End >= interval2End {\n            interval1End, interval2End\
    \ = interval2End, interval1End\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            interval1Start, interval2Start = interval2Start,\
    \ interval1Start\n        }\n        if interval1End >= interval2End {\n     \
    \       interval1End, interval2End = interval2End, interval1End\n        }\n \
    \       \n        if interval1Start <= interval2Start {\n            interval1Start,\
    \ interval2Start = interval2Start, interval1Start\n        }\n        if interval1End\
    \ >= interval2End {\n            interval1End, interval2End = interval2End, interval1End\n\
    \        }\n        \n        if interval1Start <= interval2Start {\n        \
    \    interval1Start, interval2Start = interval2Start, interval1Start\n       \
    \ }\n        if interval1End >= interval2End {\n            interval1End, interval2End\
    \ = interval2End, interval1End\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            interval1Start, interval2Start = interval2Start,\
    \ interval1Start\n        }\n        if interval1End >= interval2End {\n     \
    \       interval1End, interval2End = interval2End, interval1End\n        }\n \
    \       \n        if interval1Start <= interval2Start {\n            interval1Start,\
    \ interval2Start = interval2Start, interval1Start\n        }\n        if interval1End\
    \ >= interval", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    interval1PrimeLength\
    \ := interval1Length / 2\n    interval2PrimeLength := interval2Length / 2\n  \
    \  \n    if interval1PrimeLength == 0 || interval2PrimeLength == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        \n        if interval1Start <= interval2Start {\n            \n \
    \           if interval1Start < interval2End {\n                \n           \
    \     if interval1End <= interval2Start {\n                    \n            \
    \        if interval1Start <= interval2End {\n                        \n     \
    \                   if interval1Start <= interval2End {\n                    \
    \        \n                            if interval1Start <= interval2End {\n \
    \                               \n                                if interval1Start\
    \ <= interval2End {\n                                    \n                  \
    \                  if interval1Start <= interval2End {\n                     \
    \                   return \"YES\"\n                                    }\n  \
    \                              }\n                            }\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start < interval1End\
    \ {\n        interval1End += 1\n        for interval2Start < interval2End {\n\
    \            interval2End += 1\n            if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n            }\n        }\n  \
    \  }\n    \n    if intersectionStart <= intersectionEnd && intersectionStart <=\
    \ interval1End && intersectionEnd <= interval2End {\n        if isPrime(intersectionStart,\
    \ intersectionEnd, interval1Start, interval1End) && isPrime(intersectionStart,\
    \ intersectionEnd, interval2Start, interval2End) {\n            return \"YES\"\
    \n        }\n    }\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for intersectionEnd <= interval2End\
    \ {\n        if interval1Start <= intersectionEnd && intersectionEnd <= interval2End\
    \ {\n            intersectionEnd = intersectionEnd + 1\n        }\n    }\n   \
    \ \n    if intersectionEnd > interval2End {\n        return \"NO\"\n    }\n  \
    \  \n    if intersectionStart <= interval2Start {\n        return \"NO\"\n   \
    \ }\n    \n    if intersectionStart <= interval1Start {\n        return \"YES\"\
    \n    }\n    \n    if intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd <=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ <= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd <=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ <= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd <=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ <= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd <=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ <= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd <=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    // Your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n\n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\n   \
    \ if interval1End < interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    return\
    \ \"NO\"\n}\n", "    \n    // Your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval2Start < interval2End {\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            intersectionStart = interval1Start\n\
    \            intersectionEnd = interval1End\n            break\n        }\n  \
    \      \n        if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n            intersectionStart = interval1End\n            intersectionEnd\
    \ = interval1End\n            break\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            break\n\
    \        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1End\n          \
    \  intersectionEnd = interval1End\n            break\n        }\n        \n  \
    \      if interval1Start >= interval2Start && interval1End >= interval2End {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1Start\n            break\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1Start\n           \
    \ break\n        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1Start\n            break\n        }\n        \n\
    \        if interval1Start >= interval2Start && interval1End >= interval2End {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1Start\n            break\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1Start\n           \
    \ break\n        }\n        \n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1Start\n            break\n        }\n        \n\
    \        if interval1Start >= interval2Start ", "    var result string\n    \n\
    \    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n   \
    \ \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result += \"YES\"\n        } else {\n\
    \            result += \"NO\"\n        }\n    }\n    \n    return result\n}\n",
  "    var result string\n    \n    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n   \
    \     if interval1[i].(float64) <= interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n         \
    \   result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1End <= interval2End {\n        if interval1End < intersectionEnd\
    \ {\n            intersectionEnd = interval1End\n        }\n    }\n    \n    for\
    \ interval2Start <= interval1Start {\n        if interval2Start < intersectionStart\
    \ {\n            intersectionStart = interval2Start\n        }\n    }\n    \n\
    \    if intersectionStart <= intersectionEnd {\n        if intersectionEnd % 2\
    \ == 0 {\n            if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n                return \"YES\"\n            }\n            if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n                return\
    \ \"YES\"\n            }\n            if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n                return \"YES\"\n            }\n         \
    \   if interval1Start >= interval2End && interval1End <= interval2Start {\n  \
    \              return \"YES\"\n            }\n        }\n        if intersectionEnd\
    \ % 2 == 1 {\n            if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n                return \"YES\"\n            }\n         \
    \   if interval1Start <= interval2End && interval1End >= interval2Start {\n  \
    \              return \"YES\"\n            }\n            if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n                return \"\
    YES\"\n            }\n            if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n                return \"YES\"\n            }\n       \
    \ }\n    }\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if interval1Start <= interval2End && interval1End >= interval2Start {\n    \
    \    return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval2Start\
    \ > interval1End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ < interval2Start {\n        return \"NO\"\n    }\n    if interval2Start < interval1Start\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1End < interval2End {\n\
    \        return \"NO\"\n    }\n    if interval2End < interval1End {\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    if interval2Start <= interval1Start\
    \ && interval2End >= interval1End {\n        return \"YES\"\n    }\n    \n   \
    \ if interval1Start <= interval2Start && interval1End <= interval2End {\n    \
    \    return \"YES\"\n    }\n    if interval2Start <= interval1Start && interval2End\
    \ <= interval1End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval2Start <= interval1Start && interval2End >= interval1End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval2Start\
    \ <= interval1Start && interval2End <= interval1End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval2Start >= interval1Start &&\
    \ interval2End <= interval1End {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1Start >= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval2Start >= interval1Start && interval2End\
    \ >= interval1End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval2Start >= interval1Start && interval2End <= interval1End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ && interval1End ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval2Start < interval2End {\n        if interval2Start < interval2End\
    \ {\n            intersectionEnd = interval2Start\n        }\n        \n     \
    \   if interval2Start < interval2End && interval2Start <= intersectionEnd {\n\
    \            intersectionEnd = interval2Start\n        }\n        \n        if\
    \ interval2Start < interval2End && interval2Start > intersectionEnd {\n      \
    \      intersectionEnd = interval2Start\n        }\n        \n        if interval2Start\
    \ <= intersectionEnd && interval2End <= intersectionEnd {\n            intersectionEnd\
    \ = interval2End\n        }\n        \n        if interval2Start <= intersectionEnd\
    \ && interval2End > intersectionEnd {\n            intersectionEnd = interval2End\n\
    \        }\n        \n        if interval2Start > intersectionEnd {\n        \
    \    intersectionEnd = interval2Start\n        }\n        \n        if interval2Start\
    \ > intersectionEnd {\n            intersectionEnd = interval2Start\n        }\n\
    \        \n        if interval2Start > intersectionEnd {\n            intersectionEnd\
    \ = interval2Start\n        }\n        \n        if interval2Start <= intersectionEnd\
    \ && interval2End > intersectionEnd {\n            intersectionEnd = interval2End\n\
    \        }\n        \n        if interval2Start <= intersectionEnd && interval2End\
    \ <= intersectionEnd {\n            intersectionEnd = interval2End\n        }\n\
    \        \n        if interval2Start <= intersectionEnd && interval2End > intersectionEnd\
    \ {\n            intersectionEnd = interval2End\n        }\n        \n       \
    \ if interval2Start > intersectionEnd {\n            intersectionEnd = interval2Start\n\
    \        }\n        \n        if interval2Start > intersectionEnd {\n        \
    \    intersectionEnd = interval2Start\n        }\n        \n        if interval2Start\
    \ > intersectionEnd {\n            intersectionEnd = interval2Start\n        }\n\
    \        \n        if interval2Start <= intersectionEnd && interval2End <= intersectionEnd\
    \ {\n            intersectionEnd = interval2End\n        }\n        \n       \
    \ if interval2Start <= intersectionEnd && interval2End > intersectionEnd {\n \
    \           intersectionEnd = interval2End\n        }\n        \n        if interval2Start\
    \ <= intersection", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        } else {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n        }\n        \n        if intersectionEnd\
    \ > interval1End {\n            intersectionEnd = interval1End\n        }\n  \
    \      if intersectionEnd > interval2End {\n            intersectionEnd = interval2End\n\
    \        }\n    }\n    \n    if intersectionStart > intersectionEnd {\n      \
    \  return \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd {\n\
    \        if intersectionStart % 2 == 0 {\n            if intersectionEnd % 2 ==\
    \ 0 {\n                return \"YES\"\n            }\n            return \"NO\"\
    \n        }\n        return \"NO\"\n    }\n    \n    return \"YES\"\n}\n", " \
    \   \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n    \n    \n    if interval1Start <= interval2End && interval2Start\
    \ <= interval1End {\n        \n        \n        if interval1Start <= interval2Start\
    \ && interval2Start <= interval1End {\n            \n            \n          \
    \  if interval1Start <= interval2End && interval2End <= interval1End {\n     \
    \           \n                \n                if interval1Start <= interval2End\
    \ && interval2End <= interval1End {\n                    \n                  \
    \  \n                    if interval1Start <= interval2End && interval2End <=\
    \ interval1End {\n                        \n                        \n       \
    \                 if interval1Start <= interval2End && interval2End <= interval1End\
    \ {\n                            \n                            \n            \
    \                if interval1Start <= interval2End && interval2End <= interval1End\
    \ {\n                                \n                                \n    \
    \                            if interval1Start <= interval2End && interval2End\
    \ <= interval1End {\n                                    \n                  \
    \                  \n                                    if interval1Start <=\
    \ interval2End && interval2End <= interval1End {\n                           \
    \             \n                                        \n                   \
    \                     if interval1Start <= interval2End && interval2End <= interval1End\
    \ {\n                                            \n                          \
    \                  \n                                            if interval1Start\
    \ <= interval2End && interval2End <= interval1End {\n                        \
    \                        \n                                                \n\
    \                                                if interval1Start <= interval2End\
    \ && interval2End <= interval1End {\n                                        \
    \            \n                                                    \n        \
    \                                            if interval1Start <= interval2End\
    \ && interval2End <= interval1End {\n                                        \
    \                \n                                                        \n\
    \                                                        if interval1Start <=\
    \ interval2End && interval2End <= interval1End {\n                           \
    \                                 \n                                         \
    \                   \n                                                       \
    \     if interval1Start <= interval2End && interval2End <= interval1End {\n  \
    \                                                              \n            \
    \                                                    \n                      \
    \                                          if interval1Start <= interval2End &&\
    \ interval2End <= interval1End {\n                                           \
    \                         \n                                                 \
    \                   \n                                                       \
    \             if interval1Start <= interval2End && interval2End <= interval1End\
    \ {\n                                                                        \n\
    \                                                                        \n  \
    \                                                                      if interval1Start\
    \ <= interval2End && interval", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\
    \ <= interval2Start && interval1End >= interval2End\n    intersectionEnd := interval1Start\
    \ <= interval2End && interval1End >= interval2Start\n    \n    if intersectionStart\
    \ && intersectionEnd {\n        intersectionLength := interval1End - interval1Start\n\
    \        if isPrime(intersectionLength) {\n            return \"YES\"\n      \
    \  }\n    }\n    \n    return \"NO\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
