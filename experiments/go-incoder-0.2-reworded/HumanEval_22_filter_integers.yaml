name: HumanEval_22_filter_integers
language: go_test.go
prompt: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
  a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\"\
  , map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values\
  \ []interface{}) []int {\n"
tests: "func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
  \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
  \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
  \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, 0)\n    for _, value := range values {\n\
    \        if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ for _, value := range values {\n        if _, ok := value.(int); ok {\n    \
    \        result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    filtered := make([]int, 0)\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            filtered = append(filtered, v)\n   \
    \     }\n    }\n    return filtered\n}\n", "    var result []int\n    for _, v\
    \ := range values {\n        if _, ok := v.(int); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    filtered := make([]int, 0)\n    for _, value := range values {\n        if\
    \ _, ok := value.(int); ok {\n            filtered = append(filtered, value.(int))\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, int(value))\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ values {\n        if v, ok := v.(float64); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, int(value))\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       filtered = append(filtered, int(v))\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            if int(v) == v {\n                filtered\
    \ = append(filtered, int(v))\n            }\n        } else {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    for _, v := range\
    \ values {\n        if _, ok := v.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value.(int))\n        }\n    }\n    return filtered\n}\n",
  "    var filtered []int\n    for _, v := range values {\n        if v, ok := v.(int);\
    \ ok {\n            filtered = append(filtered, v)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []int\n    for _, value := range values {\n\
    \        if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n", "    filtered := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, v := range values {\n        if v, ok := v.(float64); ok {\n       \
    \     result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if v, ok := v.(int);\
    \ ok {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, v := range values {\n\
    \        if _, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if _, ok := v.(int); ok {\n            result =\
    \ append(result, int(v))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, v\
    \ := range values {\n        if _, ok := v.(int); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, v := range values {\n        if v, ok := v.(float64); ok {\n       \
    \     result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var filtered []int\n\
    \    for _, v := range values {\n        if v, ok := v.(float64); ok {\n     \
    \       filtered = append(filtered, int(v))\n        }\n    }\n    return filtered\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(int); ok {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            result = append(result, int(v))\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    for _, v\
    \ := range values {\n        if _, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n", "    filtered\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            filtered = append(filtered, value)\n        }\n    }\n   \
    \ return filtered\n}\n", "    var result []int\n    for _, v := range values {\n\
    \        if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ v := value.(type) {\n        case int:\n            result = append(result,\
    \ v)\n        case float64:\n            result = append(result, int(v))\n   \
    \     default:\n            result = append(result, 0)\n        }\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n    \
    \        result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            result = append(result, int(v))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, int(value))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            result = append(result, int(v))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, value := range values {\n        if _, ok :=\
    \ value.(int); ok {\n            result = append(result, value.(int))\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, int(v))\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, int(v))\n        }\n \
    \   }\n    return result\n}\n", "    filtered := make([]int, 0)\n    for _, v\
    \ := range values {\n        if v, ok := v.(float64); ok {\n            filtered\
    \ = append(filtered, int(v))\n        }\n    }\n    return filtered\n}\n", " \
    \   result := make([]int, 0)\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            result = append(result, int(v))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, int(value))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, int(value))\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _,\
    \ v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok && int(v) == v {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            if v, err := strconv.ParseInt(v,\
    \ 10, 64); err == nil {\n                result = append(result, int(v))\n   \
    \         }\n        case map[interface{}]interface{}:\n            for k, v :=\
    \ range v {\n                if v, err := strconv.ParseInt(v, 10, 64); err ==\
    \ nil {\n                    result = append(result, int(v))\n               \
    \ }\n            }\n        case []interface{}:\n            for _, v := range\
    \ v {\n                if v, err := strconv.ParseInt(v, 10, 64); err == nil {\n\
    \                    result = append(result, int(v))\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    filtered := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            filtered = append(filtered, value.(int))\n        }\n    }\n\
    \    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            result =\
    \ append(result, value.(int))\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    for _, v := range values {\n\
    \        if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n", "    filtered\
    \ := make([]int, 0)\n    for _, v := range values {\n        if v, ok := v.(float64);\
    \ ok {\n            if int(v) == v {\n                filtered = append(filtered,\
    \ int(v))\n            }\n        }\n    }\n    return filtered\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    filtered := make([]int, 0)\n    for _, v := range values\
    \ {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    var filtered []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            if int(v) == v {\n                filtered\
    \ = append(filtered, int(v))\n            }\n        } else {\n            filtered\
    \ = append(filtered, 0)\n        }\n    }\n    return filtered\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    for _, v := range values {\n\
    \        if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, int(v))\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, v\
    \ := range values {\n        if _, ok := v.(int); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, v := range values {\n        if\
    \ v, ok := v.(float64); ok {\n            result = append(result, int(v))\n  \
    \      }\n    }\n    return result\n}\n", "    var filtered []int\n    for _,\
    \ v := range values {\n        if _, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v.(int))\n        }\n    }\n    return filtered\n}\n", " \
    \   filtered := make([]int, 0)\n    for _, value := range values {\n        if\
    \ _, ok := value.(int); ok {\n            filtered = append(filtered, value)\n\
    \        }\n    }\n    return filtered\n}\n", "    result := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, v := range values {\n        if _, ok := v.(int); ok {\n           \
    \ result = append(result, v)\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      switch v := value.(type) {\n        case int:\n            result = append(result,\
    \ v)\n        case float64:\n            result = append(result, int(v))\n   \
    \     default:\n            result = append(result, 0)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if _, ok := v.(int); ok {\n            result = append(result, int(v))\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, int(v))\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v := range values\
    \ {\n        if v, ok := v.(float64); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    var filtered []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}\n",
  "    result := make([]int, 0)\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                result = append(result, int(v))\n   \
    \         } else {\n                result = append(result, i)\n            }\n\
    \        case []interface{}:\n            for _, v := range v {\n            \
    \    switch v := v.(type) {\n                case int:\n                    result\
    \ = append(result, v)\n                case float64:\n                    result\
    \ = append(result, int(v))\n                case string:\n                   \
    \ i, err := strconv.Atoi(v)\n                    if err != nil {\n           \
    \             result = append(result, int(v))\n                    } else {\n\
    \                        result = append(result, i)\n                    }\n \
    \               case []interface{}:\n                    for _, v := range v {\n\
    \                        switch v := v.(type) {\n                        case\
    \ int:\n                            result = append(result, v)\n             \
    \           case float64:\n                            result = append(result,\
    \ int(v))\n                        case string:\n                            i,\
    \ err := strconv.Atoi(v)\n                            if err != nil {\n      \
    \                          result = append(result, int(v))\n                 \
    \           } else {\n                                result = append(result,\
    \ i)\n                            }\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, int(value))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    filtered := make([]int, 0)\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           filtered = append(filtered, value.(int))\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []int\n    for _, v := range values {\n    \
    \    if _, ok := v.(int); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ v := value.(type) {\n        case int:\n            result = append(result,\
    \ v)\n        case float64:\n            result = append(result, int(v))\n   \
    \     default:\n            result = append(result, 0)\n        }\n    }\n   \
    \ return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n    \
    \        result = append(result, int(v))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if _, ok\
    \ := v.(int); ok {\n            result = append(result, int(v))\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ int(value))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    filtered := make([]int, 0)\n    for _, value := range values {\n        switch\
    \ v := value.(type) {\n        case int:\n            filtered = append(filtered,\
    \ v)\n        case float64:\n            filtered = append(filtered, int(v))\n\
    \        case string:\n            filtered = append(filtered, int(v))\n     \
    \   default:\n            filtered = append(filtered, int(0))\n        }\n   \
    \ }\n    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    filtered := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            filtered = append(filtered, value.(int))\n        }\n    }\n\
    \    return filtered\n}\n", "    result := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            result =\
    \ append(result, value.(int))\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   for _, value := range values {\n        if _, ok := value.(int); ok {\n  \
    \          result = append(result, int(value))\n        }\n    }\n    return result\n\
    }\n", "    var filtered []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(int); ok {\n            filtered = append(filtered, v)\n        }\n  \
    \  }\n    return filtered\n}\n", "    var filtered []int\n    for _, v := range\
    \ values {\n        if v, ok := v.(float64); ok {\n            filtered = append(filtered,\
    \ int(v))\n        }\n    }\n    return filtered\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, int(value))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if _, ok := value.(int); ok\
    \ {\n            result = append(result, value)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range values {\n      \
    \  if v, ok := v.(float64); ok {\n            result = append(result, int(v))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, value := range values {\n        if _, ok := value.(int); ok {\n   \
    \         result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if v, ok\
    \ := v.(float64); ok {\n            result = append(result, int(v))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ values {\n        if v, ok := v.(float64); ok {\n            result = append(result,\
    \ int(v))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        if _, ok := value.(int); ok {\n \
    \           result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if v, ok := v.(int); ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if _,\
    \ ok := value.(int); ok {\n            result = append(result, int(value))\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if _, ok := value.(int); ok {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, v := range values {\n        if _, ok := v.(float64);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    if _, ok := value.(int); ok {\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range values {\n        if v, ok := v.(float64); ok {\n            result\
    \ = append(result, int(v))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, int(value))\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   result = append(result, int(v))\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range values {\n        if _, ok := v.(int);\
    \ ok {\n            result = append(result, int(v))\n        }\n    }\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
