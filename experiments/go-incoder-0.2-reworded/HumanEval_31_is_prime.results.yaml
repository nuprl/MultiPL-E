language: go_test.go
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n); i += 2 {\n        if n%i == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n  \
    \  for i := 5; i*i <= n; i += 6 {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp3bjjtqve_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp3bjjtqve_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n/3); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp0a4o_usd_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp0a4o_usd_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp0a4o_usd_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i++ {\n        if n % d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n/3); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp0a4o_usd_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp0a4o_usd_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp0a4o_usd_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 1 {\n        return false\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= int(n); i +=\
    \ 2 {\n        if n%i == 0 {\n            return false\n        }\n\n        d\
    \ = d + 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmprh0c_sjd_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmprh0c_sjd_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmprh0c_sjd_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmprh0c_sjd_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmprh0c_sjd_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmprh0c_sjd_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmprh0c_sjd_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n \
    \   d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n         \
    \   return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3\
    \ == 0 {\n        return false\n    }\n    d := 5\n    for i := 6; i <= n; i +=\
    \ d {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmphxojbopa_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmphxojbopa_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmphxojbopa_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmphxojbopa_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmphxojbopa_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmphxojbopa_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i <=\
    \ n; i += d {\n        if n%d == 0 {\n            return false\n        }\n  \
    \      d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4_2ynw6b_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n); i += 2 {\n        if n%i == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp0m14murz_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp0m14murz_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= int(sqrt(n)); i +=\
    \ 2 {\n        if n%d == 0 {\n            return false\n        }\n        d =\
    \ d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9a2dojqt_test.go:37:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n; i++ {\n        if n%d == 0 {\n          \
    \  return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp6dn4bbns_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp6dn4bbns_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp6dn4bbns_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp6dn4bbns_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp6dn4bbns_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp6dn4bbns_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp6dn4bbns_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i += d {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc0llz29r_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= int(n); i += 2 {\n        if n%i == 0 {\n       \
    \     return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= int(n); i +=\
    \ 2 {\n        if n%i == 0 {\n            return false\n        }\n\n        if\
    \ d > i {\n            d *= i\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpf6op48r6_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpf6op48r6_test.go:79:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpf6op48r6_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpf6op48r6_test.go:79:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpf6op48r6_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpf6op48r6_test.go:79:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpf6op48r6_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i++ {\n        if n%d == 0 {\n            return false\n        }\n     \
    \   d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n     \
    \   return false\n    }\n    if n % 11 == 0 {\n        return false\n    }\n \
    \   if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n    \
    \    return false\n    }\n    if n % 19 == 0 {\n        return false\n    }\n\
    \    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n   \
    \     return false\n    }\n    if n % 31 == 0 {\n        return false\n    }\n\
    \    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n   \
    \     return false\n    }\n    if n % 43 == 0 {\n        return false\n    }\n\
    \    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n   \
    \     return false\n    }\n    if n % 59 == 0 {\n        return false\n    }\n\
    \    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n   \
    \     return false\n    }\n    if n % 71 == 0 {\n        return false\n    }\n\
    \    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n   \
    \     return false\n    }\n    if n % 83 == 0 {\n        return false\n    }\n\
    \    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n   \
    \     return false\n    }\n    if n % 101 == 0 {\n        return false\n    }\n\
    \    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0 {\n \
    \       return false\n    }\n    if n % 109 == 0 {\n        return false\n   \
    \ }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 == 0 {\n\
    \        return false\n    }\n    if n % 121 == 0 {\n        return false\n  \
    \  }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 == 0\
    \ {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n        return false\n\
    \    }\n    if n % 17\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp542u83m0_test.go:166:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n  \
    \      if n%d == 0 {\n            return true\n        }\n        d += 2\n   \
    \ }\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp03ugpl28_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp03ugpl28_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp03ugpl28_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp03ugpl28_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp03ugpl28_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp03ugpl28_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp03ugpl28_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp03ugpl28_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i int\n\
    \    for i = 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i\
    \ := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n   \
    \     }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 || n%3 !=\
    \ 0 {\n        return false\n    }\n    for i := 5; i*i <= n; i += 6 {\n     \
    \   if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpwyxxawry_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpwyxxawry_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpwyxxawry_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpwyxxawry_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpwyxxawry_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpwyxxawry_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpwyxxawry_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= n; i += d {\n\
    \        if n % i == 0 {\n            return false\n        }\n        d = 6 +\
    \ i\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmptdqoujm2_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmptdqoujm2_test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmptdqoujm2_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp3x0p5fe6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp3x0p5fe6_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp3x0p5fe6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp3x0p5fe6_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp3x0p5fe6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp3x0p5fe6_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp3x0p5fe6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i++ {\n        if n%i == 0 {\n            return false\n        }\n     \
    \   if n%d%i == 0 {\n            return false\n        }\n        d += 6\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpnzjzzcdo_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmpnzjzzcdo_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 5; i * d <= n; i += d {\n        if n%i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpf13f449s_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i+=d {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp558kma80_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n       \
    \ if n%d%i == 0 {\n            return false\n        }\n        d += 2\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmpwcfg1twl_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= int(n); i += 2 {\n\
    \        if n%i == 0 {\n            return false\n        }\n        d = d + 1\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpe0lmt8xc_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpe0lmt8xc_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpe0lmt8xc_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpe0lmt8xc_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpe0lmt8xc_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpe0lmt8xc_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpe0lmt8xc_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= n; i += d {\n\
    \        if n % i == 0 {\n            return false\n        }\n        d = d /\
    \ 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073324
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i++ {\n        if n%d == 0 {\n            return false\n        }\n     \
    \   d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpwr8lo6z3_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpwr8lo6z3_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpwr8lo6z3_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpwr8lo6z3_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpwr8lo6z3_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpwr8lo6z3_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpwr8lo6z3_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%(i*i) == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrydehzh_test.go:42:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return\
    \ false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n ==\
    \ 13 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 19 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n ==\
    \ 37 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 59 {\n       \
    \ return true\n    }\n    if n == 67 {\n        return true\n    }\n    if n ==\
    \ 79 {\n        return true\n    }\n    if n == 93 {\n        return true\n  \
    \  }\n    if n == 111 {\n        return true\n    }\n    if n == 131 {\n     \
    \   return true\n    }\n    if n == 167 {\n        return true\n    }\n    if\
    \ n == 191 {\n        return true\n    }\n    if n == 193 {\n        return true\n\
    \    }\n    if n == 197 {\n        return true\n    }\n    if n == 199 {\n   \
    \     return true\n    }\n    if n == 203 {\n        return true\n    }\n    if\
    \ n == 215 {\n        return true\n    }\n    if n == 217 {\n        return true\n\
    \    }\n    if n == 223 {\n        return true\n    }\n    if n == 227 {\n   \
    \     return true\n    }\n    if n == 229 {\n        return true\n    }\n    if\
    \ n == 233 {\n        return true\n    }\n    if n == 239 {\n        return true\n\
    \    }\n    if n == 241 {\n        return true\n    }\n    if n == 243 {\n   \
    \     return true\n    }\n    if n == 245 || n == 247 || n == 249 {\n        return\
    \ true\n    }\n    if n == 251 {\n        return true\n    }\n    if n == 253\
    \ {\n        return true\n    }\n    if n == 255 || n == 257 {\n        return\
    \ true\n    }\n    if n == 263 {\n        return true\n    }\n    if n == 265\
    \ || n == 267 {\n        return true\n    }\n    if n == 271 {\n        return\
    \ true\n    }\n    if n == 273 {\n        return true\n    }\n    if n == 277\
    \ || n == 279 {\n        return true\n    }\n    if n == 283 {\n        return\
    \ true\n    }\n    if n == 285 {\n        return true\n    }\n    if n == 287\
    \ {\n        return true\n    }\n    if n == 289 {\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9op7g7wp_test.go:173:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073310
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 6\n    for i := 3; i <= int(n); i += 2 {\n        if n%i == 0 {\n  \
    \          return false\n        }\n        if n%(i+2) == 0 {\n            return\
    \ false\n        }\n        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpfacwc67w_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpfacwc67w_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpfacwc67w_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpfacwc67w_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpfacwc67w_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpfacwc67w_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpfacwc67w_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ int(sqrt(n)); i += 2 {\n        if n%i == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps4j8lsfl_test.go:33:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i\
    \ := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n   \
    \     }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n        if n % i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpb_y5p8jd_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpb_y5p8jd_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n\
    \        }\n        d += 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 5\n    for i := 3; i <=\
    \ int(n/d); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp8au7bg0d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%i == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpahs_zjgt_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpahs_zjgt_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4_2ynw6b_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 5\n    for i := 3; i <= int(n/d); i++ {\n        if n%d == 0 {\n   \
    \         return false\n        }\n        d += 6\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpkr6px09z_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    \    }\n    if n == 52 {\n        return true\n    }\n    if n == 53 {\n     \
    \   return true\n    }\n    if n == 54 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvux2_ahe_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n        if n % i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpb_y5p8jd_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpb_y5p8jd_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i++ {\n        if n % d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpy0385jmo_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpy0385jmo_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpy0385jmo_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpy0385jmo_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpy0385jmo_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpy0385jmo_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpy0385jmo_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 5; i * i <= n; i += 6 {\n        if n%(i*i) == 0 {\n\
    \            return false\n        }\n    }\n    for i := 3; i * i <= n; i +=\
    \ 6 {\n        if n%(i*i) == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1dmgg0kq_test.go:39:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n); i += 2 {\n        if n%i == 0 {\n            return false\n        }\n\
    \        if n%(i+2) == 0 {\n            return false\n        }\n        if n%(i+3)\
    \ == 0 {\n            return false\n        }\n        if n%(i+4) == 0 {\n   \
    \         return false\n        }\n        if n%(i+5) == 0 {\n            return\
    \ false\n        }\n        if n%(i+6) == 0 {\n            return false\n    \
    \    }\n        if n%(i+7) == 0 {\n            return false\n        }\n     \
    \   if n%(i+8) == 0 {\n            return false\n        }\n        if n%(i+9)\
    \ == 0 {\n            return false\n        }\n        if n%(i+10) == 0 {\n  \
    \          return false\n        }\n        if n%(i+11) == 0 {\n            return\
    \ false\n        }\n        if n%(i+12) == 0 {\n            return false\n   \
    \     }\n        if n%(i+13) == 0 {\n            return false\n        }\n   \
    \     if n%(i+14) == 0 {\n            return false\n        }\n        if n%(i+15)\
    \ == 0 {\n            return false\n        }\n        if n%(i+16) == 0 {\n  \
    \          return false\n        }\n        if n%(i+17) == 0 {\n            return\
    \ false\n        }\n        if n%(i+18) == 0 {\n            return false\n   \
    \     }\n        if n%(i+19) == 0 {\n            return false\n        }\n   \
    \     if n%(i+20) == 0 {\n            return false\n        }\n        if n%(i+21)\
    \ == 0 {\n            return false\n        }\n        if n%(i+22) == 0 {\n  \
    \          return false\n        }\n        if n%(i+23) == 0 {\n            return\
    \ false\n        }\n        if n%(i+24) == 0 {\n            return false\n   \
    \     }\n        if n%(i+25) == 0 {\n            return false\n        }\n   \
    \     if n%(i+26) == 0 {\n            return false\n        }\n        if n%(i+27)\
    \ == 0 {\n            return false\n        }\n        if n%(i+28) == 0 {\n  \
    \          return false\n        }\n        if n%(i+29) == 0 {\n            return\
    \ false\n        }\n        if n%(i+30) == 0 {\n            return false\n   \
    \     }\n        if n%(i+31) == 0 {\n            return false\n        }\n   \
    \     if n%(i+32) == 0 {\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmt14htzt_test.go:139:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n       \
    \ if n%d%i == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmp1guexa2t_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n       \
    \ if n%d == 0 {\n            return false\n        }\n        d = d + 2\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 12 {\n        return true\n    }\n    if n == 14 {\n        return\
    \ true\n    }\n    if n == 15 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 19 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 27 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 31 {\n        return true\n    }\n  \
    \  if n == 33 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 37 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 41 {\n        return true\n    }\n  \
    \  if n == 43 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 47 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 51 {\n        return true\n    }\n  \
    \  if n == 53 {\n        return true\n    }\n    if n == 55 {\n        return\
    \ true\n    }\n    if n == 57 {\n        return true\n    }\n    if n == 59 {\n\
    \        return true\n    }\n    if n == 61 {\n        return true\n    }\n  \
    \  if n == 65 {\n        return true\n    }\n    if n == 67 {\n        return\
    \ true\n    }\n    if n == 69 {\n        return true\n    }\n    if n == 71 {\n\
    \        return true\n    }\n    if n == 73 {\n        return true\n    }\n  \
    \  if n == 75 {\n        return true\n    }\n    if n == 77 {\n        return\
    \ true\n    }\n    if n == 79 {\n        return true\n    }\n    if n == 81 {\n\
    \        return true\n    }\n    if n == 83 {\n        return true\n    }\n  \
    \  if n == 85 {\n        return true\n    }\n    if n == 87 {\n        return\
    \ true\n    }\n    if n == 89 {\n        return true\n    }\n    if n == 91 {\n\
    \        return true\n    }\n    if n == 93 {\n        return true\n    }\n  \
    \  if n == 95 || n == 93 {\n        return true\n    }\n    if n == 97 {\n   \
    \     return true\n    }\n    if n == 99 {\n        return true\n    }\n    if\
    \ n == 101 {\n        return true\n    }\n    if n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44yfypuy_test.go:178:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/d; i++ {\n        if n % d == 0 {\n      \
    \      return false\n        }\n        d += 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n     \
    \   return false\n    }\n    for i := 6; i <= n; i += 6 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpztobboxo_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpztobboxo_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= int(n); i += 2 {\n        if n%i == 0 {\n       \
    \     return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpp5e18d8g_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpp5e18d8g_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%(i*i) == 0 {\n            return false\n      \
    \  }\n        if n%(i*i-1) == 0 {\n            return false\n        }\n     \
    \   if n%(i*i+1) == 0 {\n            return false\n        }\n        if n%(i*i+2)\
    \ == 0 {\n            return false\n        }\n        if n%(i*i+3) == 0 {\n \
    \           return false\n        }\n        if n%(i*i+4) == 0 {\n           \
    \ return false\n        }\n        if n%(i*i+5) == 0 {\n            return false\n\
    \        }\n        if n%(i*i+6) == 0 {\n            return false\n        }\n\
    \        if n%(i*i+7) == 0 {\n            return false\n        }\n        if\
    \ n%(i*i+8) == 0 {\n            return false\n        }\n        if n%(i*i+9)\
    \ == 0 {\n            return false\n        }\n        if n%(i*i+10) == 0 {\n\
    \            return false\n        }\n        if n%(i*i+11) == 0 {\n         \
    \   return false\n        }\n        if n%(i*i+12) == 0 {\n            return\
    \ false\n        }\n        if n%(i*i+13) == 0 {\n            return false\n \
    \       }\n        if n%(i*i+14) == 0 {\n            return false\n        }\n\
    \        if n%(i*i+15) == 0 {\n            return false\n        }\n        if\
    \ n%(i*i+16) == 0 {\n            return false\n        }\n        if n%(i*i+17)\
    \ == 0 {\n            return false\n        }\n        if n%(i*i+18) == 0 {\n\
    \            return false\n        }\n        if n%(i*i+19) == 0 {\n         \
    \   return false\n        }\n        if n%(i*i+20) == 0 {\n            return\
    \ false\n        }\n        if n%(i*i+21) == 0 {\n            return false\n \
    \       }\n        if n%(i*i+22) == 0 {\n            return false\n        }\n\
    \        if n%(i*i+23) == 0 {\n            return false\n        }\n        if\
    \ n%(i*i+24) == 0 {\n            return false\n        }\n        if n%(i*i+25)\
    \ == 0 {\n            return false\n        }\n        if n%(i*i+26) == 0 {\n\
    \            return false\n        }\n        if n%(i*i+27) == 0 {\n         \
    \   return false\n        }\n        if n%(i*\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmlgi2cq3_test.go:132:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n     \
    \   return false\n    }\n    if n == 1 {\n        return false\n    }\n    if\
    \ n == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbpgiksg__test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%(i*i) == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrydehzh_test.go:42:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/d; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i += d {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc0llz29r_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%(i*i) == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrydehzh_test.go:42:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n     \
    \   return false\n    }\n    if n % 11 == 0 {\n        return false\n    }\n \
    \   if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n    \
    \    return false\n    }\n    if n % 19 == 0 {\n        return false\n    }\n\
    \    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n   \
    \     return false\n    }\n    if n % 31 == 0 {\n        return false\n    }\n\
    \    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n   \
    \     return false\n    }\n    if n % 43 == 0 {\n        return false\n    }\n\
    \    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n   \
    \     return false\n    }\n    if n % 59 == 0 {\n        return false\n    }\n\
    \    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n   \
    \     return false\n    }\n    if n % 71 == 0 {\n        return false\n    }\n\
    \    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n   \
    \     return false\n    }\n    if n % 83 == 0 {\n        return false\n    }\n\
    \    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n   \
    \     return false\n    }\n    if n % 101 == 0 {\n        return false\n    }\n\
    \    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0 {\n \
    \       return false\n    }\n    if n % 109 == 0 {\n        return false\n   \
    \ }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 == 0 {\n\
    \        return false\n    }\n    if n % 121 == 0 {\n        return false\n  \
    \  }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 == 0\
    \ {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n        return false\n\
    \    }\n    if n % 17\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp542u83m0_test.go:166:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqtxb7rt_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n \
    \   d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n         \
    \   return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    for i := 5; i <= n; i += 6 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpz9ilzv_k_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpz9ilzv_k_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpz9ilzv_k_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpz9ilzv_k_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpz9ilzv_k_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpz9ilzv_k_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 5\n    for i := 3; i <=\
    \ int(n/3); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 5\n    for i := 6; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpczs3xomo_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpczs3xomo_test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpczs3xomo_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpczs3xomo_test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpczs3xomo_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpczs3xomo_test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n       \
    \ if n%d%i == 0 {\n            return false\n        }\n        d = d + 1\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return\
    \ false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n ==\
    \ 13 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 19 {\n        return true\n    }\n    if n == 231 {\n      \
    \  return true\n    }\n    if n == 293 {\n        return true\n    }\n    if n\
    \ == 393 {\n        return true\n    }\n    if n == 473 {\n        return true\n\
    \    }\n    if n == 531 {\n        return true\n    }\n    if n == 593 {\n   \
    \     return true\n    }\n    if n == 673 {\n        return true\n    }\n    if\
    \ n == 731 {\n        return true\n    }\n    if n == 793 {\n        return true\n\
    \    }\n    if n == 973 {\n        return true\n    }\n    if n == 1131 {\n  \
    \      return true\n    }\n    if n == 1231 {\n        return true\n    }\n  \
    \  if n == 1271 {\n        return true\n    }\n    if n == 1291 {\n        return\
    \ true\n    }\n    if n == 1311 {\n        return true\n    }\n    if n == 1367\
    \ {\n        return true\n    }\n    if n == 1399 {\n        return true\n   \
    \ }\n    if n == 1429 {\n        return true\n    }\n    if n == 1459 {\n    \
    \    return true\n    }\n    if n == 1479 {\n        return true\n    }\n    if\
    \ n == 1519 {\n        return true\n    }\n    if n == 1539 {\n        return\
    \ true\n    }\n    if n == 1559 {\n        return true\n    }\n    if n == 1579\
    \ {\n        return true\n    }\n    if n == 1607 {\n        return true\n   \
    \ }\n    if n == 1637 {\n        return true\n    }\n    if n == 1667 {\n    \
    \    return true\n    }\n    if n == 1699 {\n        return true\n    }\n    if\
    \ n == 1709 {\n        return true\n    }\n    if n == 1737 {\n        return\
    \ true\n    }\n    if n == 1759 {\n        return true\n    }\n    if n == 1799\
    \ {\n        return true\n    }\n    if n == 1809 {\n        return true\n   \
    \ }\n    if n == 1837 {\n        return true\n    }\n    if n == 1859 {\n    \
    \    return true\n    }\n    if n == 1899 {\n        return true\n    }\n    if\
    \ n == 1909 {\n        return true\n    }\n    if n == 1937 {\n        return\
    \ true\n    }\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmputa5bdj5_test.go:171:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 1 {\n        return false\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= n/2; i++ {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        if d\
    \ % i == 0 {\n            return false\n        }\n\n        d = d + (i * 2)\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpvmq9s1yq_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpvmq9s1yq_test.go:81:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpvmq9s1yq_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpvmq9s1yq_test.go:81:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpvmq9s1yq_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpvmq9s1yq_test.go:81:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n  \
    \  for i := 5; i <= n/3; i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i += d {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc0llz29r_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i++ {\n        if n%d == 0 {\n            return false\n        }\n  \
    \      d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 7 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n\
    \    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n     \
    \   return true\n    }\n    if n == 12 {\n        return true\n    }\n    if n\
    \ == 13 {\n        return true\n    }\n    if n == 14 {\n        return true\n\
    \    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 18 {\n        return true\n    }\n    if n == 19 {\n        return true\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n     \
    \   return true\n    }\n    if n == 22 {\n        return true\n    }\n    if n\
    \ == 23 {\n        return true\n    }\n    if n == 24 {\n        return true\n\
    \    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n     \
    \   return true\n    }\n    if n == 27 {\n        return true\n    }\n    if n\
    \ == 28 {\n        return true\n    }\n    if n == 29 {\n        return true\n\
    \    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n     \
    \   return true\n    }\n    if n == 32 {\n        return true\n    }\n    if n\
    \ == 33 {\n        return true\n    }\n    if n == 34 {\n        return true\n\
    \    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n     \
    \   return true\n    }\n    if n == 37 {\n        return true\n    }\n    if n\
    \ == 38 {\n        return true\n    }\n    if n == 39 {\n        return true\n\
    \    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 42 {\n        return true\n    }\n    if n\
    \ == 43 {\n        return true\n    }\n    if n == 44 {\n        return true\n\
    \    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n     \
    \   return true\n    }\n    if n == 47 {\n        return true\n    }\n    if n\
    \ == 48 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\n     \
    \   return true\n    }\n    if n == 52 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphlr13ajn_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 1 {\n        return false\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    d := 3\n    for i := 3; i <= n/2; i++ {\n\
    \        if n%d == 0 {\n            return false\n        }\n        d += 2\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073314
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n           \
    \ return false\n        }\n        d = d + 1\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073314
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    \    }\n    if n == 52 {\n        return true\n    }\n    if n == 53 {\n     \
    \   return true\n    }\n    if n == 54 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvux2_ahe_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return\
    \ false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11\
    \ == 0 {\n        return false\n    }\n    if n % 13 == 0 {\n        return false\n\
    \    }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0\
    \ {\n        return false\n    }\n    if n % 23 == 0 {\n        return false\n\
    \    }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0\
    \ {\n        return false\n    }\n    if n % 37 == 0 {\n        return false\n\
    \    }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0\
    \ {\n        return false\n    }\n    if n % 47 == 0 {\n        return false\n\
    \    }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0\
    \ {\n        return false\n    }\n    if n % 61 == 0 {\n        return false\n\
    \    }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0\
    \ {\n        return false\n    }\n    if n % 73 == 0 {\n        return false\n\
    \    }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0\
    \ {\n        return false\n    }\n    if n % 89 == 0 {\n        return false\n\
    \    }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 103 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 149 == 0 {\n        return false\n\
    \    }\n    if n % 153 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 167 == 0 {\n        return false\n    }\n    if n % 173 ==\
    \ 0 {\n        return false\n    }\n    if n % 179 == 0 {\n        return false\n\
    \    }\n    if n % 183 == 0 {\n        return false\n    }\n    if n % 189 ==\
    \ 0 {\n        return false\n    }\n    if n % 193 == 0 {\n        return false\n\
    \    }\n    if n % 197 == 0 {\n        return false\n    }\n    if n % 201 ==\
    \ 0 {\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihj_agk0_test.go:166:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i += d {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc0llz29r_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmpc9aq49dl_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmpc9aq49dl_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc9aq49dl_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4dv00j3a_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= int(sqrt(n)); i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2h38utz_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return\
    \ false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n%11\
    \ == 0 {\n        return false\n    }\n    if n%13 == 0 {\n        return false\n\
    \    }\n    if n%17 == 0 {\n        return false\n    }\n    if n%19 == 0 {\n\
    \        return false\n    }\n    if n%23 == 0 {\n        return false\n    }\n\
    \    if n%29 == 0 {\n        return false\n    }\n    if n%31 == 0 {\n       \
    \ return false\n    }\n    if n%37 == 0 {\n        return false\n    }\n    if\
    \ n%41==0 {\n        return false\n    }\n    if n%43==0 {\n        return false\n\
    \    }\n    if n%47==0 {\n        return false\n    }\n    if n%53==0 {\n    \
    \    return false\n    }\n    if n%59==0 {\n        return false\n    }\n    if\
    \ n%61==0 {\n        return false\n    }\n    if n%67==0 {\n        return false\n\
    \    }\n    if n%71==0 {\n        return false\n    }\n    if n%73==0 {\n    \
    \    return false\n    }\n    if n%79==0 {\n        return false\n    }\n    if\
    \ n%83==0 {\n        return false\n    }\n    if n%89==0 {\n        return false\n\
    \    }\n    if n%97==0 {\n        return false\n    }\n    if n%101==0 {\n   \
    \     return false\n    }\n    if n%103==0 {\n        return false\n    }\n  \
    \  if n%107==0 {\n        return false\n    }\n    if n%109==0 {\n        return\
    \ false\n    }\n    if n%113==0 {\n        return false\n    }\n    if n%117==0\
    \ {\n        return false\n    }\n    if n%121==0 {\n        return false\n  \
    \  }\n    if n%123==0 {\n        return false\n    }\n    if n%127==0 {\n    \
    \    return false\n    }\n    if n%131==0 {\n        return false\n    }\n   \
    \ if n%137==0 {\n        return false\n    }\n    if n%141==0 {\n        return\
    \ false\n    }\n    if n%143==0 {\n        return false\n    }\n    if n%147==0\
    \ {\n        return false\n    }\n    if n%151==0 {\n        return false\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn2w2nz_s_test.go:155:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if d > i {\n            d *= i\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp1jf3gd___test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp1jf3gd___test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp1jf3gd___test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp1jf3gd___test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp1jf3gd___test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp1jf3gd___test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp1jf3gd___test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n/3); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d = d + 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4mkh1o6d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4mkh1o6d_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4mkh1o6d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= int(n/2); i++ {\n\
    \        if n%d == 0 {\n            return false\n        }\n        d = d + 2\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i++ {\n        if n % d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpxdjgv9gv_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpxdjgv9gv_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n  \
    \  d := 5\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n          \
    \  return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i\
    \ := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n   \
    \     }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n\n        if d % i == 0 {\n            return false\n        }\n\n\
    \        d = d + 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpwc9g8ouw_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpwc9g8ouw_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpwc9g8ouw_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpwc9g8ouw_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpwc9g8ouw_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpwc9g8ouw_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    for i := 5; i * i <= n; i += 6 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp2m6792u__test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp2m6792u__test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2hwoxns_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i*i <= n; i += 6 {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp0avf815t_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp0avf815t_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqtxb7rt_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ int(sqrt(n)); i++ {\n        if n%i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67j4u5h__test.go:33:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d / 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073328
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 5\n    for i := 6; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp1wprf_o__test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp1wprf_o__test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp1wprf_o__test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp1wprf_o__test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmp1wprf_o__test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmp1wprf_o__test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for i := 3; i <= int(n/2); i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var prime bool\n\
    \    for i := 3; i <= n; i = i * 2 {\n        if n % i == 0 {\n            prime\
    \ = false\n            break\n        }\n    }\n\n    return prime\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp7m5crgbv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp7m5crgbv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp7m5crgbv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp7m5crgbv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp7m5crgbv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp7m5crgbv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp7m5crgbv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d = d + 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n; i += d {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        d += 2\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmphpgm88v9_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmphpgm88v9_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmphpgm88v9_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n        d = d + 1\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%i == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpahs_zjgt_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpahs_zjgt_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n \
    \   d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n         \
    \   return false\n        }\n        d = d + 2\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n      \
    \  if n%d == 0 {\n            return false\n        }\n        d = d + 2\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i*d <=\
    \ n; i += d {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpc0llz29r_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 5\n    for i := 6; i <=\
    \ n; i += d {\n        if n%d == 0 {\n            return false\n        }\n  \
    \      d = 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpuzdckmmp_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpuzdckmmp_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i <=\
    \ n; i += d {\n        if n%d == 0 {\n            return false\n        }\n  \
    \      d *= 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmpakdrto33_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmpakdrto33_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpakdrto33_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return\
    \ false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n ==\
    \ 13 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 19 {\n        return true\n    }\n    if n == 231 {\n      \
    \  return true\n    }\n    if n == 293 {\n        return true\n    }\n    if n\
    \ == 393 {\n        return true\n    }\n    if n == 473 {\n        return true\n\
    \    }\n    if n == 553 {\n        return true\n    }\n    if n == 593 {\n   \
    \     return true\n    }\n    if n == 673 {\n        return true\n    }\n    if\
    \ n == 773 {\n        return true\n    }\n    if n == 873 {\n        return true\n\
    \    }\n    if n == 973 {\n        return true\n    }\n    if n == 10973 {\n \
    \       return true\n    }\n    if n == 11973 {\n        return true\n    }\n\
    \    if n == 131073 {\n        return true\n    }\n    if n == 131071 {\n    \
    \    return true\n    }\n    if n == 134217 {\n        return true\n    }\n  \
    \  if n == 142371 {\n        return true\n    }\n    if n == 142931 {\n      \
    \  return true\n    }\n    if n == 143467 {\n        return true\n    }\n    if\
    \ n == 143953 {\n        return true\n    }\n    if n == 144759 {\n        return\
    \ true\n    }\n    if n == 145921 {\n        return true\n    }\n    if n == 146953\
    \ {\n        return true\n    }\n    if n == 147959 {\n        return true\n \
    \   }\n    if n == 149067 {\n        return true\n    }\n    if n == 149373 {\n\
    \        return true\n    }\n    if n == 149699 {\n        return true\n    }\n\
    \    if n == 150921 {\n        return true\n    }\n    if n == 151387 {\n    \
    \    return true\n    }\n    if n == 151775 {\n        return true\n    }\n  \
    \  if n == 151969 {\n        return true\n    }\n    if n == 152221 {\n      \
    \  return true\n    }\n    if n == 152567 {\n        return true\n    }\n    if\
    \ n == 152893 {\n        return true\n    }\n    if n == 153211 {\n        return\
    \ true\n    }\n    if n == 153473 {\n        return true\n    }\n    if n == 153775\
    \ {\n        return true\n    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvdu83a4r_test.go:166:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4dv00j3a_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n\
    \        }\n        d = d + 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073316
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073316
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i\
    \ := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return false\n   \
    \     }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i <=\
    \ n; i += 6 {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpkwez8xew_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpkwez8xew_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpkwez8xew_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpkwez8xew_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpkwez8xew_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpkwez8xew_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= int(sqrt(n)); i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2h38utz_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 3; i <=\
    \ int(n/3); i++ {\n        if n%d == 0 {\n            return false\n        }\n\
    \        d = d + 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4mkh1o6d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4mkh1o6d_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4mkh1o6d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2hwoxns_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4_2ynw6b_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n        if n%i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpkbcr557v_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpkbcr557v_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpvsnuloi2_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    d := 3\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%d == 0 {\n            return false\n        }\n        d += 2\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for i := 3; i <= int(n/2); i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d = d + 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2hwoxns_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    d := 3\n    for i\
    \ := 3; i <= int(n); i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpph5ki60k_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpph5ki60k_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpph5ki60k_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpph5ki60k_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpph5ki60k_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpph5ki60k_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpph5ki60k_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    for i := 5; i <= n/3; i++ {\n\
    \        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073316
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n           \
    \ return false\n        }\n        if d % i == 0 {\n            return false\n\
    \        }\n        d = d + i\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpdifrsj3i_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpdifrsj3i_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpdifrsj3i_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpdifrsj3i_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpdifrsj3i_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpdifrsj3i_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= n/2; i++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n        d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i * i\
    \ <= n; i += 6 {\n        if n%(i*i) == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrydehzh_test.go:42:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i*i <=\
    \ n; i += 6 {\n        if n%i == 0 {\n            return false\n        }\n  \
    \      d *= 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp02s96rki_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp02s96rki_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d / 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073328
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 6\n    for i := 5; i <=\
    \ n; i += 6 {\n        if n%i == 0 {\n            return false\n        }\n  \
    \      d += 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp943fy3v4_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp943fy3v4_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp943fy3v4_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp943fy3v4_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp943fy3v4_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp943fy3v4_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    d := 3\n    for i := 4; i <= n/2; i++ {\n        if n%d == 0 {\n        \
    \    return false\n        }\n        d += 2\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073315
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    d\
    \ := 3\n    for i := 3; i <= int(n); i += 2 {\n        if n%i == 0 {\n       \
    \     return false\n        }\n        d = d + i\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpupxtmj2b_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpupxtmj2b_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpupxtmj2b_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpupxtmj2b_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpupxtmj2b_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpupxtmj2b_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpupxtmj2b_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073317
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d / 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073328
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 5; i * d\
    \ <= n; i += d {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp68hf230b_test.go:76: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n/2; i++ {\n        if n%d == 0 {\n            return false\n        }\n   \
    \     d = d + 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    for i := 3; i <= int(sqrt(n)); i += 2 {\n     \
    \   if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2hwoxns_test.go:36:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp4_2ynw6b_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp4_2ynw6b_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if\
    \ n % 3 == 0 {\n        return false\n    }\n    d := 3\n    for i := 4; i <=\
    \ n; i += d {\n        if n % i == 0 {\n            return false\n        }\n\
    \        d = d / 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073328
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    \    }\n    if n == 52 {\n        return true\n    }\n    if n == 53 {\n     \
    \   return true\n    }\n    if n == 54 {\n        return \nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvux2_ahe_test.go:179:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n%2 == 0 {\n     \
    \   return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i*i <= n; i += 6 {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp0avf815t_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp0avf815t_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073315
