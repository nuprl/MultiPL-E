name: HumanEval_5_intersperse
language: go_test.go
prompt: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Insert a number 'delimeter' between every two consecutive elements of input list\
  \ `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
  \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
  \ int) []int {\n"
tests: "func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual:\
  \ candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n   \
  \  { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i*2-1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n    }\n\
    \    for i := 0; i < len(numbers); i += 2 {\n        result[i+1] = delimeter\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, len(numbers))\n    index := 0\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        if index == 0 {\n            result[i] =\
    \ numbers[i]\n        } else {\n            result[i] = numbers[i] + delimeter\n\
    \        }\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += delimeter\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n\n    result := make([]int, len(numbers))\n\
    \    index := 0\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n\
    \            result[index] = numbers[i]\n            index++\n        }\n    \
    \    result[index] = delimeter\n        index++\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += delimeter\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    for i, number := range numbers {\n       \
    \ result[i*delimeter+delimeter] = number\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(numbers))\n    for i := 0; i < len(numbers); i++\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += delimeter\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    result := make([]int, len(numbers))\n\
    \    index := 0\n    for i := 0; i < len(numbers); i++ {\n        result[index]\
    \ = numbers[i]\n        if i+1 < len(numbers) {\n            result[index] +=\
    \ delimeter\n        }\n        index++\n    }\n    return result\n}\n", "   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += delimeter\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers))\n\
    \    index := 0\n    for i := 0; i < len(numbers); i++ {\n        result[index]\
    \ = numbers[i]\n        index++\n        if index%delimeter == 0 {\n         \
    \   index++\n            result[index] = delimeter\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n    for\
    \ _, number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += delimeter\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += delimeter\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        i += delimeter\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i += delimeter\n   \
    \ }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, len(numbers))\n    index := 0\n    for _, number\
    \ := range numbers {\n        result[index] = number\n        index++\n      \
    \  if index%delimeter == 0 {\n            index = 0\n            result[index]\
    \ = number\n            index++\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n\n   \
    \ return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
