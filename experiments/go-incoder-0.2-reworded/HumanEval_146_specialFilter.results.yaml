language: go_test.go
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num > 10 && num < 100 {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmppm7i9opj_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmppm7i9opj_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmppm7i9opj_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmppm7i9opj_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%10 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp89hl3yq4_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp89hl3yq4_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp89hl3yq4_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp89hl3yq4_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%2 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 1 && num%2 == 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpuejar6eu_test.go:22:12: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpmi1p9dba_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpmi1p9dba_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpmi1p9dba_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpmi1p9dba_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpvhh6rhil_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvhh6rhil_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpvhh6rhil_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvhh6rhil_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpmi1p9dba_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpmi1p9dba_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpmi1p9dba_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpmi1p9dba_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpaeq1l89a_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpaeq1l89a_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpaeq1l89a_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpaeq1l89a_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpaeq1l89a_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpaeq1l89a_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1u0ou72k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpvq4dygi3_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvq4dygi3_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpvq4dygi3_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvq4dygi3_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_vz0xmmw_test.go:49: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_vz0xmmw_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_vz0xmmw_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%2 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmplf_hh3y__test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmplf_hh3y__test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%10%2 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp1i1wcn8g_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1i1wcn8g_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp1i1wcn8g_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1i1wcn8g_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpvq4dygi3_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvq4dygi3_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpvq4dygi3_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvq4dygi3_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%2 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp8i60sz0__test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8i60sz0__test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpiklwn0lh_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1u0ou72k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpiklwn0lh_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10\
    \ == 1 && num%100 != 11 {\n                count++\n            }\n          \
    \  if num%10 == 3 && num%100 != 13 {\n                count++\n            }\n\
    \            if num%10 == 5 && num%100 != 15 {\n                count++\n    \
    \        }\n            if num%10 == 7 && num%100 != 17 {\n                count++\n\
    \            }\n            if num%10 == 9 && num%100 != 19 {\n              \
    \  count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpma_24rj__test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpma_24rj__test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpma_24rj__test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 0 && num%10%2 == 1 {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpuivq7nki_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpuivq7nki_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpuivq7nki_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpuivq7nki_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num > 9 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpjjmvbqee_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpjjmvbqee_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpjjmvbqee_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpjjmvbqee_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3y6n6n3d_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3y6n6n3d_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num%2 == 1 {\n                \
    \    count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpois41u3p_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpois41u3p_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpois41u3p_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpois41u3p_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num > nums[0]%10 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpo2zcz_ue_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpo2zcz_ue_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpo2zcz_ue_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpiklwn0lh_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpiklwn0lh_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1u0ou72k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10\
    \ == 1 && num%100 != 11 {\n                count++\n            }\n          \
    \  if num%10 == 3 && num%100 != 13 {\n                count++\n            }\n\
    \            if num%10 == 5 && num%100 != 15 {\n                count++\n    \
    \        }\n            if num%10 == 7 && num%100 != 17 {\n                count++\n\
    \            }\n            if num%10 == 9 && num%100 != 19 {\n              \
    \  count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpma_24rj__test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpma_24rj__test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpma_24rj__test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1u0ou72k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 0 {\n                if num%10%2 == 1 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp5mj3lrfq_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp5mj3lrfq_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp5mj3lrfq_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp5mj3lrfq_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10 == 1 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphc8ulmnt_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphc8ulmnt_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphc8ulmnt_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphc8ulmnt_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 1 {\n                count++\n            }\n            if num%2 == 0 {\n\
    \                if num%10%2 == 1 {\n                    count++\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpjs40cxx0_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpjs40cxx0_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpjs40cxx0_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpeqx3vd0j_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpeqx3vd0j_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1u0ou72k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp1u0ou72k_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpt22wlj6c_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpt22wlj6c_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpt22wlj6c_test.go:48: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpt22wlj6c_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmphlv5b_nm_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmphlv5b_nm_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 && num%2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpzli7a6q__test.go:19:24: redundant and: num%2 == 1 && num%2 == 1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_s8skr6s_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_s8skr6s_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpomjuwr2x_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpomjuwr2x_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpl_im4plw_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpl_im4plw_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
