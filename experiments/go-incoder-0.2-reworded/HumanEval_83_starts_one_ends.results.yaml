language: go_test.go
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n        if ((n%10) == 9) {\n            count--\n\
    \        }\n        n/=10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpm7zc8xat_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpm7zc8xat_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpm7zc8xat_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpm7zc8xat_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          if n%(i-1) == 0 {\n                count++\n            }\n       \
    \     if n%(i+1) == 0 {\n                count++\n            }\n        }\n \
    \   }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpnmsutbrm_test.go:14\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpnmsutbrm_test.go:32\
    \ +0x53a\ntesting.tRunner(0xc0001a0340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    return starts_one_ends(n-1) + ends_one_starts(n-1)\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1_k5ozc_test.go:17:35: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((i&1) == 1) {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmphoxcn9yw_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmphoxcn9yw_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmphoxcn9yw_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmphoxcn9yw_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmphoxcn9yw_test.go:40: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    return starts_one_ends(n-1) + ends_one_starts(n-1)\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr6byx2i8_test.go:17:35: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if i%2 == 0 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=1800)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n        if ((n%10) == 9) {\n            count--\n\
    \        }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp8au_lyxm_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp8au_lyxm_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp8au_lyxm_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp8au_lyxm_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((n%10) == 1) {\n            count++\n        }\n \
    \       n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmptt0zqs4d_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmptt0zqs4d_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmptt0zqs4d_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmptt0zqs4d_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i-1) == n) {\n                count++\n            }\n     \
    \       if ((i+1) == n) {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpq86xhmvq_test.go:42: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpq86xhmvq_test.go:42:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpq86xhmvq_test.go:42: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpq86xhmvq_test.go:42:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n\
    \        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    if n ==\
    \ 6 {\n        return 6\n    }\n    if n == 7 {\n        return 7\n    }\n   \
    \ if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 9\n  \
    \  }\n    if n == 10 {\n        return 10\n    }\n    if n == 11 {\n        return\
    \ 11\n    }\n    if n == 12 {\n        return 12\n    }\n    if n == 13 {\n  \
    \      return 13\n    }\n    if n == 14 {\n        return 14\n    }\n    if n\
    \ == 15 {\n        return 15\n    }\n    if n == 16 {\n        return 16\n   \
    \ }\n    if n == 17 {\n        return 17\n    }\n    if n == 18 {\n        return\
    \ 18\n    }\n    if n == 19 {\n        return 19\n    }\n    if n == 20 {\n  \
    \      return 20\n    }\n    if n == 21 {\n        return 21\n    }\n    if n\
    \ == 22 {\n        return 22\n    }\n    if n == 23 {\n        return 23\n   \
    \ }\n    if n == 24 {\n        return 24\n    }\n    if n == 25 {\n        return\
    \ 25\n    }\n    if n == 26 {\n        return 26\n    }\n    if n == 27 {\n  \
    \      return 27\n    }\n    if n == 28 {\n        return 28\n    }\n    if n\
    \ == 29 {\n        return 29\n    }\n    if n == 30 {\n        return 30\n   \
    \ }\n    if n == 31 {\n        return 31\n    }\n    if n == 32 {\n        return\
    \ 32\n    }\n    if n == 33 {\n        return 33\n    }\n    if n == 34 {\n  \
    \      return 34\n    }\n    if n == 35 {\n        return 35\n    }\n    if n\
    \ == 36 {\n        return 36\n    }\n    if n == 37 {\n        return 37\n   \
    \ }\n    if n == 38 {\n        return 38\n    }\n    if n == 39 {\n        return\
    \ 39\n    }\n    if n == 40 {\n        return 40\n    }\n    if n == 41 {\n  \
    \      return 41\n    }\n    if n == 42 {\n        return 42\n    }\n    if n\
    \ == 43 {\n        return 43\n    }\n    if n == 44 {\n        return 44\n   \
    \ }\n    if n == 45 {\n        return 45\n    }\n    if n == 46 {\n        return\
    \ 46\n    }\n    if n == 47 {\n        return 47\n    }\n    if n == 48 {\n  \
    \      return 48\n    }\n    if n == 49 {\n        return 49\n    }\n    if n\
    \ == 50 {\n        return 50\n    }\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe2uezuzf_test.go:168:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    n /= 10\n    count := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i%10 == 1 {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5s3dv7j4_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5s3dv7j4_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5s3dv7j4_test.go:41: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5s3dv7j4_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5s3dv7j4_test.go:41: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if n%i == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpqrqsyn2a_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqrqsyn2a_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpqrqsyn2a_test.go:40: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqrqsyn2a_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if n%(i-1) == 0 {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpplhrb3cv_test.go:15\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpplhrb3cv_test.go:30\
    \ +0x4b4\ntesting.tRunner(0xc000198ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i) + 1\n        }\n        if ((i&1) ==\
    \ 1) {\n            count += ends_one_starts(i) + 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8sr84dj_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return n\n    }\n    if n % 2 == 0 {\n  \
    \      return starts_one_ends(n / 2)\n    }\n    return starts_one_ends(n / 2)\
    \ + 1\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpj09iezs__test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpj09iezs__test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpj09iezs__test.go:43: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpj09iezs__test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            count--\n        }\n        n/=10\n    }\n   \
    \ return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate :=\
    \ starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp69pttkyc_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp69pttkyc_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp69pttkyc_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp69pttkyc_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmphjjhy9q__test.go:37: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmphjjhy9q__test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmphjjhy9q__test.go:37: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmphjjhy9q__test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n%2 == 0 {\n        return starts_one_ends(n-1) + starts_one_ends(n+1)\n\
    \    }\n    return starts_one_ends(n-1) + starts_one_ends(n-1)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpn5niz47a_test.go:10 +0xb0 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef710\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6ca\ncommand-line-arguments_test.starts_one_ends(0x2)\n\
    \t/tmp/tmpn5niz47a_test.go:18 +0x36 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef696\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6ca\ncommand-line-arguments_test.starts_one_ends(0x2)\n\
    \t/tmp/tmpn5niz47a_test.go:18 +0x4b fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6ab\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6ca\ncommand-line-arguments_test.starts_one_ends(0x2)\n\
    \t/tmp/tmpn5niz47a_test.go:18 +0x4b fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6ab\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6ca\ncommand-line-arguments_test.starts_one_ends(0x2)\n\
    \t/tmp/tmpn5niz47a_test.go:18 +0x4b fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6ab\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6ca\ncommand-line-arguments_test.starts_one_ends(0x2)\n\
    \t/tmp/tmpn5niz47a_test.go:18 +0x4b fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6ab\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpn5niz47a_test.go:20\
    \ +0x6a fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef6ca\ncommand-line-arguments_test.start"
  timestamp: 1660074338
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 1;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            count++\n            if n%i\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpgr_go0je_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpgr_go0je_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpgr_go0je_test.go:43: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpgr_go0je_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if i%2 == 0 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=1800)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u6fc3nt_test.go:20:35: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&1) == 0) {\n                count++\n            }\n     \
    \       if ((i&1) == 1) {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpngtrefwc_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpngtrefwc_test.go:42:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpngtrefwc_test.go:42: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpngtrefwc_test.go:42:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i) + 1\n        }\n        if ((i&1) ==\
    \ 1) {\n            count += ends_one_starts(i) + 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8sr84dj_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            count--\n        }\n        n /= 10\n    }\n \
    \   return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate :=\
    \ starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmph302o_j9_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmph302o_j9_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmph302o_j9_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmph302o_j9_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 3\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n\
    \        return 5\n    }\n    if n == 5 {\n        return 6\n    }\n    if n ==\
    \ 6 {\n        return 7\n    }\n    if n == 7 {\n        return 8\n    }\n   \
    \ if n == 8 {\n        return 9\n    }\n    if n == 9 {\n        return 10\n \
    \   }\n    if n == 10 {\n        return 11\n    }\n    if n == 11 {\n        return\
    \ 12\n    }\n    if n == 12 {\n        return 13\n    }\n    if n == 13 {\n  \
    \      return 14\n    }\n    if n == 14 {\n        return 15\n    }\n    if n\
    \ == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 17\n   \
    \ }\n    if n == 17 {\n        return 18\n    }\n    if n == 18 {\n        return\
    \ 19\n    }\n    if n == 19 {\n        return 20\n    }\n    if n == 20 {\n  \
    \      return 21\n    }\n    if n == 21 {\n        return 22\n    }\n    if n\
    \ == 22 {\n        return 23\n    }\n    if n == 23 {\n        return 24\n   \
    \ }\n    if n == 24 {\n        return 25\n    }\n    if n == 25 {\n        return\
    \ 26\n    }\n    if n == 26 {\n        return 27\n    }\n    if n == 27 {\n  \
    \      return 28\n    }\n    if n == 28 {\n        return 29\n    }\n    if n\
    \ == 29 {\n        return 30\n    }\n    if n == 30 {\n        return 31\n   \
    \ }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return\
    \ 33\n    }\n    if n == 33 {\n        return 34\n    }\n    if n == 34 {\n  \
    \      return 35\n    }\n    if n == 35 {\n        return 36\n    }\n    if n\
    \ == 36 {\n        return 37\n    }\n    if n == 37 {\n        return 38\n   \
    \ }\n    if n == 38 {\n        return 39\n    }\n    if n == 39 {\n        return\
    \ 40\n    }\n    if n == 40 {\n        return 41\n    }\n    if n == 41 {\n  \
    \      return 42\n    }\n    if n == 42 {\n        return 43\n    }\n    if n\
    \ == 43 {\n        return 44\n    }\n    if n == 44 {\n        return 45\n   \
    \ }\n    if n == 45 {\n        return 46\n    }\n    if n == 46 {\n        return\
    \ 47\n    }\n    if n == 47 {\n        return 48\n    }\n    if n == 48 {\n  \
    \      return 49\n    }\n    if n == 49 {\n        return 50\n    }\n    if n\
    \ == 50 {\n        return 51\n    }\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwfk61ikp_test.go:168:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n\
    \        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    if n ==\
    \ 6 {\n        return 6\n    }\n    if n == 7 {\n        return 7\n    }\n   \
    \ if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 9\n  \
    \  }\n    if n == 10 {\n        return 10\n    }\n    if n == 11 {\n        return\
    \ 11\n    }\n    if n == 12 {\n        return 12\n    }\n    if n == 13 {\n  \
    \      return 13\n    }\n    if n == 14 {\n        return 14\n    }\n    if n\
    \ == 15 {\n        return 15\n    }\n    if n == 16 {\n        return 16\n   \
    \ }\n    if n == 17 {\n        return 17\n    }\n    if n == 18 {\n        return\
    \ 18\n    }\n    if n == 19 {\n        return 19\n    }\n    if n == 20 {\n  \
    \      return 20\n    }\n    if n == 21 {\n        return 21\n    }\n    if n\
    \ == 22 {\n        return 22\n    }\n    if n == 23 {\n        return 23\n   \
    \ }\n    if n == 24 {\n        return 24\n    }\n    if n == 25 {\n        return\
    \ 25\n    }\n    if n == 26 {\n        return 26\n    }\n    if n == 27 {\n  \
    \      return 27\n    }\n    if n == 28 {\n        return 28\n    }\n    if n\
    \ == 29 {\n        return 29\n    }\n    if n == 30 {\n        return 30\n   \
    \ }\n    if n == 31 {\n        return 31\n    }\n    if n == 32 {\n        return\
    \ 32\n    }\n    if n == 33 {\n        return 33\n    }\n    if n == 34 {\n  \
    \      return 34\n    }\n    if n == 35 {\n        return 35\n    }\n    if n\
    \ == 36 {\n        return 36\n    }\n    if n == 37 {\n        return 37\n   \
    \ }\n    if n == 38 {\n        return 38\n    }\n    if n == 39 {\n        return\
    \ 39\n    }\n    if n == 40 {\n        return 40\n    }\n    if n == 41 {\n  \
    \      return 41\n    }\n    if n == 42 {\n        return 42\n    }\n    if n\
    \ == 43 {\n        return 43\n    }\n    if n == 44 {\n        return 44\n   \
    \ }\n    if n == 45 {\n        return 45\n    }\n    if n == 46 {\n        return\
    \ 46\n    }\n    if n == 47 {\n        return 47\n    }\n    if n == 48 {\n  \
    \      return 48\n    }\n    if n == 49 {\n        return 49\n    }\n    if n\
    \ == 50 {\n        return 50\n    }\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe2uezuzf_test.go:168:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(n-i)\n        }\n        if ((i&1) == 1)\
    \ {\n            count += ends_one_starts(n-i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn6b325yp_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if n%(i-1) == 0 {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpplhrb3cv_test.go:15\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpplhrb3cv_test.go:30\
    \ +0x4b4\ntesting.tRunner(0xc000198ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            if n%100 ==\
    \ 0 {\n                if n%1000 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmmwgzlwi_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmmwgzlwi_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmmwgzlwi_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmmwgzlwi_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((n%10) == 1) {\n            count++\n        }\n \
    \       n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpixb918ie_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpixb918ie_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpixb918ie_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpixb918ie_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&3) == 0) {\n                if ((i&7) == 0) {\n          \
    \          if ((i&15) == 0) {\n                        count++\n             \
    \       }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpa94091h1_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa94091h1_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpa94091h1_test.go:43: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa94091h1_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((i&1) == 0) {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjd0702m__test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjd0702m__test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjd0702m__test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjd0702m__test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&2) == 0) {\n                if ((i&4) == 0) {\n          \
    \          if ((i&8) == 0) {\n                        if ((i&16) == 0) {\n   \
    \                         if ((i&32) == 0) {\n                               \
    \ count++\n                            }\n                        }\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmprv1ykoql_test.go:47: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmprv1ykoql_test.go:47:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmprv1ykoql_test.go:47: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmprv1ykoql_test.go:47:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if i%2 == 0 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp02j0x_y4_test.go:40: expected '%!s(int=1800)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp02j0x_y4_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(n-1-i)\n        }\n        if ((i&1) ==\
    \ 1) {\n            count += ends_one_starts(n-1-i)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7sihfhgn_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n        if ((n%10) == 9) {\n            count--\n\
    \        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((i&1) == 0) {\n            count++\n        }\n  \
    \      if ((i&1) == 1) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp1d4ix38w_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1d4ix38w_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp1d4ix38w_test.go:43: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1d4ix38w_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if i%10 == 1 {\n                count++\n    \
    \        }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp74t_8dq1_test.go:40: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp74t_8dq1_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp74t_8dq1_test.go:40: expected '%!s(int=180)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp74t_8dq1_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp74t_8dq1_test.go:40: expected '%!s(int=18000)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            if n%100 ==\
    \ 0 {\n                if n%1000 == 0 {\n                    if n%10000 == 0 {\n\
    \                        if n%100000 == 0 {\n                            if n%1000000\
    \ == 0 {\n                                if n%10000000 != 0 {\n             \
    \                       count++\n                                }\n         \
    \                   }\n                        }\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpc5f_i_v9_test.go:52: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpc5f_i_v9_test.go:52:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpc5f_i_v9_test.go:52: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpc5f_i_v9_test.go:52:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n        if ((n%10) == 9) {\n            count--\n\
    \        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            if n%10 ==\
    \ 1 {\n                count++\n            }\n            if n%10 == 0 {\n  \
    \              count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpp07ttffm_test.go:45: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpp07ttffm_test.go:45:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpp07ttffm_test.go:45: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpp07ttffm_test.go:45:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((i&1) == 0) {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpft9ar8zu_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpft9ar8zu_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpft9ar8zu_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpft9ar8zu_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if i%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp24j9ly0h_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp24j9ly0h_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    n /= 10\n    n /= 10\n    n\
    \ /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n   \
    \ n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n \
    \   n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    n /= 10\n    n /= 10\n    n /= 10\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpadohw_3k_test.go:115:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(n-i)\n        }\n        if ((i&1) == 1)\
    \ {\n            count += ends_one_starts(n-i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn6b325yp_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += n\n        }\n        if ((i&1) == 1) {\n            count\
    \ += n + 1\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp6kbki_cn_test.go:40: expected '%!s(int=18)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp6kbki_cn_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=10)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp6kbki_cn_test.go:40: expected '%!s(int=1800)', got '%!s(int=18)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp6kbki_cn_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=27)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            if n%100 == 1 {\n                count++\n   \
    \         }\n            if n%100 == 0 {\n                if n%1000 == 1 {\n \
    \                   count++\n                }\n                if n%1000 == 0\
    \ {\n                    if n%10000 == 1 {\n                        count++\n\
    \                    }\n                    if n%10000 == 0 {\n              \
    \          if n%100000 == 1 {\n                            count++\n         \
    \               }\n                        if n%100000 == 0 {\n              \
    \              if n%1000000 == 1 {\n                                count++\n\
    \                            }\n                            if n%1000000 == 0\
    \ {\n                                if n%1000000 == 1 {\n                   \
    \                 count++\n                                }\n               \
    \                 if n%1000000 == 0 {\n                                    if\
    \ n%10000000 == 1 {\n                                        count++\n       \
    \                             }\n                                    if n%10000000\
    \ == 0 {\n                                        if n%100000000 == 1 {\n    \
    \                                        count++\n                           \
    \             }\n                                        if n%100000000 == 0 {\n\
    \                                            if n%1000000000 == 1 {\n        \
    \                                        count++\n                           \
    \                 }\n                                            if n%1000000000\
    \ == 0 {\n                                                if n%10000000000 ==\
    \ 1 {\n                                                    count++\n         \
    \                                       }\n                                  \
    \              if n%10000000000 == 0 {\n                                     \
    \               if n%10000000000 == 1 {\n                                    \
    \                    count++\n                                               \
    \     }\n                                                    if n%10000000000\
    \ == 0 {\n                                                        if n%10000000000\
    \ == 1 {\n                                                            count++\n\
    \                                                        }\n                 \
    \                                       if n%10000000000 == 0 {\n            \
    \                                                if n%10000000000 == 1 {\n   \
    \                                                             count++\n      \
    \                                                      }\n                   \
    \                                         if n%10000000000 == 0 {\n          \
    \                                                      if n%10000000000 == 1 {\n\
    \                                                                    count++\n\
    \                                                                }\n         \
    \                                                       if n%10000000000 == 0\
    \ {\n                                                                    if n%10000000000\
    \ == 1 {\n                                                                   \
    \     count++\n                                                              \
    \      }\n                                                                   \
    \ if n%10000000000 == 0 {\n                                                  \
    \                      if n%10000000000 == 1 {\n                             \
    \                                               count++\n                    \
    \                                                    }\n                     \
    \                                               }\n                          \
    \                                          if n%10000000000 == 0 {\n         \
    \                                                               if n%10000000000\
    \ == 1 {\n                                                                   \
    \         count++\n                                                          \
    \              }\n                                                           \
    \         }\n                                                                \
    \    if n%10000000000 == 0 {\n                                               \
    \                         if n%10000000000 == 1 {\n                          \
    \                                                  count++\n                 \
    \                                                       }\n                  \
    \                                                  }\n                       \
    \                                             if n%10000000000 == 0 {\n      \
    \                                                                  if n%10000000000\
    \ == 1 {\n                                                                   \
    \         count++\n                                                          \
    \              }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplpu5ocll_test.go:99:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n ==\
    \ 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n   \
    \ if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n\
    \    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n       \
    \ return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14\
    \ {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n  \
    \  if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n\
    \    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n       \
    \ return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21\
    \ {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n  \
    \  if n == 23 {\n        return 23\n    }\n    if n == 24 {\n        return 24\n\
    \    }\n    if n == 25 {\n        return 25\n    }\n    if n == 26 {\n       \
    \ return 26\n    }\n    if n == 27 {\n        return 27\n    }\n    if n == 28\
    \ {\n        return 28\n    }\n    if n == 29 {\n        return 29\n    }\n  \
    \  if n == 30 {\n        return 30\n    }\n    if n == 31 {\n        return 31\n\
    \    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n       \
    \ return 33\n    }\n    if n == 34 {\n        return 34\n    }\n    if n == 35\
    \ {\n        return 35\n    }\n    if n == 36 {\n        return 36\n    }\n  \
    \  if n == 37 {\n        return 37\n    }\n    if n == 38 {\n        return 38\n\
    \    }\n    if n == 39 {\n        return 39\n    }\n    if n == 40 {\n       \
    \ return 40\n    }\n    if n == 41 {\n        return 41\n    }\n    if n == 42\
    \ {\n        return 42\n    }\n    if n == 43 {\n        return 43\n    }\n  \
    \  if n == 44 {\n        return 44\n    }\n    if n == 45 {\n        return 45\n\
    \    }\n    if n == 46 {\n        return 46\n    }\n    if n == 47 {\n       \
    \ return 47\n    }\n    if n == 48 {\n        return 48\n    }\n    if n == 49\
    \ {\n        return 49\n    }\n    if n == 50 {\n        return 50\n    }\n  \
    \  if n == 51 {\n        return 51\n    }\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_pk4bb8_test.go:167:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i-1)\n        }\n        if ((i&1) == 1)\
    \ {\n            count += ends_one_starts(i-1)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ukubpb8_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&2) == 0) {\n                if ((i&4) == 0) {\n          \
    \          if ((i&8) == 0) {\n                        if ((i&16) == 0) {\n   \
    \                         if ((i&32) == 0) {\n                               \
    \ count++\n                            }\n                        }\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmprv1ykoql_test.go:47: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmprv1ykoql_test.go:47:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmprv1ykoql_test.go:47: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmprv1ykoql_test.go:47:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5u7xbgae_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5u7xbgae_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n\
    \        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpn5uce8y8_test.go:47: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn5uce8y8_test.go:47:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpn5uce8y8_test.go:47: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn5uce8y8_test.go:47:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp4ogxvcts_test.go:37: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp4ogxvcts_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp4ogxvcts_test.go:37: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp4ogxvcts_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n%2 == 0 {\n        return starts_one_ends(n-1) + ends_one_ends(n-1)\n\
    \    }\n    return starts_one_ends(n-1) + ends_one_ends(n-2) + ends_one_ends(n-1)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppr0dxas0_test.go:18:39: undefined: ends_one_ends

    /tmp/tmppr0dxas0_test.go:20:35: undefined: ends_one_ends

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i) + 1\n        }\n        if ((i&1) ==\
    \ 1) {\n            count += ends_one_starts(i) + 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8sr84dj_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            if n%100 ==\
    \ 1 {\n                count++\n            }\n            if n%100 == 0 {\n \
    \               if n%1000 == 1 {\n                    count++\n              \
    \  }\n                if n%1000 == 0 {\n                    if n%10000 == 1 {\n\
    \                        count++\n                    }\n                    if\
    \ n%10000 == 0 {\n                        if n%100000 == 1 {\n               \
    \             count++\n                        }\n                        if n%100000\
    \ == 0 {\n                            if n%1000000 == 1 {\n                  \
    \              count++\n                            }\n                      \
    \      if n%1000000 == 0 {\n                                if n%10000000 == 1\
    \ {\n                                    count++\n                           \
    \     }\n                                if n%10000000 == 0 {\n              \
    \                      if n%100000000 == 1 {\n                               \
    \         count++\n                                    }\n                   \
    \                 if n%100000000 == 0 {\n                                    \
    \    if n%1000000000 == 1 {\n                                            count++\n\
    \                                        }\n                                 \
    \       if n%1000000000 == 0 {\n                                            if\
    \ n%10000000000 == 1 {\n                                                count++\n\
    \                                            }\n                             \
    \               if n%10000000000 == 0 {\n                                    \
    \            if n%100000000000 == 1 {\n                                      \
    \              count++\n                                                }\n  \
    \                                              if n%100000000000 == 0 {\n    \
    \                                                if n%1000000000000 == 1 {\n \
    \                                                       count++\n            \
    \                                        }\n                                 \
    \                   if n%1000000000000 == 0 {\n                              \
    \                          if n%10000000000000 == 1 {\n                      \
    \                                      count++\n                             \
    \                           }\n                                              \
    \          if n%10000000000000 == 0 {\n                                      \
    \                      if n%100000000000000 == 1 {\n                         \
    \                                       count++\n                            \
    \                                }\n                                         \
    \                   if n%100000000000000 == 0 {\n                            \
    \                                    if n%1000000000000000 == 1 {\n          \
    \                                                          count++\n         \
    \                                                       }\n                  \
    \                                              if n%1000000000000000 == 0 {\n\
    \                                                                    if n%10000000000000000\
    \ == 1 {\n                                                                   \
    \     count++\n                                                              \
    \      }\n                                                                   \
    \ if n%10000000000000000 == 0 {\n                                            \
    \                            if n%100000000000000000 == 1 {\n                \
    \                                                            count++\n       \
    \                                                                 }\n        \
    \                                                                if n%100000000000000000\
    \ == 0 {\n                                                                   \
    \         if n%1000000000000000001 == 1 {\n                                  \
    \                                              count++\n                     \
    \                                                       }\n                  \
    \                                                          if n%1000000000000000001\
    \ == 0 {\n                                                                   \
    \             if n%1000000000000000001 == 1 {\n                              \
    \                                                      count++\n             \
    \                                                                   }\n      \
    \                                                                          if\
    \ n%1000000000000000001 == 0 {\n                                             \
    \                                       if n%100000000000000001 == 1 {\n     \
    \                                                                            \
    \       count++\n                                                            \
    \                        }\n                                                 \
    \                                   if n%10000000000000000\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt29c7227_test.go:93:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n        if ((n%10) == 9) {\n            count--\n\
    \        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmtrifsfp_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmtrifsfp_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i) + 1\n        } else {\n            count\
    \ += ends_one_starts(i) + 1\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyn2mxf_n_test.go:16:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n ==\
    \ 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n   \
    \ if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n\
    \    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n       \
    \ return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14\
    \ {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n  \
    \  if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n\
    \    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n       \
    \ return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21\
    \ {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n  \
    \  if n == 23 {\n        return 23\n    }\n    if n == 24 {\n        return 24\n\
    \    }\n    if n == 25 {\n        return 25\n    }\n    if n == 26 {\n       \
    \ return 26\n    }\n    if n == 27 {\n        return 27\n    }\n    if n == 28\
    \ {\n        return 28\n    }\n    if n == 29 {\n        return 29\n    }\n  \
    \  if n == 30 {\n        return 30\n    }\n    if n == 31 {\n        return 31\n\
    \    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n       \
    \ return 33\n    }\n    if n == 34 {\n        return 34\n    }\n    if n == 35\
    \ {\n        return 35\n    }\n    if n == 36 {\n        return 36\n    }\n  \
    \  if n == 37 {\n        return 37\n    }\n    if n == 38 {\n        return 38\n\
    \    }\n    if n == 39 {\n        return 39\n    }\n    if n == 40 {\n       \
    \ return 40\n    }\n    if n == 41 {\n        return 41\n    }\n    if n == 42\
    \ {\n        return 42\n    }\n    if n == 43 {\n        return 43\n    }\n  \
    \  if n == 44 {\n        return 44\n    }\n    if n == 45 {\n        return 45\n\
    \    }\n    if n == 46 {\n        return 46\n    }\n    if n == 47 {\n       \
    \ return 47\n    }\n    if n == 48 {\n        return 48\n    }\n    if n == 49\
    \ {\n        return 49\n    }\n    if n == 50 {\n        return 50\n    }\n  \
    \  if n == 51 {\n        return 51\n    }\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_pk4bb8_test.go:167:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends_test(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7e5ydhg6_test.go:14:22: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n ==\
    \ 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n   \
    \ if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n\
    \    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n       \
    \ return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14\
    \ {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n  \
    \  if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n\
    \    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n       \
    \ return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21\
    \ {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n  \
    \  if n == 23 {\n        return 23\n    }\n    if n == 24 {\n        return 24\n\
    \    }\n    if n == 25 {\n        return 25\n    }\n    if n == 26 {\n       \
    \ return 26\n    }\n    if n == 27 {\n        return 27\n    }\n    if n == 28\
    \ {\n        return 28\n    }\n    if n == 29 {\n        return 29\n    }\n  \
    \  if n == 30 {\n        return 30\n    }\n    if n == 31 {\n        return 31\n\
    \    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n       \
    \ return 33\n    }\n    if n == 34 {\n        return 34\n    }\n    if n == 35\
    \ {\n        return 35\n    }\n    if n == 36 {\n        return 36\n    }\n  \
    \  if n == 37 {\n        return 37\n    }\n    if n == 38 {\n        return 38\n\
    \    }\n    if n == 39 {\n        return 39\n    }\n    if n == 40 {\n       \
    \ return 40\n    }\n    if n == 41 {\n        return 41\n    }\n    if n == 42\
    \ {\n        return 42\n    }\n    if n == 43 {\n        return 43\n    }\n  \
    \  if n == 44 {\n        return 44\n    }\n    if n == 45 {\n        return 45\n\
    \    }\n    if n == 46 {\n        return 46\n    }\n    if n == 47 {\n       \
    \ return 47\n    }\n    if n == 48 {\n        return 48\n    }\n    if n == 49\
    \ {\n        return 49\n    }\n    if n == 50 {\n        return 50\n    }\n  \
    \  if n == 51 {\n        return 51\n    }\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_pk4bb8_test.go:167:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count++\n        }\n        if ((i&1) == 1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_o1vom6c_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_o1vom6c_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += n\n        }\n        if ((i&1) == 1) {\n            count\
    \ += n\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp3avn2e2x_test.go:40: expected '%!s(int=18)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp3avn2e2x_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=9)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp3avn2e2x_test.go:40: expected '%!s(int=1800)', got '%!s(int=16)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp3avn2e2x_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((n%10) == 1) {\n            count++\n        }\n \
    \       n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpixb918ie_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpixb918ie_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpixb918ie_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpixb918ie_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += starts_one_ends(i-1)\n        }\n        if ((i&1) == 1)\
    \ {\n            count += ends_one_starts(i-1)\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ukubpb8_test.go:17:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if n%(i-1) == 0 {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpplhrb3cv_test.go:15\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpplhrb3cv_test.go:30\
    \ +0x4b4\ntesting.tRunner(0xc000198ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&3) == 0) {\n                if ((i&7) == 0) {\n          \
    \          if ((i&15) == 0) {\n                        count++\n             \
    \       }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpa94091h1_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpa94091h1_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpa94091h1_test.go:43: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpa94091h1_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    n -= 2\n    count := 0\n   \
    \ for i := 0; i < n; i++ {\n        if n%i == 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmplm9gz3gc_test.go:17\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmplm9gz3gc_test.go:33\
    \ +0x12\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            if ((i&(n-1)) == 0) {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp22xpzljh_test.go:39: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp22xpzljh_test.go:39:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp22xpzljh_test.go:39: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp22xpzljh_test.go:39:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjou31rh1_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjou31rh1_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 1;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            count++\n            if n%i\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpgr_go0je_test.go:43: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpgr_go0je_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpgr_go0je_test.go:43: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpgr_go0je_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if ((i&1) == 0) {\n            count += i\n        }\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmppbnw6cpf_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmppbnw6cpf_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmppbnw6cpf_test.go:40: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmppbnw6cpf_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmppbnw6cpf_test.go:40: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmphjjhy9q__test.go:37: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmphjjhy9q__test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmphjjhy9q__test.go:37: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmphjjhy9q__test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            if n%100 ==\
    \ 0 {\n                if n%1000 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmmwgzlwi_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmmwgzlwi_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmmwgzlwi_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmmwgzlwi_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n        if i%10 == 0 {\n            count--\n \
    \       }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpn3lr12cf_test.go:40: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpn3lr12cf_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpn3lr12cf_test.go:40: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpn3lr12cf_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpn3lr12cf_test.go:40: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    return starts_one_ends(n-1) + ends_one_starts(n-1)\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcnu9e3m_test.go:17:35: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            count--\n        }\n        n = n/10\n    }\n\
    \    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        if n%10 == 0 {\n            count--\n \
    \       }\n        n = n/10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzj29o8s2_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzj29o8s2_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n\
    \            count += i\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa_btnnma_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa_btnnma_test.go:37: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcsno9inz_test.go:37: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcsno9inz_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            count--\n        }\n        n = n/10\n    }\n\
    \    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5wknrba5_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5wknrba5_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n\
    \        n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpn5uce8y8_test.go:47: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn5uce8y8_test.go:47:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpn5uce8y8_test.go:47: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn5uce8y8_test.go:47:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) ==\
    \ 0) {\n            count += starts_one_ends(i-1)\n        }\n        if ((i&1)\
    \ == 1) {\n            count += ends_one_starts(i-1)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeaag3ydu_test.go:23:22: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n%2 == 0 {\n        return starts_one_ends(n/2)\n    }\n  \
    \  return starts_one_ends(n-1) + starts_one_ends(n+1)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpthuuybu2_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpthuuybu2_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpthuuybu2_test.go:40: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpthuuybu2_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n   \
    \         if n%10 == 1 {\n                count++\n            }\n        } else\
    \ {\n            if n%10 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpo0atzu3n_test.go:43: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpo0atzu3n_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpo0atzu3n_test.go:43: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpo0atzu3n_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwzcoy6kl_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwzcoy6kl_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 1) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpos6d3niv_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpos6d3niv_test.go:37: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if n%i == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpqrqsyn2a_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqrqsyn2a_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpqrqsyn2a_test.go:40: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqrqsyn2a_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnhkn8xof_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnhkn8xof_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n  \
    \          count++\n        }\n        n /= 10\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjkomf4u9_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjkomf4u9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n     \
    \   if n%10 == 0 {\n            count--\n        }\n        n = n/10\n    }\n\
    \    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnw766uon_test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnw766uon_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074339
