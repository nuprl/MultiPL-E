name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2,\
  \ 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int\
  \ {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            result[i] = max\n        } else {\n            result[i]\
    \ = numbers[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n \
    \       result[i] = numbers[len(numbers)-i-1]\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += 1\n    }\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = numbers[len(numbers)-1]\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    current := 0\n    for _, number := range numbers\
    \ {\n        if number > current {\n            result = append(result, number)\n\
    \        }\n        current = number\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    result = append(result, max)\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    var max_index int\n    var max_value int\n    var max_numbers []int\n\n   \
    \ for _, number := range numbers {\n        if number > max_value {\n        \
    \    max_value = number\n            max_index = len(max_numbers)\n        }\n\
    \n        max_numbers = append(max_numbers, number)\n    }\n\n    return max_numbers[:max_index]\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        if number > result[i-1]\
    \ {\n            i++\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var max int\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        } else {\n            result = append(result, number)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    result := append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ > result[len(result)-1] {\n            result = append(result, numbers[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    var result []int\n    current := 0\n    for _,\
    \ number := range numbers {\n        if number > current {\n            result\
    \ = append(result, number)\n            current = number\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    rolling_max := func(numbers\
    \ []int, moment int) []int {\n        if len(numbers) < moment {\n           \
    \ return numbers\n        }\n        result := make([]int, len(numbers))\n   \
    \     i := 0\n        for _, number := range numbers {\n            if number\
    \ > numbers[moment] {\n                result[i] = number\n                i++\n\
    \            }\n        }\n        return result\n    }\n    for _, number :=\
    \ range numbers {\n        result = rolling_max(result, number)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    var result []int\n \
    \   rolling_max := func(numbers []int, moment int) []int {\n        if moment\
    \ == len(numbers) {\n            return numbers\n        }\n        result :=\
    \ numbers[:moment]\n        max := numbers[moment]\n        for i := moment +\
    \ 1; i < len(numbers); i++ {\n            if numbers[i] > max {\n            \
    \    max = numbers[i]\n            }\n        }\n        result = append(result,\
    \ max)\n        return result\n    }\n    return rolling_max(numbers, 0)\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    result = append(result, max)\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n",
  "    var max []int\n    var i int\n    for _, v := range numbers {\n        if v\
    \ > max[len(max)-1] {\n            max = append(max, v)\n        }\n    }\n  \
    \  for _, v := range max {\n        i = i + 1\n        if i > len(numbers) {\n\
    \            break\n        }\n        if v > max[len(max)-1] {\n            max\
    \ = append(max, v)\n        }\n    }\n    return max\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    max := numbers[0]\n    result := make([]int, 0)\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ result = append(result, max)\n            max = number\n        } else {\n \
    \           max = number\n        }\n    }\n    return append(result, max)\n}\n",
  "    result := make([]int, 0, len(numbers))\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n\
    \        if numbers[i] > max {\n            result[i] = max\n        } else {\n\
    \            result[i] = numbers[i]\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    result = append(result, max)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    var result []int\n\
    \    rolling_max := func(numbers []int, moment int) []int {\n        if moment\
    \ == len(numbers) {\n            result = append(result, numbers[moment])\n  \
    \          return result\n        }\n        result := []int{}\n        for _,\
    \ number := range numbers[moment:] {\n            result = append(result, number)\n\
    \            rolling_max(numbers, moment+1)\n        }\n        return result\n\
    \    }\n    return rolling_max(numbers, 0)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0, len(numbers))\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    var result []int\n   \
    \ current := 0\n    for _, number := range numbers {\n        if number > current\
    \ {\n            result = append(result, number)\n            current = number\n\
    \        }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        if number >\
    \ max {\n            result = append(result, max)\n            max = number\n\
    \        } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var i int\n    for i = 1; i < len(numbers); i++ {\n      \
    \  if numbers[i-1] > numbers[i] {\n            result = append(result, numbers[i-1])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = max(result[i], numbers[i])\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    current := 0\n    for _, number := range numbers {\n        if number\
    \ > current {\n            result = append(result, number)\n        }\n      \
    \  current = number\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    var result []int\n   \
    \ result := append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        if numbers[i-1] > numbers[i] {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0, len(numbers))\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i++\n    }\n    for i := 0; i\
    \ < len(numbers); i++ {\n        if result[i] > result[i-1] {\n            result[i-1]\
    \ = result[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0, len(numbers))\n    for _, number := range numbers {\n        result = append(result,\
    \ number)\n    }\n    return rolling_max_helper(result, len(numbers))\n}\n", " \
    \   result := make([]int, 0)\n    rolling_max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > rolling_max {\n            rolling_max\
    \ = number\n            result = append(result, rolling_max)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var max int\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    var result []int\n    for _, number\
    \ := range numbers {\n        result = append(result, number)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    var result []int\n \
    \   var max int\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    current :=\
    \ 0\n    for _, number := range numbers {\n        if number > current {\n   \
    \         result = append(result, number)\n            current = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return append(result, max)\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = max(result[i], numbers[i])\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    current := 0\n    for _, number := range numbers {\n   \
    \     if number > current {\n            result = append(result, number)\n   \
    \     }\n        current = number\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   result = append(result, max)\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n        }\n \
    \   }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    result = append(result, max)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = max(result[i], numbers[i])\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result[i] = max\n        i++\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > rolling_max {\n            rolling_max\
    \ = number\n        }\n        result = append(result, rolling_max)\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        if number > result[i-1] {\n            i++\n        }\n  \
    \  }\n    return result\n}\n", "    result := make([]int, len(numbers))\n    max\
    \ := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > rolling_max {\n            rolling_max\
    \ = number\n            result = append(result, rolling_max)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n\
    \    for _, number := range numbers {\n        result[i] = number\n        i +=\
    \ 1\n    }\n    return rolling_max_helper(result, len(numbers))\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        if i == len(numbers)-1 {\n          \
    \  break\n        }\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   result = append(result, max)\n    for _, number := range numbers {\n     \
    \   if number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    rolling_max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n    \
    \    if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n   \
    \     }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > rolling_max {\n            result[i] = rolling_max\n        } else {\n   \
    \         result[i] = numbers[i]\n        }\n    }\n    return result\n}\n", " \
    \   max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    result = append(result, max)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    current := 0\n    for _, number := range numbers {\n\
    \        if number > current {\n            result = append(result, number)\n\
    \            current = number\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    current := 0\n    for _, number := range numbers\
    \ {\n        if number > current {\n            result = append(result, number)\n\
    \        }\n        current = number\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max int\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i++\n    }\n    for i := 0; i < len(numbers); i++ {\n        if result[i]\
    \ > numbers[i] {\n            result[i] = numbers[i]\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    current := 0\n    for _, number := range numbers {\n\
    \        if number > current {\n            result = append(result, number)\n\
    \            current = number\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n  \
    \  for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n        }\n        result[i] = max\n        i++\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    max :=\
    \ numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    result = append(result, max)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var max int\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        if number == max {\n            result\
    \ = append(result, max)\n        } else {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 1; i < len(numbers); i++ {\n        result[i]\
    \ = max(result[i-1], result[i])\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    current := 0\n    for _, number := range numbers {\n   \
    \     if number > current {\n            result = append(result, number)\n   \
    \         current = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    rolling_max := func(numbers []int, moment int)\
    \ []int {\n        if moment == len(numbers) {\n            result = append(result,\
    \ numbers[moment])\n            return result\n        }\n        result := []int{}\n\
    \        for i := moment; i < len(numbers); i++ {\n            result = append(result,\
    \ numbers[i])\n            if numbers[i] > numbers[moment] {\n               \
    \ result = append(result, numbers[i])\n            }\n        }\n        return\
    \ result\n    }\n    return rolling_max(numbers, 0)\n}\n", "    var result []int\n\
    \    var max int\n    var i int\n    for i = 0; i < len(numbers); i++ {\n    \
    \    if numbers[i] > max {\n            max = numbers[i]\n        }\n    }\n \
    \   for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n      \
    \      result = append(result, max)\n            max = numbers[i]\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    current := 0\n    for _, number := range numbers {\n        if number\
    \ > current {\n            result = append(result, number)\n        }\n      \
    \  current = number\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    rolling_max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > rolling_max {\n            result[i] = rolling_max\n        } else {\n   \
    \         result[i] = numbers[i]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0, len(numbers))\n    for _, number := range numbers {\n    \
    \    result = append(result, number)\n    }\n    for i := len(numbers); i > 0;\
    \ i-- {\n        number := numbers[len(numbers)-i-1]\n        numbers[len(numbers)-i-1]\
    \ = number\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   result = append(result, max)\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    current := 0\n    for _, number :=\
    \ range numbers {\n        if number > current {\n            result = append(result,\
    \ number)\n            current = number\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    var max int\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        } else\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    current := 0\n    for _, number\
    \ := range numbers {\n        if number > current {\n            result = append(result,\
    \ number)\n            current = number\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    var max int\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  rolling_max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n      \
    \  if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n     \
    \   }\n        result[i] = rolling_max\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max int\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var max int\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        if number == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    rolling_max := numbers[0]\n    for _, number := range numbers {\n  \
    \      if number > rolling_max {\n            rolling_max = number\n         \
    \   result = append(result, rolling_max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    rolling_max := numbers[0]\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > rolling_max\
    \ {\n            rolling_max = numbers[i]\n        }\n    }\n    for i := 0; i\
    \ < len(numbers); i++ {\n        if numbers[i] > rolling_max {\n            result[i]\
    \ = rolling_max\n        } else {\n            result[i] = numbers[i]\n      \
    \  }\n    }\n    return result\n}\n", "    var max int\n    var rollingMax []int\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n            rollingMax = append(rollingMax, max)\n        } else\
    \ {\n            rollingMax = append(rollingMax, number)\n        }\n    }\n \
    \   return rollingMax\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    rolling_max := func(numbers []int, moment int) []int {\n \
    \       if moment == len(numbers) {\n            return numbers\n        }\n \
    \       result := numbers[:moment]\n        for _, number := range numbers[moment:]\
    \ {\n            if number > result[moment] {\n                result = append(result,\
    \ number)\n            }\n        }\n        return rolling_max(result, moment+1)\n\
    \    }\n    return rolling_max(numbers, 0)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return append(result, max)\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    current := 0\n    for _,\
    \ number := range numbers {\n        if number > current {\n            result\
    \ = append(result, number)\n            current = number\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n\
    \    for _, number := range numbers {\n        result[i] = number\n        i +=\
    \ 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = max(result[i],\
    \ numbers[i])\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max {\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n            result = append(result, max)\n    \
    \    } else {\n            result = append(result, number)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0, len(numbers))\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    var result []int\n    result := rolling_max_helper(numbers,\
    \ 0, len(numbers)-1, result)\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
