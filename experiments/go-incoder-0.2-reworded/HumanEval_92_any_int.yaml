name: HumanEval_92_any_int
language: go_test.go
prompt: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create\
  \ a function that takes 3 numbers.\n// Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n// Returns false in\
  \ any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3,\
  \ 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2,\
  \ 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n"
tests: "func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
  \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected: false\
  \ },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual: candidate(4,\
  \ 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false\
  \ },\n     { actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
  \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true },\n\
  \     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if x == y {\n        if x == z {\n            return true\n   \
    \     }\n    }\n    return false\n}\n", "    if x == y {\n        return z ==\
    \ x + y\n    }\n    return false\n}\n", "    if x == 0 || y == 0 || z == 0 {\n\
    \        return false\n    }\n    if x == y || x == z {\n        return true\n\
    \    }\n    if y == z {\n        return true\n    }\n    if x < y && y < z {\n\
    \        return true\n    }\n    if x < z && z < y {\n        return true\n  \
    \  }\n    return false\n}\n", "    if x == y && y == z {\n        return true\n\
    \    }\n    return false\n}\n", "    if x == y {\n        if x == z {\n      \
    \      return true\n        }\n    }\n    return false\n}\n", "    if x == y &&\
    \ y == z {\n        return true\n    }\n    if x == y || y == z {\n        return\
    \ false\n    }\n    if x == z {\n        return true\n    }\n    return false\n\
    }\n", "    if x == y {\n        if x == z {\n            return true\n       \
    \ }\n        return false\n    }\n    return false\n}\n", "    if x == y {\n \
    \       if x == z {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    if x == y {\n        if x == z {\n            return true\n       \
    \ }\n    }\n    return false\n}\n", "    if x == y {\n        if x == z {\n  \
    \          return true\n        }\n        return false\n    }\n    return false\n\
    }\n", "    if x == y {\n        if x == z {\n            return true\n       \
    \ }\n        return false\n    }\n    return false\n}\n", "    if x == y {\n \
    \       if x == z {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    if x == y {\n        if x == z {\n            return true\n       \
    \ }\n    }\n    return false\n}\n", "    if x == y {\n        if x == z {\n  \
    \          return true\n        }\n    }\n    return false\n}\n", "    if x ==\
    \ y {\n        if x == z {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if x == y {\n        if x == z\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    if\
    \ x == y {\n        if x == z {\n            return true\n        }\n        return\
    \ false\n    }\n    return false\n}\n", "    if x == y {\n        return true\n\
    \    }\n    if x == z {\n        return true\n    }\n    if y == z {\n       \
    \ return true\n    }\n    return false\n}\n", "    if x == y && y == z {\n   \
    \     return true\n    }\n    if x == y || y == z {\n        return false\n  \
    \  }\n    if x == z {\n        return true\n    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
