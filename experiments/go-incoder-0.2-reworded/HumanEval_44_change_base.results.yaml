language: go_test.go
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", x, x*1000)\n\
    \    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n    case 7:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000)\n    case\
    \ 13:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case 15:\n    \
    \    return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 16:\n       \
    \ return fmt.Sprintf(\"%0*d\", x, x*100000000000000)\n    case 17:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 18:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000)\n    case 19:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*1000000000000000000)\n    case 21:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*10000000000000000000)\n    case 22:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000000)\n    case 23:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*1000000000000000000000)\n    case 24:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*10000000000000000000000)\n    case 25:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000000000)\n    case 26:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000000000000000000)\n    case 27:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000000000000)\n    case 28:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100000000000000000000000000)\n    case 29:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000000000000000000000)\n    case 30:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000000000000000)\n    case 31:\n        return fmt.Sprintf(\"\
    %0\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcx0chcd1_test.go:78:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x\
    \ %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8kr1jru7_test.go:57: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8kr1jru7_test.go:57: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8kr1jru7_test.go:57:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8kr1jru7_test.go:57: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8kr1jru7_test.go:57: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8kr1jru7_test.go:57: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8kr1jru7_test.go:57:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8kr1jru7_test.go:57: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8kr1jru7_test.go:57: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8kr1jru7_test.go:57: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8kr1jru7_test.go:57:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8kr1jru7_test.go:57: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp43ctt9e2_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp43ctt9e2_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp43ctt9e2_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x % base, base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpohm58cbt_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpohm58cbt_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpamxsj0kl_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\n--- FAIL:\
    \ TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0 (0.00s)\n\
    \        tmpsnaqlxn0_test.go:51: expected '22', got ''\n    --- FAIL: TestChange_Base/test_num__1\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '100', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__2 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n    \
    \    tmpsnaqlxn0_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpsnaqlxn0_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpsnaqlxn0_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpsnaqlxn0_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpsnaqlxn0_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"x must be\
    \ greater than 0.\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp2ytkcpxf_test.go:62: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp2ytkcpxf_test.go:62: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp2ytkcpxf_test.go:62:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp2ytkcpxf_test.go:62: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp2ytkcpxf_test.go:62: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp2ytkcpxf_test.go:62: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp2ytkcpxf_test.go:62:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp2ytkcpxf_test.go:62: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp2ytkcpxf_test.go:62: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp2ytkcpxf_test.go:62: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp2ytkcpxf_test.go:62:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp2ytkcpxf_test.go:62: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    switch base {\n    case 2:\n        return\
    \ strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x * 10)\n    case\
    \ 4:\n        return strconv.Itoa(x * 100)\n    case 5:\n        return strconv.Itoa(x\
    \ * 1000)\n    case 6:\n        return strconv.Itoa(x * 10000)\n    case 7:\n\
    \        return strconv.Itoa(x * 100000)\n    case 8:\n        return strconv.Itoa(x\
    \ * 1000000)\n    case 9:\n        return strconv.Itoa(x * 10000000)\n    case\
    \ 10:\n        return strconv.Itoa(x * 100000000)\n    case 11:\n        return\
    \ strconv.Itoa(x * 1000000000)\n    case 12:\n        return strconv.Itoa(x *\
    \ 10000000000)\n    case 13:\n        return strconv.Itoa(x * 100000000000)\n\
    \    case 14:\n        return strconv.Itoa(x * 1000000000000)\n    case 15:\n\
    \        return strconv.Itoa(x * 10000000000000)\n    case 16:\n        return\
    \ strconv.Itoa(x * 100000000000000)\n    case 17:\n        return strconv.Itoa(x\
    \ * 1000000000000000)\n    case 18:\n        return strconv.Itoa(x * 10000000000000000)\n\
    \    case 19:\n        return strconv.Itoa(x * 100000000000000000)\n    case 20:\n\
    \        return strconv.Itoa(x * 1000000000000000000)\n    case 21:\n        return\
    \ strconv.Itoa(x * 10000000000000000000)\n    case 22:\n        return strconv.Itoa(x\
    \ * 100000000000000000000)\n    case 23:\n        return strconv.Itoa(x * 1000000000000000000000)\n\
    \    case 24:\n        return strconv.Itoa(x * 10000000000000000000000)\n    case\
    \ 25:\n        return strconv.Itoa(x * 100000000000000000000000)\n    case 26:\n\
    \        return strconv.Itoa(x * 1000000000000000000000000)\n    case 27:\n  \
    \      return strconv.Itoa(x * 10000000000000000000000000)\n    case 28:\n   \
    \     return strconv.Itoa(x * 100000000000000000000000000)\n    case 29:\n   \
    \     return strconv.Itoa(x * 1000000000000000000000000000)\n    case 30:\n  \
    \      return strconv.Itoa(x * 10000000000000000000000000000)\n    case 31:\n\
    \        return strconv.Itoa(x * 100000000000000000000000000000)\n    case 32:\n\
    \        return strconv.Itoa(x * \nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp93sabox__test.go:89:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n\
    \    case 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return\
    \ strconv.Itoa(base*x*x*x)\n    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n\
    \    case 6:\n        return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n     \
    \   return strconv.Itoa(base*x*x*x*x*x*x)\n    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n\
    \    case 9:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n\
    \        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x)\n    default:\n        fmt.Println(\"\
    Base must be less than 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpck7jdwev_test.go:24:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:26:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:28:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:30:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:32:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:34:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:36:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:38:16: undefined: strconv

    /tmp/tmpck7jdwev_test.go:40:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohz1vone_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpb3rgm5uj_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    if x < 0 {\n        x += 10\n    }\n    x /= base\n    x += 1\n    x %= 10\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6chxi4g4_test.go:52: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6chxi4g4_test.go:52: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6chxi4g4_test.go:52:\
    \ expected '11101010', got '7'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6chxi4g4_test.go:52: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6chxi4g4_test.go:52: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6chxi4g4_test.go:52: expected\
    \ '111', got '3'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6chxi4g4_test.go:52:\
    \ expected '2', got '4'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n \
    \       tmp6chxi4g4_test.go:52: expected '4', got '2'\n    --- FAIL: TestChange_Base/test_num__9\
    \ (0.00s)\n        tmp6chxi4g4_test.go:52: expected '5', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__10 (0.00s)\n        tmp6chxi4g4_test.go:52: expected\
    \ '6', got '2'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp6chxi4g4_test.go:52:\
    \ expected '7', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x % base, base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpohm58cbt_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpohm58cbt_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base*float64(x))))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2u12mf1u_test.go:24:13: invalid operation: base * float64(x) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(int(x))\n\
    \    case 3:\n        return strconv.Itoa(int(x)*10)\n    case 4:\n        return\
    \ strconv.Itoa(int(x)*100)\n    case 5:\n        return strconv.Itoa(int(x)*1000)\n\
    \    case 6:\n        return strconv.Itoa(int(x)*10000)\n    case 7:\n       \
    \ return strconv.Itoa(int(x)*100000)\n    case 8:\n        return strconv.Itoa(int(x)*1000000)\n\
    \    case 9:\n        return strconv.Itoa(int(x)*10000000)\n    case 10:\n   \
    \     return strconv.Itoa(int(x)*100000000)\n    case 11:\n        return strconv.Itoa(int(x)*1000000000)\n\
    \    case 12:\n        return strconv.Itoa(int(x)*10000000000)\n    case 13:\n\
    \        return strconv.Itoa(int(x)*100000000000)\n    case 14:\n        return\
    \ strconv.Itoa(int(x)*1000000000000)\n    case 15:\n        return strconv.Itoa(int(x)*10000000000000)\n\
    \    case 16:\n        return strconv.Itoa(int(x)*100000000000000)\n    case 17:\n\
    \        return strconv.Itoa(int(x)*1000000000000000)\n    case 18:\n        return\
    \ strconv.Itoa(int(x)*10000000000000000)\n    case 19:\n        return strconv.Itoa(int(x)*100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(int(x)*1000000000000000000)\n    case\
    \ 21:\n        return strconv.Itoa(int(x)*10000000000000000000)\n    case 22:\n\
    \        return strconv.Itoa(int(x)*100000000000000000000)\n    case 23:\n   \
    \     return strconv.Itoa(int(x)*1000000000000000000000)\n    case 24:\n     \
    \   return strconv.Itoa(int(x)*10000000000000000000000)\n    case 25:\n      \
    \  return strconv.Itoa(int(x)*100000000000000000000000)\n    case 26:\n      \
    \  return strconv.Itoa(int(x)*1000000000000000000000000)\n    case 27:\n     \
    \   return strconv.Itoa(int(x)*10000000000000000000000000)\n    case 28:\n   \
    \     return strconv.Itoa(int(x)*100000000000000000000000000)\n    case 29:\n\
    \        return strconv.Itoa(int(x)*1000000000000000000000000000)\n    case 30:\n\
    \        return strconv.Itoa(int(x)*10000000000000000000000000000)\n    case 31:\n\
    \        return strconv.Itoa(int(x)*100000000000000000000000000000)\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_gshqed_test.go:84:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base3(x))\n    case 4:\n        return\
    \ strconv.Itoa(base4(x))\n    case 5:\n        return strconv.Itoa(base5(x))\n\
    \    case 6:\n        return strconv.Itoa(base6(x))\n    case 7:\n        return\
    \ strconv.Itoa(base7(x))\n    case 8:\n        return strconv.Itoa(base8(x))\n\
    \    case 9:\n        return strconv.Itoa(base9(x))\n    case 10:\n        return\
    \ strconv.Itoa(base10(x))\n    default:\n        fmt.Println(\"Base must be less\
    \ than 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4mhwitui_test.go:24:16: undefined: strconv

    /tmp/tmp4mhwitui_test.go:24:29: undefined: base10

    /tmp/tmp4mhwitui_test.go:26:16: undefined: strconv

    /tmp/tmp4mhwitui_test.go:26:29: undefined: base3

    /tmp/tmp4mhwitui_test.go:28:16: undefined: strconv

    /tmp/tmp4mhwitui_test.go:28:29: undefined: base4

    /tmp/tmp4mhwitui_test.go:30:16: undefined: strconv

    /tmp/tmp4mhwitui_test.go:30:29: undefined: base5

    /tmp/tmp4mhwitui_test.go:32:16: undefined: strconv

    /tmp/tmp4mhwitui_test.go:32:29: undefined: base6

    /tmp/tmp4mhwitui_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x == 0 {\n            return \"0\"\n        }\n \
    \       if x % 2 == 0 {\n            return fmt.Sprintf(\"%d\", x/2)\n       \
    \ }\n        return fmt.Sprintf(\"%d%d\", x/2, x%2)\n    case 3:\n        if x\
    \ == 0 {\n            return \"0\"\n        }\n        if x % 3 == 0 {\n     \
    \       return fmt.Sprintf(\"%d\", x/3)\n        }\n        return fmt.Sprintf(\"\
    %d%d%d\", x/3, x%3, x%3)\n    case 4:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        if x % 4 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/4)\n        }\n        return fmt.Sprintf(\"%d%d%d%d\", x/4, x%4, x%4,\
    \ x%4)\n    case 5:\n        if x == 0 {\n            return \"0\"\n        }\n\
    \        if x % 5 == 0 {\n            return fmt.Sprintf(\"%d\", x/5)\n      \
    \  }\n        return fmt.Sprintf(\"%d%d%d%d%d\", x/5, x%5, x%5, x%5, x%5)\n  \
    \  case 6:\n        if x == 0 {\n            return \"0\"\n        }\n       \
    \ if x % 6 == 0 {\n            return fmt.Sprintf(\"%d\", x/6)\n        }\n  \
    \      return fmt.Sprintf(\"%d%d%d%d%d%d\", x/6, x%6, x%6, x%6, x%6, x%6)\n  \
    \  case 7:\n        if x == 0 {\n            return \"0\"\n        }\n       \
    \ if x % 7 == 0 {\n            return fmt.Sprintf(\"%d\", x/7)\n        }\n  \
    \      return fmt.Sprintf(\"%d%d%d%d%d%d%d\", x/7, x%7, x%7, x%7, x%7, x%7, x%7)\n\
    \    case 8:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   if x % 8 == 0 {\n            return fmt.Sprintf(\"%d\", x/8)\n        }\n\
    \        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/8, x%8, x%8, x%8, x%8, x%8,\
    \ x%8)\n    case 9:\n        if x == 0 {\n            return \"0\"\n        }\n\
    \        if x % 9 == 0 {\n            return fmt.Sprintf(\"%d\", x/9)\n      \
    \  }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/9, x%9, x%9, x%9, x%9,\
    \ x%9, x%9)\n    case 10:\n        if x == 0 {\n            return \"0\"\n   \
    \     }\n        if x % 10 == 0 {\n            return fmt.Sprintf(\"%d\", x/10)\n\
    \        }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/10, x%10, x%10,\
    \ x%10, x%10, x%10, x%10)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp2du1ey6o_test.go:74:16: fmt.Sprintf format %d reads arg #8, but call has
    7 args

    /tmp/tmp2du1ey6o_test.go:82:16: fmt.Sprintf format %d reads arg #8, but call has
    7 args

    /tmp/tmp2du1ey6o_test.go:90:16: fmt.Sprintf format %d reads arg #8, but call has
    7 args

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n\
    <|/ a tags=go,algorithm |>\n<| a tags=go,algorithm |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6rcq46p_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        return strconv.Itoa(int(x))\n    case 3:\n        return\
    \ strconv.Itoa(int(x)*10)\n    case 4:\n        return strconv.Itoa(int(x)*100)\n\
    \    case 5:\n        return strconv.Itoa(int(x)*1000)\n    case 6:\n        return\
    \ strconv.Itoa(int(x)*10000)\n    case 7:\n        return strconv.Itoa(int(x)*100000)\n\
    \    case 8:\n        return strconv.Itoa(int(x)*1000000)\n    case 9:\n     \
    \   return strconv.Itoa(int(x)*10000000)\n    case 10:\n        return strconv.Itoa(int(x)*100000000)\n\
    \    default:\n        fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\"\
    )\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26_uy9lt_test.go:28:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:30:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:32:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:34:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:36:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:38:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:40:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:42:16: undefined: strconv

    /tmp/tmp26_uy9lt_test.go:44:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp6qtvmj5m_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base == 2 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8hvr9ywf_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8hvr9ywf_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8hvr9ywf_test.go:54:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8hvr9ywf_test.go:54: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8hvr9ywf_test.go:54: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8hvr9ywf_test.go:54: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8hvr9ywf_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8hvr9ywf_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8hvr9ywf_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8hvr9ywf_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8hvr9ywf_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8hvr9ywf_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp5yzs1hrm_test.go:57: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp5yzs1hrm_test.go:57: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp5yzs1hrm_test.go:57:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp5yzs1hrm_test.go:57: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp5yzs1hrm_test.go:57: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp5yzs1hrm_test.go:57: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp5yzs1hrm_test.go:57:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp5yzs1hrm_test.go:57: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp5yzs1hrm_test.go:57: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp5yzs1hrm_test.go:57: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp5yzs1hrm_test.go:57:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp5yzs1hrm_test.go:57: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= '0'\n \
    \   base -= '0'\n    if base < 0 || base > 9 {\n        fmt.Println(\"Invalid\
    \ base\")\n        return \"\"\n    }\n    x /= base\n    x += '0'\n    x /= base\n\
    \    x += '0'\n    return fmt.Sprintf(\"%0\" + strconv.Itoa(base) + \"d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamk99tfb_test.go:28:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp3plgpr5g_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpre_yo15j_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpre_yo15j_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp6qtvmj5m_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7ulx_c9z_test.go:51: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7ulx_c9z_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7ulx_c9z_test.go:51:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7ulx_c9z_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7ulx_c9z_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7ulx_c9z_test.go:51: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp7ulx_c9z_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp7ulx_c9z_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp7ulx_c9z_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp7ulx_c9z_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp7ulx_c9z_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp7ulx_c9z_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n       \
    \ if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 7:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 10:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 11:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 12:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 13:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 14:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 15:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 16:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 17:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 18:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 19:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 20:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 21:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvn4m_kc_test.go:117:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpa2vymrb8_test.go:57: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpa2vymrb8_test.go:57: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpa2vymrb8_test.go:57:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpa2vymrb8_test.go:57: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpa2vymrb8_test.go:57: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpa2vymrb8_test.go:57: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpa2vymrb8_test.go:57:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpa2vymrb8_test.go:57: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpa2vymrb8_test.go:57: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpa2vymrb8_test.go:57: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpa2vymrb8_test.go:57:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpa2vymrb8_test.go:57: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    if x == 1 {\n        fmt.Println(\"\
    Cannot change base of 1.\")\n        return \"\"\n    }\n    if x == 2 {\n   \
    \     fmt.Println(\"Cannot change base of 2.\")\n        return \"\"\n    }\n\
    \    if x == 3 {\n        fmt.Println(\"Cannot change base of 3.\")\n        return\
    \ \"\"\n    }\n    if x == 4 {\n        fmt.Println(\"Cannot change base of 4.\"\
    )\n        return \"\"\n    }\n    if x == 5 {\n        fmt.Println(\"Cannot change\
    \ base of 5.\")\n        return \"\"\n    }\n    if x == 6 {\n        fmt.Println(\"\
    Cannot change base of 6.\")\n        return \"\"\n    }\n    if x == 7 {\n   \
    \     fmt.Println(\"Cannot change base of 7.\")\n        return \"\"\n    }\n\
    \    if x == 8 {\n        fmt.Println(\"Cannot change base of 8.\")\n        return\
    \ \"\"\n    }\n    if x == 9 {\n        fmt.Println(\"Cannot change base of 9.\"\
    )\n        return \"\"\n    }\n    if x == 10 {\n        fmt.Println(\"Cannot\
    \ change base of 10.\")\n        return \"\"\n    }\n    if x == 11 {\n      \
    \  fmt.Println(\"Cannot change base of 11.\")\n        return \"\"\n    }\n  \
    \  if x == 12 {\n        fmt.Println(\"Cannot change base of 12.\")\n        return\
    \ \"\"\n    }\n    if x == 13 {\n        fmt.Println(\"Cannot change base of 13.\"\
    )\n        return \"\"\n    }\n    if x == 14 {\n        fmt.Println(\"Cannot\
    \ change base of 14.\")\n        return \"\"\n    }\n    if x == 15 {\n      \
    \  fmt.Println(\"Cannot change base of 15.\")\n        return \"\"\n    }\n  \
    \  if x == 16 {\n        fmt.Println(\"Cannot change base of 16.\")\n        return\
    \ \"\"\n    }\n    if x == 17 {\n        fmt.Println(\"Cannot change base of 17.\"\
    )\n        return \"\"\n    }\n    if x == 18 {\n        fmt.Println(\"Cannot\
    \ change base of 18.\")\n        return \"\"\n    }\n    if x == 19 {\n      \
    \  fmt.Println(\"Cannot change base of 19.\")\n        return \"\"\n    }\n  \
    \  if x == 20 {\n        fmt.Println(\"Cannot change base of 20.\")\n        return\
    \ \"\"\n    }\n    if x == 21 {\n        fmt.Println(\"Cannot change base of 21.\"\
    )\n        return \"\"\n    }\n    if x == 22 {\n        fmt.Println(\"Cannot\
    \ change base of 22.\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4pmb7i7y_test.go:115:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp_mk_02n2_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x % base, base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpohm58cbt_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpohm58cbt_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp3plgpr5g_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n \
    \   if x < 0 {\n        fmt.Println(\"x must be greater than 0\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfgqw1pca_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfgqw1pca_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpfgqw1pca_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpfgqw1pca_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpfgqw1pca_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpfgqw1pca_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpfgqw1pca_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpfgqw1pca_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpfgqw1pca_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpfgqw1pca_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpfgqw1pca_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpfgqw1pca_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 3:\n     \
    \   if x < 100 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n     \
    \   return fmt.Sprintf(\"%d\", x/100)\n    case 4:\n        if x < 1000 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 5:\n        if x < 10000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 6:\n\
    \        if x < 100000 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/100000)\n    case 7:\n        if x < 1000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/1000000)\n    case 8:\n        if x < 10000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case\
    \ 9:\n        if x < 100000000 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 10:\n  \
    \      if x < 1000000000 {\n            return fmt.Sprintf(\"%d\", x)\n      \
    \  }\n        return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n       \
    \ return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp5f9by6zc_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp5f9by6zc_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp5f9by6zc_test.go:93:\
    \ expected '11101010', got '23'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp5f9by6zc_test.go:93: expected '10000', got '1'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp5f9by6zc_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp5f9by6zc_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(math.Log(x,\
    \ base))))\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplllglxh9_test.go:24:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        fmt.Println(\"Cannot change base of 0.\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp71ucvk16_test.go:59: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp71ucvk16_test.go:59: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp71ucvk16_test.go:59:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp71ucvk16_test.go:59: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp71ucvk16_test.go:59: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp71ucvk16_test.go:59: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp71ucvk16_test.go:59:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp71ucvk16_test.go:59: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp71ucvk16_test.go:59: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp71ucvk16_test.go:59: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp71ucvk16_test.go:59:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp71ucvk16_test.go:59: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpyrhgt9li_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\
    </code>\n<|/ a tags=go |>\n<| c |>\nThis does not work for negative numbers. `change_base(-7,\
    \ 2)` returns `\"111\"` instead of `\"-1\"`.\n<|/ c |>\n<| c |>\nThis does not\
    \ work for negative numbers. `change_base(-7, 2)` returns `\"111\"` instead of\
    \ `\"-1\"`.\n<|/ c |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxvcg8r14_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(int(base*x))\n    case 3:\n    \
    \    return strconv.Itoa(int(base*x)+10)\n    case 4:\n        return strconv.Itoa(int(base*x)+100)\n\
    \    case 5:\n        return strconv.Itoa(int(base*x)+1000)\n    case 6:\n   \
    \     return strconv.Itoa(int(base*x)+10000)\n    case 7:\n        return strconv.Itoa(int(base*x)+100000)\n\
    \    case 8:\n        return strconv.Itoa(int(base*x)+1000000)\n    case 9:\n\
    \        return strconv.Itoa(int(base*x)+10000000)\n    case 10:\n        return\
    \ strconv.Itoa(int(base*x)+100000000)\n    case 11:\n        return strconv.Itoa(int(base*x)+1000000000)\n\
    \    case 12:\n        return strconv.Itoa(int(base*x)+10000000000)\n    case\
    \ 13:\n        return strconv.Itoa(int(base*x)+100000000000)\n    case 14:\n \
    \       return strconv.Itoa(int(base*x)+1000000000000)\n    case 15:\n       \
    \ return strconv.Itoa(int(base*x)+10000000000000)\n    case 16:\n        return\
    \ strconv.Itoa(int(base*x)+100000000000000)\n    case 17:\n        return strconv.Itoa(int(base*x)+1000000000000000)\n\
    \    case 18:\n        return strconv.Itoa(int(base*x)+10000000000000000)\n  \
    \  case 19:\n        return strconv.Itoa(int(base*x)+100000000000000000)\n   \
    \ case 20:\n        return strconv.Itoa(int(base*x)+1000000000000000000)\n   \
    \ default:\n        fmt.Printf(\"Base %d is not supported!\\n\", base)\n    }\n\
    \    return \"\"\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bfhhdwx_test.go:20:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:22:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:24:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:26:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:28:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:30:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:32:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:34:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:36:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:38:16: undefined: strconv

    /tmp/tmp4bfhhdwx_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0gmvbxq_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdmy9jfjg_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanq_k3np_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpamxsj0kl_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10.\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkolako8d_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return\
    \ fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\",\
    \ x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfxef0e06_test.go:71: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfxef0e06_test.go:71: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpfxef0e06_test.go:71: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpfxef0e06_test.go:71: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpfxef0e06_test.go:71: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpfxef0e06_test.go:71: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpfxef0e06_test.go:71: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpfxef0e06_test.go:71: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpfxef0e06_test.go:71:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpfxef0e06_test.go:71: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpfxef0e06_test.go:71: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpfxef0e06_test.go:71:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfwrpwzdh_test.go:49: expected '22', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfwrpwzdh_test.go:49: expected\
    \ '100', got '1'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpfwrpwzdh_test.go:49:\
    \ expected '11101010', got '59'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpfwrpwzdh_test.go:49: expected '10000', got '4'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpfwrpwzdh_test.go:49: expected '1000', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpfwrpwzdh_test.go:49: expected\
    \ '111', got '2'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpfwrpwzdh_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpfwrpwzdh_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpfwrpwzdh_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpfwrpwzdh_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpfwrpwzdh_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpfwrpwzdh_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp4uvnk3p5_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp4uvnk3p5_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp4uvnk3p5_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base is less than 2\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"base is greater than 10\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpp34x6qoe_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpp34x6qoe_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpp34x6qoe_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpp34x6qoe_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpp34x6qoe_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpp34x6qoe_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpp34x6qoe_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpp34x6qoe_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpp34x6qoe_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpp34x6qoe_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpp34x6qoe_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpp34x6qoe_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp22b48h0c_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp22b48h0c_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp22b48h0c_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpry80btwl_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp6qtvmj5m_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base10(x*base))\n    case 4:\n     \
    \   return strconv.Itoa(base10(x*base*base))\n    case 5:\n        return strconv.Itoa(base10(x*base*base*base))\n\
    \    case 6:\n        return strconv.Itoa(base10(x*base*base*base*base))\n   \
    \ case 7:\n        return strconv.Itoa(base10(x*base*base*base*base*base))\n \
    \   case 8:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base))\n\
    \    case 9:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base))\n\
    \    case 10:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base*base))\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz9antoy_test.go:24:16: undefined: strconv

    /tmp/tmplz9antoy_test.go:24:29: undefined: base10

    /tmp/tmplz9antoy_test.go:26:16: undefined: strconv

    /tmp/tmplz9antoy_test.go:26:29: undefined: base10

    /tmp/tmplz9antoy_test.go:28:16: undefined: strconv

    /tmp/tmplz9antoy_test.go:28:29: undefined: base10

    /tmp/tmplz9antoy_test.go:30:16: undefined: strconv

    /tmp/tmplz9antoy_test.go:30:29: undefined: base10

    /tmp/tmplz9antoy_test.go:32:16: undefined: strconv

    /tmp/tmplz9antoy_test.go:32:29: undefined: base10

    /tmp/tmplz9antoy_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdw32ghl9_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdw32ghl9_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdw32ghl9_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdw32ghl9_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdw32ghl9_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdw32ghl9_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdw32ghl9_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdw32ghl9_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdw32ghl9_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdw32ghl9_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdw32ghl9_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdw32ghl9_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= '0'\n \
    \   x /= base\n    x += '0'\n    x /= base\n    return fmt.Sprintf(\"%0\"+strconv.Itoa(base)+\"\
    d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppo9wje7z_test.go:22:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ocz2w11_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc3m328li_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpyrhgt9li_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpf__r78_h_test.go:53: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpf__r78_h_test.go:53: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpf__r78_h_test.go:53:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpf__r78_h_test.go:53: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpf__r78_h_test.go:53: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpf__r78_h_test.go:53: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpf__r78_h_test.go:53:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpf__r78_h_test.go:53: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpf__r78_h_test.go:53: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpf__r78_h_test.go:53: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpf__r78_h_test.go:53:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpf__r78_h_test.go:53: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    switch base {\n    case 2:\n        return\
    \ strconv.Itoa(int(x))\n    case 3:\n        return strconv.Itoa(int(x)*10)\n\
    \    case 4:\n        return strconv.Itoa(int(x)*100)\n    case 5:\n        return\
    \ strconv.Itoa(int(x)*1000)\n    case 6:\n        return strconv.Itoa(int(x)*10000)\n\
    \    case 7:\n        return strconv.Itoa(int(x)*100000)\n    case 8:\n      \
    \  return strconv.Itoa(int(x)*1000000)\n    case 9:\n        return strconv.Itoa(int(x)*10000000)\n\
    \    case 10:\n        return strconv.Itoa(int(x)*100000000)\n    default:\n \
    \       fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4rycas22_test.go:28:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:30:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:32:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:34:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:36:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:38:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:40:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:42:16: undefined: strconv

    /tmp/tmp4rycas22_test.go:44:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp_mk_02n2_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%v\", x, base)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps8qzaogg_test.go:54: expected '22', got '23'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps8qzaogg_test.go:54: expected\
    \ '100', got '03'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmps8qzaogg_test.go:54: expected '11101010', got '12'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmps8qzaogg_test.go:54: expected '10000', got '02'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmps8qzaogg_test.go:54: expected\
    \ '1000', got '02'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmps8qzaogg_test.go:54: expected '111', got '12'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmps8qzaogg_test.go:54: expected '2', got '03'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmps8qzaogg_test.go:54: expected\
    \ '3', got '04'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmps8qzaogg_test.go:54:\
    \ expected '4', got '05'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmps8qzaogg_test.go:54: expected '5', got '06'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmps8qzaogg_test.go:54: expected '6', got '07'\n    --- FAIL:\
    \ TestChange_Base/test_num__11 (0.00s)\n        tmps8qzaogg_test.go:54: expected\
    \ '7', got '08'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x %= base\n    if x < base {\n        x += (base - 1)\n    }\n    x /= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpcc0l4gti_test.go:61: expected '22', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpcc0l4gti_test.go:61: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpcc0l4gti_test.go:61:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpcc0l4gti_test.go:61: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpcc0l4gti_test.go:61: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpcc0l4gti_test.go:61: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpcc0l4gti_test.go:61:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpcc0l4gti_test.go:61: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpcc0l4gti_test.go:61: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpcc0l4gti_test.go:61: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpcc0l4gti_test.go:61:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpcc0l4gti_test.go:61: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpzy0supx3_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuotl8m49_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpu3bnqbti_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7q1tgw58_test.go:129:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base number should be less than 10.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base number should be less than 10.\nBase number should be less than 10.\n\
    Base number should be less than 10.\nBase number should be less than 10.\nBase\
    \ number should be less than 10.\nBase number should be less than 10.\nBase number\
    \ should be less than 10.\nBase number should be less than 10.\nBase number should\
    \ be less than 10.\nBase number should be less than 10.\nBase number should be\
    \ less than 10.\nBase number should be less than 10.\n--- FAIL: TestChange_Base\
    \ (0.00s)\n    --- FAIL: TestChange_Base/test_num__0 (0.00s)\n        tmpy__unjad_test.go:51:\
    \ expected '22', got ''\n    --- FAIL: TestChange_Base/test_num__1 (0.00s)\n \
    \       tmpy__unjad_test.go:51: expected '100', got ''\n    --- FAIL: TestChange_Base/test_num__2\
    \ (0.00s)\n        tmpy__unjad_test.go:51: expected '11101010', got ''\n    ---\
    \ FAIL: TestChange_Base/test_num__3 (0.00s)\n        tmpy__unjad_test.go:51: expected\
    \ '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4 (0.00s)\n       \
    \ tmpy__unjad_test.go:51: expected '1000', got ''\n    --- FAIL: TestChange_Base/test_num__5\
    \ (0.00s)\n        tmpy__unjad_test.go:51: expected '111', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__6 (0.00s)\n        tmpy__unjad_test.go:51: expected\
    \ '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n        tmpy__unjad_test.go:51:\
    \ expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n  \
    \      tmpy__unjad_test.go:51: expected '4', got ''\n    --- FAIL: TestChange_Base/test_num__9\
    \ (0.00s)\n        tmpy__unjad_test.go:51: expected '5', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__10 (0.00s)\n        tmpy__unjad_test.go:51: expected\
    \ '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpy__unjad_test.go:51:\
    \ expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxjh87bb_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9zmz_dp3_test.go:57: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9zmz_dp3_test.go:57: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9zmz_dp3_test.go:57:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9zmz_dp3_test.go:57: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9zmz_dp3_test.go:57: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9zmz_dp3_test.go:57: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9zmz_dp3_test.go:57:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp9zmz_dp3_test.go:57: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9zmz_dp3_test.go:57: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9zmz_dp3_test.go:57: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9zmz_dp3_test.go:57:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp9zmz_dp3_test.go:57: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpre_yo15j_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpre_yo15j_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10.\\n\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return\
    \ fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\",\
    \ x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    case 11:\n        return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000)\n    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n\
    \    case 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case\
    \ 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n        fmt.Printf(\"\
    Base must be less than 20.\\n\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10.\nbase must be less than 10.\nbase must be less\
    \ than 10.\nbase must be less than 10.\nbase must be less than 10.\nbase must\
    \ be less than 10.\nbase must be less than 10.\nbase must be less than 10.\nbase\
    \ must be less than 10.\nbase must be less than 10.\nbase must be less than 10.\n\
    base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6doeeb7__test.go:91: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6doeeb7__test.go:91: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6doeeb7__test.go:91:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6doeeb7__test.go:91: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6doeeb7__test.go:91: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6doeeb7__test.go:91: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6doeeb7__test.go:91:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6doeeb7__test.go:91: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6doeeb7__test.go:91: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6doeeb7__test.go:91: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6doeeb7__test.go:91:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6doeeb7__test.go:91: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp4uvnk3p5_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp4uvnk3p5_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp4uvnk3p5_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp4uvnk3p5_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp4uvnk3p5_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp4uvnk3p5_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    switch\
    \ base {\n    case 2:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\\
    n\")\n        }\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n    \
    \    }\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 4:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\"\
    )\n        }\n        x /= 10\n        x /= 10\n        x /= 10\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 5:\n        if x < 0 {\n            fmt.Printf(\"\
    x is negative.\\n\")\n        }\n        x /= 10\n        x /= 10\n        x /=\
    \ 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 6:\n  \
    \      if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 7:\n        if x < 0\
    \ {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n        x /= 10\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        if x < 0\
    \ {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n        x /= 10\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 9:\n\
    \        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\\
    n\")\n        }\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n\
    \        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    default:\n      \
    \  fmt.Printf(\"base is out of range.\\n\")\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7t2d3ok_test.go:115:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg43qf3vm_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpg43qf3vm_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpg43qf3vm_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n   \
    \     return strconv.Itoa(x / 10000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ / 100000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n    case\
    \ 21:\n        return strconv.Itoa(x / 10000000000000000000)\n    case 22:\n \
    \       return strconv.Itoa(x / 100000000000000000000)\n    case 23:\n       \
    \ return strconv.Itoa(x / 1000000000000000000000)\n    case 24:\n        return\
    \ strconv.Itoa(x / 10000000000000000000000)\n    case 25:\n        return strconv.Itoa(x\
    \ / 100000000000000000000000)\n    case 26:\n        return strconv.Itoa(x / 1000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x / 10000000000000000000000000)\n \
    \   case 28:\n        return strconv.Itoa(x / 100000000000000000000000000)\n \
    \   case 29:\n        return strconv.Itoa(x / 1000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x / 10000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x / 100000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000)\n\
    \    case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000)\n\
    \    case 34:\n        return strconv.Itoa(x / 100000000000000000000000000000000)\n\
    \    case 35:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n\
    \    case 36:\n        return strconv.Itoa(x / 100000000000000000000000000\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0prpexc3_test.go:88:60: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base*float64(x))))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2u12mf1u_test.go:24:13: invalid operation: base * float64(x) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n \
    \   if base == 2 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n   \
    \ if base == 8 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if\
    \ base == 16 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base\
    \ == 32 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base ==\
    \ 64 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 128\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 256\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 512\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 1024\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 2048\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 4096\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 8192\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 16384\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 32768\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 65536\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 131072\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 262144\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 524288\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 1048576\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 2097152\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 4194304\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 8388608\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 16777216\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 33554432\
    \ {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n    if base == 67\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfh_wf2mt_test.go:98:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnv92c5f_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpu3bnqbti_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0\")\n        return \"\"\n    }\n    if x == 1 {\n        fmt.Println(\"\
    Cannot change base of 1\")\n        return \"\"\n    }\n    if x == 2 {\n    \
    \    fmt.Println(\"Cannot change base of 2\")\n        return \"\"\n    }\n  \
    \  if x == 3 {\n        fmt.Println(\"Cannot change base of 3\")\n        return\
    \ \"\"\n    }\n    if x == 4 {\n        fmt.Println(\"Cannot change base of 4\"\
    )\n        return \"\"\n    }\n    if x == 5 {\n        fmt.Println(\"Cannot change\
    \ base of 5\")\n        return \"\"\n    }\n    if x == 6 {\n        fmt.Println(\"\
    Cannot change base of 6\")\n        return \"\"\n    }\n    if x == 7 {\n    \
    \    fmt.Println(\"Cannot change base of 7\")\n        return \"\"\n    }\n  \
    \  if x == 8 {\n        fmt.Println(\"Cannot change base of 8\")\n        return\
    \ \"\"\n    }\n    if x == 9 {\n        fmt.Println(\"Cannot change base of 9\"\
    )\n        return \"\"\n    }\n    if x == 10 {\n        fmt.Println(\"Cannot\
    \ change base of 10\")\n        return \"\"\n    }\n    if x == 11 {\n       \
    \ fmt.Println(\"Cannot change base of 11\")\n        return \"\"\n    }\n    if\
    \ x == 12 {\n        fmt.Println(\"Cannot change base of 12\")\n        return\
    \ \"\"\n    }\n    if x == 13 {\n        fmt.Println(\"Cannot change base of 13\"\
    )\n        return \"\"\n    }\n    if x == 14 {\n        fmt.Println(\"Cannot\
    \ change base of 14\")\n        return \"\"\n    }\n    if x == 15 {\n       \
    \ fmt.Println(\"Cannot change base of 15\")\n        return \"\"\n    }\n    if\
    \ x == 16 {\n        fmt.Println(\"Cannot change base of 16\")\n        return\
    \ \"\"\n    }\n    if x == 17 {\n        fmt.Println(\"Cannot change base of 17\"\
    )\n        return \"\"\n    }\n    if x == 18 {\n        fmt.Println(\"Cannot\
    \ change base of 18\")\n        return \"\"\n    }\n    if x == 19 {\n       \
    \ fmt.Println(\"Cannot change base of 19\")\n        return \"\"\n    }\n    if\
    \ x == 20 {\n        fmt.Println(\"Cannot change base of 20\")\n        return\
    \ \"\"\n    }\n    if x == 21 {\n        fmt.Println(\"Cannot change base of 21\"\
    )\n        return \"\"\n    }\n    if x == 22 {\n        fmt.Println(\"Cannot\
    \ change base of 22\")\n        return \"\"\n    }\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl2bg55l1_test.go:119:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk4o2k79_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(int(strconv.Itoa(x)))\n    case\
    \ 3:\n        return strconv.Itoa(int(strconv.Itoa(x/10)*10 + strconv.Itoa(int(strconv.Itoa(x%10))))\n\
    \    case 4:\n        return strconv.Itoa(int(strconv.Itoa(x/100)*100 + strconv.Itoa(int(strconv.Itoa(x%100))))\n\
    \    case 5:\n        return strconv.Itoa(int(strconv.Itoa(x/1000)*1000 + strconv.Itoa(int(strconv.Itoa(x%1000))))\n\
    \    case 6:\n        return strconv.Itoa(int(strconv.Itoa(x/10000)*10000 + strconv.Itoa(int(strconv.Itoa(x%10000))))\n\
    \    case 7:\n        return strconv.Itoa(int(strconv.Itoa(x/100000)*100000 +\
    \ strconv.Itoa(int(strconv.Itoa(x%100000))))\n    case 8:\n        return strconv.Itoa(int(strconv.Itoa(x/1000000)*1000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%1000000))))\n    case 9:\n        return strconv.Itoa(int(strconv.Itoa(x/10000000)*10000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%10000000))))\n    case 10:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/100000000)*100000000 + strconv.Itoa(int(strconv.Itoa(x%100000000))))\n\
    \    case 11:\n        return strconv.Itoa(int(strconv.Itoa(x/1000000000)*1000000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%1000000000))))\n    case 12:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/10000000000)*10000000000 + strconv.Itoa(int(strconv.Itoa(x%10000000000))))\n\
    \    case 13:\n        return strconv.Itoa(int(strconv.Itoa(x/100000000000)*100000000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%100000000000))))\n    case 14:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/1000000000000)*1000000000000 + strconv.Itoa(int(strconv.Itoa(x%1000000000000))))\n\
    \    case 15:\n        return strconv.Itoa(int(strconv.Itoa(x/10000000000000)*\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx1j850st_test.go:22:95: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '22', got '6'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '111', got '6'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpz41qp145_test.go:46: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuotl8m49_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbls2tnwq_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    switch base {\n    case 2:\n        if x ==\
    \ 0 {\n            return \"0\"\n        }\n        if x == 1 {\n            return\
    \ \"1\"\n        }\n        if x == 2 {\n            return \"2\"\n        }\n\
    \        if x == 3 {\n            return \"3\"\n        }\n        if x == 4 {\n\
    \            return \"4\"\n        }\n        if x == 5 {\n            return\
    \ \"5\"\n        }\n        if x == 6 {\n            return \"6\"\n        }\n\
    \        if x == 7 {\n            return \"7\"\n        }\n        if x == 8 {\n\
    \            return \"8\"\n        }\n        if x == 9 {\n            return\
    \ \"9\"\n        }\n        if x == 10 {\n            return \"A\"\n        }\n\
    \        if x == 11 {\n            return \"B\"\n        }\n        if x == 12\
    \ {\n            return \"C\"\n        }\n        if x == 13 {\n            return\
    \ \"D\"\n        }\n        if x == 14 {\n            return \"E\"\n        }\n\
    \        if x == 15 {\n            return \"F\"\n        }\n        if x == 16\
    \ {\n            return \"G\"\n        }\n        if x == 17 {\n            return\
    \ \"H\"\n        }\n        if x == 18 {\n            return \"I\"\n        }\n\
    \        if x == 19 {\n            return \"J\"\n        }\n        if x == 20\
    \ {\n            return \"K\"\n        }\n        if x == 21 {\n            return\
    \ \"L\"\n        }\n        if x == 22 {\n            return \"M\"\n        }\n\
    \        if x == 23 {\n            return \"N\"\n        }\n        if x == 24\
    \ {\n            return \"O\"\n        }\n        if x == 25 {\n            return\
    \ \"P\"\n        }\n        if x == 26 {\n            return \"Q\"\n        }\n\
    \        if x == 27 {\n            return \"R\"\n        }\n        if x == 28\
    \ {\n            return \"S\"\n        }\n        if x == 29 {\n            return\
    \ \"T\"\n        }\n        if x == 30 {\n            return \"U\"\n        }\n\
    \        if x == 31 {\n            return \"V\"\n        }\n        if x == 32\
    \ {\n            return \"W\"\n        }\n        if x == 33 {\n            return\
    \ \"X\"\n        }\n        if x == 34 {\n            return \"Y\"\n        }\n\
    \        if x == 35 {\n            return \"Z\"\n        }\n        if x == 36\
    \ {\n            return \"0\"\n        }\n        if x == 37 {\n            return\
    \ \"1\"\n        }\n        if x == 38 {\n            return \"2\"\n        }\n\
    \        if x == 39 {\n            return \"3\"\n        }\n        if x == 40:\n\
    \            return \"4\"\n        }\n        if x == 41 {\n            return\
    \ \"5\"\n        }\n        if x == 42 {\n            return \"6\"\n        }\n\
    \        if x == 43 {\n            return \"\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpunz_dmse_test.go:148:19: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp9i7s2vvw_test.go:54: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp9i7s2vvw_test.go:54: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp9i7s2vvw_test.go:54:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp9i7s2vvw_test.go:54: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp9i7s2vvw_test.go:54: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp9i7s2vvw_test.go:54: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp9i7s2vvw_test.go:54:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp9i7s2vvw_test.go:54: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp9i7s2vvw_test.go:54: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp9i7s2vvw_test.go:54: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp9i7s2vvw_test.go:54:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp9i7s2vvw_test.go:54: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp33slj185_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp33slj185_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp33slj185_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return strconv.Itoa(x)\n  \
    \      }\n        return strconv.Itoa(change_base(x, 3))\n    case 3:\n      \
    \  if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 6))\n    case 4:\n        if x < 10 {\n        \
    \    return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 9))\n    case 5:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 12))\n    case 6:\n   \
    \     if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 15))\n    case 7:\n        if x < 10 {\n       \
    \     return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 18))\n    case 8:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 21))\n    case 9:\n   \
    \     if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 24))\n    case 10:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 27))\n    case 11:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 30))\n    case 12:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 33))\n    case 13:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 36))\n    case 14:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 39))\n    case 15:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 42))\n    case 16:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 45))\n    case 17:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 48))\n    case 18:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 51))\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu7yb9k3n_test.go:105:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7jqlmeac_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7jqlmeac_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\
    error\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ 10.\")\n        return \"error\"\n    }\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqcjrdrx3_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg5s4uac5_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg5s4uac5_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg5s4uac5_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg5s4uac5_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg5s4uac5_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg5s4uac5_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpg5s4uac5_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpg5s4uac5_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpg5s4uac5_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpg5s4uac5_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpg5s4uac5_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpg5s4uac5_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"Negative number\
    \ is not allowed\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_2o_yu4i_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8s8mns_f_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base must be less than 10\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz039l0v_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmplg7s13qt_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmplg7s13qt_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmplg7s13qt_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmplg7s13qt_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmplg7s13qt_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmplg7s13qt_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmplg7s13qt_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmplg7s13qt_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmplg7s13qt_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmplg7s13qt_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmplg7s13qt_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmplg7s13qt_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '22', got '6'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '111', got '6'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpz41qp145_test.go:46: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be less than 2\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return\
    \ fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\",\
    \ x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Println(\"base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpxy_dcv5g_test.go:71: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpxy_dcv5g_test.go:71: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpxy_dcv5g_test.go:71: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpxy_dcv5g_test.go:71: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpxy_dcv5g_test.go:71: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpxy_dcv5g_test.go:71: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpxy_dcv5g_test.go:71: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpxy_dcv5g_test.go:71: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpxy_dcv5g_test.go:71:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpxy_dcv5g_test.go:71: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpxy_dcv5g_test.go:71: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpxy_dcv5g_test.go:71:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n       \
    \ if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 7:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 10:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpjps7l2mc_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpjps7l2mc_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbls2tnwq_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base100(x))\n    case 4:\n        return\
    \ strconv.Itoa(base1000(x))\n    case 5:\n        return strconv.Itoa(base10000(x))\n\
    \    case 6:\n        return strconv.Itoa(base100000(x))\n    case 7:\n      \
    \  return strconv.Itoa(base1000000(x))\n    case 8:\n        return strconv.Itoa(base10000000(x))\n\
    \    case 9:\n        return strconv.Itoa(base100000000(x))\n    case 10:\n  \
    \      return strconv.Itoa(base1000000000(x))\n    case 11:\n        return strconv.Itoa(base10000000000(x))\n\
    \    case 12:\n        return strconv.Itoa(base100000000000(x))\n    case 13:\n\
    \        return strconv.Itoa(base1000000000000(x))\n    case 14:\n        return\
    \ strconv.Itoa(base10000000000000(x))\n    case 15:\n        return strconv.Itoa(base100000000000000(x))\n\
    \    case 16:\n        return strconv.Itoa(base1000000000000000(x))\n    case\
    \ 17:\n        return strconv.Itoa(base10000000000000000(x))\n    case 18:\n \
    \       return strconv.Itoa(base100000000000000000(x))\n    case 19:\n       \
    \ return strconv.Itoa(base1000000000000000000(x))\n    case 20:\n        return\
    \ strconv.Itoa(base10000000000000000000(x))\n    case 21:\n        return strconv.Itoa(base100000000000000000000(x))\n\
    \    case 22:\n        return strconv.Itoa(base1000000000000000000000(x))\n  \
    \  case 23:\n        return strconv.Itoa(base10000000000000000000000(x))\n   \
    \ case 24:\n        return strconv.Itoa(base100000000000000000000000(x))\n   \
    \ case 25:\n        return strconv.Itoa(base1000000000000000000000000(x))\n  \
    \  case 26:\n        return strconv.Itoa(base10000000000000000000000000(x))\n\
    \    case 27:\n        return strconv.Itoa(base100000000000000000000000000(x))\n\
    \    case 28:\n        return strconv.Itoa(base1000000000000000000000000000(x))\n\
    \    case 29:\n        return strconv.Itoa(base10000000000000000000000000000(x))\n\
    \    case 30:\n        return strconv.Itoa(base100000000000000000000000000000(x))\n\
    \    case 31:\n        return strconv.Itoa(base1000000000000000000000000000000(x))\n\
    \    case 32:\n        return strconv.Itoa(base10000000000000000000000000000000(x))\n\
    \    case 33:\n        return strconv.Itoa(base100000000000000000000000000000000(x))\n\
    \    case 34:\n        return strconv.Itoa(\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeyryeiti_test.go:89:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x < 0 {\n  \
    \      fmt.Println(\"Input number must be greater than 0\")\n        return \"\
    \"\n    }\n    if base == 2 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base\
    \ == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 8 {\n\
    \        return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n \
    \   }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n   \
    \ if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base ==\
    \ 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n   \
    \     return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"\
    %o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base ==\
    \ 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n   \
    \ if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base ==\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n   \
    \     return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n \
    \   }\n    if base == \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8buvg8jm_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqul1_9ix_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpu3bnqbti_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= '0'\n \
    \   base -= '0'\n    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n  \
    \  return fmt.Sprintf(\"%0\"+strconv.Itoa(base)+\"d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkv7r2h1e_test.go:24:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp33slj185_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp33slj185_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp33slj185_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp33slj185_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp33slj185_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp33slj185_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpy4__p38o_test.go:53: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpy4__p38o_test.go:53: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpy4__p38o_test.go:53:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpy4__p38o_test.go:53: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpy4__p38o_test.go:53: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpy4__p38o_test.go:53: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpy4__p38o_test.go:53:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpy4__p38o_test.go:53: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpy4__p38o_test.go:53: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpy4__p38o_test.go:53: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpy4__p38o_test.go:53:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpy4__p38o_test.go:53: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n<|/ a tags=go,string\
    \ |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgexpzqqw_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base must be less than 10.\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiv37hiao_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x % base, base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpohm58cbt_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpohm58cbt_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpohm58cbt_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpohm58cbt_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base numbers are less than 10\\n\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        if x == 0 {\n         \
    \   return \"0\"\n        }\n        if x % 2 == 0 {\n            return strconv.Itoa(x/2)\
    \ + change_base(x%2, base)\n        }\n        return strconv.Itoa(x/2) + change_base(x%2,\
    \ base)\n    case 3:\n        if x == 0 {\n            return \"0\"\n        }\n\
    \        if x % 3 == 0 {\n            return strconv.Itoa(x/3) + change_base(x%3,\
    \ base)\n        }\n        return strconv.Itoa(x/3) + change_base(x%3, base)\n\
    \    case 4:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   if x % 4 == 0 {\n            return strconv.Itoa(x/4) + change_base(x%4, base)\n\
    \        }\n        return strconv.Itoa(x/4) + change_base(x%4, base)\n    case\
    \ 5:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 5 == 0 {\n            return strconv.Itoa(x/5) + change_base(x%5, base)\n  \
    \      }\n        return strconv.Itoa(x/5) + change_base(x%5, base)\n    case\
    \ 6:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 6 == 0 {\n            return strconv.Itoa(x/6) + change_base(x%6, base)\n  \
    \      }\n        return strconv.Itoa(x/6) + change_base(x%6, base)\n    case\
    \ 7:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 7 == 0 {\n            return strconv.Itoa(x/7) + change_base(x%7, base)\n  \
    \      }\n        return strconv.Itoa(x/7) + change_base(x%7, base)\n    case\
    \ 8:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 8 == 0 {\n            return strconv.Itoa(x/8) + change_base(x%8, base)\n  \
    \      }\n        return strconv.Itoa(x/8) + change_base(x%8, base)\n    case\
    \ 9:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 9 == 0 {\n            return strconv.Itoa(x/9) + change_base(x%9, base)\n  \
    \      }\n        return strconv.Itoa(x/9) + change_base(x%9, base)\n    case\
    \ 10:\n        if x == 0 {\n            return \"0\"\n        }\n        if x\
    \ % 10 == 0 {\n            return strconv.Itoa(x/10) + change_base(x%10, base)\n\
    \        }\n        return strconv.Itoa(x/10) + change_base(x%10, base)\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp73kgfh6t_test.go:96:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\n--- FAIL:\
    \ TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0 (0.00s)\n\
    \        tmpsnaqlxn0_test.go:51: expected '22', got ''\n    --- FAIL: TestChange_Base/test_num__1\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '100', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__2 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n    \
    \    tmpsnaqlxn0_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpsnaqlxn0_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpsnaqlxn0_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpsnaqlxn0_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpsnaqlxn0_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpsnaqlxn0_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpsnaqlxn0_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp4nr41s4h_test.go:59: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp4nr41s4h_test.go:59: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp4nr41s4h_test.go:59: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    x /=\
    \ base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\n--- FAIL:\
    \ TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0 (0.00s)\n\
    \        tmpjfi91ooj_test.go:50: expected '22', got '2'\n    --- FAIL: TestChange_Base/test_num__1\
    \ (0.00s)\n        tmpjfi91ooj_test.go:50: expected '100', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__2 (0.00s)\n        tmpjfi91ooj_test.go:50: expected\
    \ '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n   \
    \     tmpjfi91ooj_test.go:50: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpjfi91ooj_test.go:50: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpjfi91ooj_test.go:50: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpjfi91ooj_test.go:50:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpjfi91ooj_test.go:50: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpjfi91ooj_test.go:50: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpjfi91ooj_test.go:50: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpjfi91ooj_test.go:50:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpjfi91ooj_test.go:50: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n       \
    \ if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 7:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 10:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpjps7l2mc_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpjps7l2mc_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdmy9jfjg_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= '0'\n \
    \   base -= '0'\n    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n  \
    \  return fmt.Sprintf(\"%0\"+strconv.Itoa(int(base))+\"d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoeekrgt6_test.go:24:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    if\
    \ base > 10 {\n        fmt.Printf(\"base numbers are greater than 10.\\n\")\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoy8lzpf5_test.go:119:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n   \
    \     return strconv.Itoa(x / 1000000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ / 100000000000000)\n    case 14:\n        return strconv.Itoa(x / 10000000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 100000000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 1000000000000000000)\n    default:\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0k0y5syu_test.go:20:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:22:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:24:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:26:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:28:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:30:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:32:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:34:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:36:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:38:16: undefined: strconv

    /tmp/tmp0k0y5syu_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2.\")\n        return \"error\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"error\"\n    }\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjxv7w0n_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n       \
    \ if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 7:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 10:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpjps7l2mc_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpjps7l2mc_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpjps7l2mc_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpjps7l2mc_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnm8ws5pm_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanq_k3np_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvm9e80m0_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwdknuf1w_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x == 0 {\n            return \"0\"\n        }\n \
    \       if x < 0 {\n            return \"-\" + change_base(-x, 2)\n        }\n\
    \        if x < 10 {\n            return strconv.Itoa(x)\n        }\n        if\
    \ x < 100 {\n            return strconv.Itoa(int(x / 10))\n        }\n       \
    \ if x < 1000 {\n            return strconv.Itoa(int(x / 100))\n        }\n  \
    \      if x < 10000 {\n            return strconv.Itoa(int(x / 1000))\n      \
    \  }\n        if x < 100000 {\n            return strconv.Itoa(int(x / 10000))\n\
    \        }\n        if x < 1000000 {\n            return strconv.Itoa(int(x /\
    \ 100000))\n        }\n        if x < 10000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 1000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 10000000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 100000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 1000000000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 10000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000000000 {\n            return\
    \ strconv.Itoa(int(x / 100000))\n        }\n        if x < 1000000000000000 {\n\
    \            return strconv.Itoa(int(x / 1000000))\n        }\n        if x <\
    \ 10000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n    \
    \    }\n        if x < 100000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 1000000000000000000 {\n            return\
    \ strconv.Itoa(int(x / 100000))\n        }\n        if x < 10000000000000000000\
    \ {\n            return strconv.Itoa(int(x / 1000000))\n        }\n        if\
    \ x < 100000000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n\
    \        }\n        if x < 1000000000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 10000000000000000000000 {\n         \
    \   return strconv.Itoa(int(x / 100000))\n        }\n        if x < 100000000000000000000000\
    \ {\n            return strconv.Itoa(int(x / 1000000))\n        }\n        if\
    \ x < 1000000000000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n\
    \        }\n        if x < 10000000000000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000000000000000000000 {\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm83iuz0v_test.go:102:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpb3rgm5uj_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    if x == 1 {\n        return \"\
    1\"\n    }\n    if x == 2 {\n        return \"10\"\n    }\n    if x == 3 {\n \
    \       return \"100\"\n    }\n    if x == 4 {\n        return \"1000\"\n    }\n\
    \    if x == 5 {\n        return \"10000\"\n    }\n    if x == 6 {\n        return\
    \ \"100000\"\n    }\n    if x == 7 {\n        return \"1000000\"\n    }\n    if\
    \ x == 8 {\n        return \"10000000\"\n    }\n    if x == 9 {\n        return\
    \ \"100000000\"\n    }\n    if x == 10 {\n        return \"1000000000\"\n    }\n\
    \    if x == 11 {\n        return \"10000000000\"\n    }\n    if x == 12 {\n \
    \       return \"100000000000\"\n    }\n    if x == 13 {\n        return \"1000000000000\"\
    \n    }\n    if x == 14 {\n        return \"10000000000000\"\n    }\n    if x\
    \ == 15 {\n        return \"100000000000000\"\n    }\n    if x == 16 {\n     \
    \   return \"1000000000000000\"\n    }\n    if x == 17 {\n        return \"10000000000000000\"\
    \n    }\n    if x == 18 {\n        return \"100000000000000000\"\n    }\n    if\
    \ x == 19 {\n        return \"1000000000000000000\"\n    }\n    if x == 20 {\n\
    \        return \"10000000000000000000\"\n    }\n    if x == 21 {\n        return\
    \ \"100000000000000000000\"\n    }\n    if x == 22 {\n        return \"1000000000000000000000\"\
    \n    }\n    if x == 23 {\n        return \"10000000000000000000000\"\n    }\n\
    \    if x == 24 {\n        return \"100000000000000000000000\"\n    }\n    if\
    \ x == 25 {\n        return \"1000000000000000000000000\"\n    }\n    if x ==\
    \ 26 {\n        return \"10000000000000000000000000\"\n    }\n    if x == 27 {\n\
    \        return \"10000000000000000000000000000000000\"\n    }\n    if x == 28\
    \ {\n        return \"100000000000000000000000000000000000\"\n    }\n    if x\
    \ == 29 {\n        return \"1000000000000000000000000000000000000\"\n    }\n \
    \   if x == 30 {\n        return \"10000000000000000000000000000000000000\"\n\
    \    }\n    if x == 31 {\n        return \"100000000000000000000000000000000000000\"\
    \n    }\n    if x == 32 {\n        return \"1000000000000000000000000000000000000000\"\
    \n    }\n    if x == 33 {\n        return \"10000000000000000000000000000000000000000\"\
    \n    }\n    if x == 34 {\n        return \"100000000000000000000000000000000000000000\"\
    \n    }\n    if x == 35 {\n        return \"1000000000000000000000000000000000000000000\"\
    \n    }\n    if x == 36 {\n        return \"10000000000000000000000000000000000000000000\"\
    \n    }\n    if x == 37 {\n        return \"100000000000000000000000000000000000000000000\"\
    \n    }\n    if \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf7wrohr5_test.go:142:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"x must be\
    \ greater than 0\")\n        return \"\"\n    }\n    if base == 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3j29f1di_test.go:62: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3j29f1di_test.go:62: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3j29f1di_test.go:62:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3j29f1di_test.go:62: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3j29f1di_test.go:62: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3j29f1di_test.go:62: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp3j29f1di_test.go:62:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp3j29f1di_test.go:62: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp3j29f1di_test.go:62: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp3j29f1di_test.go:62: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp3j29f1di_test.go:62:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp3j29f1di_test.go:62: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ocz2w11_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return\
    \ fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n\
    \    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n      \
    \  return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n\
    \    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n \
    \       return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n        fmt.Println(\"\
    Base must be greater than or equal to 2.\")\n        return \"\"\n    }\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpu4kloxq7_test.go:75: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpu4kloxq7_test.go:75: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpu4kloxq7_test.go:75:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpu4kloxq7_test.go:75: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpu4kloxq7_test.go:75: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpu4kloxq7_test.go:75: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpu4kloxq7_test.go:75:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpu4kloxq7_test.go:75: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpu4kloxq7_test.go:75: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpu4kloxq7_test.go:75: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpu4kloxq7_test.go:75:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpu4kloxq7_test.go:75: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074536
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 2 {\n            return \"\"\n        }\n   \
    \     return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 3:\n\
    \        if x < 3 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 4:\n        if x < 4 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 5:\n\
    \        if x < 5 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 6:\n        if x < 6 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 7:\n\
    \        if x < 7 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 8:\n        if x < 8 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 9:\n\
    \        if x < 9 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 10:\n        if x < 10 {\n            return \"\"\n        }\n     \
    \   return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    default:\n\
    \        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2608zjm_test.go:23:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:28:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:33:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:38:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:43:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:48:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:53:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:58:16: undefined: strconv

    /tmp/tmpr2608zjm_test.go:63:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base is less than 10\")\n        return \"\"\n    }\n\
    \    if x < 0 {\n        fmt.Println(\"x is less than 0\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base is less than 10\nbase is less than 10\nbase is less than 10\nbase\
    \ is less than 10\nbase is less than 10\nbase is less than 10\nbase is less than\
    \ 10\nbase is less than 10\nbase is less than 10\nbase is less than 10\nbase is\
    \ less than 10\nbase is less than 10\n--- FAIL: TestChange_Base (0.00s)\n    ---\
    \ FAIL: TestChange_Base/test_num__0 (0.00s)\n        tmpwfto7mu0_test.go:55: expected\
    \ '22', got ''\n    --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmpwfto7mu0_test.go:55:\
    \ expected '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmpwfto7mu0_test.go:55: expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpwfto7mu0_test.go:55: expected '10000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__4 (0.00s)\n        tmpwfto7mu0_test.go:55: expected\
    \ '1000', got ''\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpwfto7mu0_test.go:55:\
    \ expected '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmpwfto7mu0_test.go:55: expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmpwfto7mu0_test.go:55: expected '3', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmpwfto7mu0_test.go:55: expected\
    \ '4', got ''\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n        tmpwfto7mu0_test.go:55:\
    \ expected '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n \
    \       tmpwfto7mu0_test.go:55: expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11\
    \ (0.00s)\n        tmpwfto7mu0_test.go:55: expected '7', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2.\")\n        return \"\"\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpi8fuqqmf_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpi8fuqqmf_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpi8fuqqmf_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpi8fuqqmf_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpi8fuqqmf_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpi8fuqqmf_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpi8fuqqmf_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpi8fuqqmf_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpi8fuqqmf_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpi8fuqqmf_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpi8fuqqmf_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpi8fuqqmf_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       fmt.Println(\"x must be greater than 0\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp__tbr4of_test.go:59: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp__tbr4of_test.go:59: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp__tbr4of_test.go:59:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp__tbr4of_test.go:59: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp__tbr4of_test.go:59: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp__tbr4of_test.go:59: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp__tbr4of_test.go:59:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp__tbr4of_test.go:59: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp__tbr4of_test.go:59: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp__tbr4of_test.go:59: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp__tbr4of_test.go:59:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp__tbr4of_test.go:59: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074536
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
