name: HumanEval_8_sum_product
language: go_test.go
prompt: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // For a given list of integers, return a list consisting of a sum and a product\
  \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty product\
  \ should be equal to 1.\n// >>> sum_product(float64{})\n// []interface{}{0, 1}\n\
  // >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
  \ []int) []interface{} {\n"
tests: "func TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1} },\n  \
  \   { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0} },\n   \
  \  { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105} },\n  \
  \   { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) == 0 {\n        return nil\n    }\n    sum := float64(0)\n\
    \    product := float64(1)\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    sum := make([]interface{}, 0)\n    product := make([]interface{}, 0)\n\
    \    for _, number := range numbers {\n        sum = append(sum, number)\n   \
    \     product = append(product, number*number)\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return nil\n    }\n   \
    \ sum := float64(0)\n    product := float64(1)\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := make([]interface{}, len(numbers))\n    product :=\
    \ make([]interface{}, len(numbers))\n    for i, number := range numbers {\n  \
    \      sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return nil\n    }\n   \
    \ sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    if len(numbers) == 0 {\n        return nil\n    }\n\n    sum := 0\n\
    \    product := 1\n    for _, number := range numbers {\n        sum += number\n\
    \        product *= number\n    }\n\n    return []interface{}{sum, product}\n\
    }\n", "    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n\
    \n    sum := 0\n    product := 1\n    for _, number := range numbers {\n     \
    \   sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return nil\n    }\n   \
    \ sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum\
    \ += number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    if len(numbers) == 0 {\n        return nil\n    }\n    sum := 0\n \
    \   product := 1\n    for _, number := range numbers {\n        sum += number\n\
    \        product *= number\n    }\n    return []interface{}{sum, product}\n}\n",
  "    if len(numbers) == 0 {\n        return nil\n    }\n    sum := numbers[0]\n\
    \    product := 1\n    for _, number := range numbers[1:] {\n        sum += number\n\
    \        product *= number\n    }\n    return []interface{}{sum, product}\n}\n",
  "    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n", "    sum := make([]interface{}, len(numbers))\n    product :=\
    \ make([]interface{}, len(numbers))\n    for i, n := range numbers {\n       \
    \ sum[i] = n\n        product[i] = 1\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    if len(numbers) == 0 {\n        return nil\n    }\n    sum := numbers[0]\n\
    \    product := 1\n    for _, number := range numbers[1:] {\n        sum += number\n\
    \        product *= number\n    }\n    return []interface{}{sum, product}\n}\n",
  "    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n    sum\
    \ := 0\n    product := 1\n    for _, number := range numbers {\n        sum +=\
    \ number\n        product *= number\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    sum := make([]interface{}, 0)\n    product := make([]interface{}, 0)\n\
    \    for _, number := range numbers {\n        sum += number\n        product\
    \ *= number\n    }\n    return []interface{}{sum, product}\n}\n", "    sum :=\
    \ 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n\
    \        product *= number\n    }\n    return []interface{}{sum, product}\n}\n",
  "    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    for i, number := range numbers {\n        sum[i] = number\n\
    \        product[i] = number\n    }\n    return []interface{}{sum, product}\n\
    }\n", "    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    for i, n := range numbers {\n        sum[i] = n\n       \
    \ product[i] = 1\n    }\n    return []interface{}{sum, product}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
