name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary\
  \ had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"\
  simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n\
  // []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"\
  }\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    words := []string{}\n    words := select_words_test.select_words(s,\
    \ n, words)\n    return words\n}\n", "    // Your code here\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ []rune(\"bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    // TODO: Write your solution here\n\
    \    return nil\n}\n", "    \n}\n", "    words := []string{}\n    for _, w :=\
    \ range strings.Split(s, \" \") {\n        words := append(words, w)\n    }\n\
    \    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // TODO: Write your solution here\n    return nil\n}\n", "    words\
    \ := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n   \
    \ \n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n    for _, letter :=\
    \ range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            words = append(words, letter)\n     \
    \   }\n    }\n    \n    for _, letter := range s {\n        if letter == 'a' ||\
    \ letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n       \
    \     words = append(words, letter)\n        }\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words :=\
    \ []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    words := []string{}\n    for _, w := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(w, consonants) {\n            words\
    \ = append(words, w)\n        }\n    }\n    return words\n}\n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return nil\n}\n", "    words := []string{}\n \
    \   for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    words := []string{}\n    words := select_words_test.select_words(s,\
    \ n, words)\n    return words\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    words := []string{}\n    \n    if len(s) == 0 {\n   \
    \     return words\n    }\n    \n    for _, letter := range s {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i", "    \n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // Write your code\
    \ here\n    \n    \n    return []string{}\n}\n", "    \n    // Write your code\
    \ here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    words := make([]string, 0)\n    words := append(words,\
    \ s)\n    words := append(words, \" \")\n    words := append(words, \" \")\n \
    \   words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    words := append(words, \" \")\n    words := append(words, \" \"\
    )\n    words := append(words, \" \")\n    words := append(words, \" \")\n    words\
    \ := append(words, \" \")\n    words := append(words, \" \")\n    words := append(words,\
    \ \" \")\n    ", "    // Your code here\n    \n    return []string{}\n}\n", " \
    \   // TODO: Write your solution here\n    return nil\n}\n", "    // Write your\
    \ code here\n    \n    return []string{}\n}\n", "    words := make([]string, 0)\n\
    \    words := append(words, s)\n    return words\n}\n", "    // Your code here\n\
    \    words := make([]string, 0)\n    for _, word := range strings.Split(s, \"\
    \ \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    words := []string{}\n    \n\
    \    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n \
    \       \n        for j := 0; j < len(s); j++ {\n            if s[i] == s[j] {\n\
    \                continue \n            }\n        }\n        \n        words\
    \ = append(words, s[:i])\n    }\n    \n    return words\n}\n", "    \n}\n", " \
    \   // TODO: Write your solution here\n    return nil\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        count := 0\n    \
    \    for _, letter := range word {\n            if letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n                count++\n\
    \            }\n        }\n        if count == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    \n}\n", "    // Write\
    \ your code here\n    \n    return []string{}\n}\n", "    // TODO: Write your\
    \ solution here\n    return []string{}\n}\n", "    // Write your code here\n \
    \   \n    \n    return []string{}\n}\n", "    words := []string{}\n    for _,\
    \ word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    \n}\n", "    // TODO: Write your code here\n    return []string{}\n\
    }\n", "    \n    // Write your code here\n    \n    return nil\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonants) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    \n}\n",
  "    // Your code here\n    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    words := []string{}\n    \n  \
    \  if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter := range\
    \ s {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter ==\
    \ 'o' || letter == 'u' {\n            words = append(words, letter)\n        }\n\
    \    }\n    \n    return words\n}\n", "    words := []string{}\n    \n    if s\
    \ == \"\" {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n   \
    \     if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ {\n            continue\n        }\n        \n        if s[i] == 'y' {\n   \
    \         if i+1 < len(s) {\n                if s[i+1] == 'a' || s[i+1] == 'e'\
    \ || s[i+1] == 'i' || s[i+1] == 'o' || s[i+1] == 'u' {\n                    continue\n\
    \                }\n            }\n        }\n        \n        if s[i] == 's'\
    \ || s[i] == 't' || s[i] == 'd' || s[i] == 'r' || s[i] == 'h' || s[i] == 'n' ||\
    \ s[i] == 'g' {\n            if i+1 < len(s) {\n                if s[i+1] == 'a'\
    \ || s[i+1] == 'e' || s[i+1] == 'i' || s[i+1] == 'o' || s[i+1] == 'u' {\n    \
    \                continue\n                }\n            }\n        }\n     \
    \   \n        if s[i] == 'c' || s[i] == 'l' || s[i] == 'm' || s[i] == 'p' || s[i]\
    \ == 'f' || s[i] == 'v' || s[i] == 'b' || s[i] == 'j' {\n            if i+1 <\
    \ len(s) {\n                if s[i+1] == 'a' || s[i+1] == 'e' || s[i+1] == 'i'\
    \ || s[i+1] == 'o' || s[i+1] == 'u' {\n                    continue\n        \
    \        }\n            }\n        }\n        \n        if s[i] == 'k' || s[i]\
    \ == 'j' || s[i] == 'q' || s[i] == 'p' || s[i] == 'v' || s[i] == 'b' || s[i] ==\
    \ 'j' {\n            if i+1 < len(s) {\n                if s[i+1] == 'a' || s[i+1]\
    \ == 'e' || s[i+1] == 'i' || s[i+1] == 'o' || s[i+1] == 'u' {\n              \
    \      continue\n                }\n            }\n        }\n        \n     \
    \   if s[i] == 'm' || s[i] == 'a' || s[i] == 'p' || s[i] == 'l' || s[i] == 'u'\
    \ || s[i] == 's' {\n            if i+1 < len(s) {\n                if s[i+1] ==\
    \ 'a' || s[i+1] == 'e' || s[i+1] == 'i' || s[i+1] == 'o' || s[i+1] == 'u' {\n\
    \                    continue\n                }\n            }\n        }\n \
    \       \n        if s[i] == 'n' || s[i] == 'g' || s[i] == 'h' || s[i] == 'r'\
    \ || s[i] == 'd' || s[i] == 't' || s[i] == 'b' || s[i] == 'j' {\n            if\
    \ i+1 < len(s) {\n                if s[i+1] == 'a' || s[i+1] == 'e' || s[i+1]\
    \ == 'i' || s[i+1] == 'o' || s[i+1] == 'u' {\n                    continue\n \
    \               }\n            }\n        }\n        \n        if s[i] == 'c'\
    \ || s[i] == 'k' || ", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    words := select_words_test.select_words(s, n, words)\n    return words\n\
    }\n", "    words := []string{}\n    words := append(words, select_words_test.select_words(s,\
    \ n)...)\n    return words\n}\n", "    // Your code here\n    words := make([]string,\
    \ 0)\n    if len(s) == 0 {\n        return words\n    }\n    words := make([]string,\
    \ 0)\n    for _, char := range s {\n        if char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u' {\n            words = append(words, char)\n\
    \        }\n    }\n    return words\n}\n", "    // TODO: Write your solution here\n\
    \    return nil\n}\n", "    // Your code here\n    words := []string{}\n    words\
    \ := append(words, s)\n    return words\n}\n", "    words := []string{}\n    \n\
    \    if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter :=\
    \ range s {\n        if letter == \" \" {\n            continue\n        }\n \
    \       \n        count := 0\n        for _, letter := range s {\n           \
    \ if letter == letter {\n                count++\n            }\n        }\n \
    \       \n        if count == n {\n            words = append(words, s)\n    \
    \    }\n    }\n    \n    return words\n}\n", "    // TODO: Write your code here\n\
    \    return nil\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    // Your code here\n    \n    return []string{}\n}\n", "    \n    words\
    \ := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n   \
    \ \n    for _, letter := range s {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    // Your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Write your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return nil\n}\n", "    words := []string{}\n    for\
    \ _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Write your code here\n    \n    return nil\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    // Your code here\n    \n \
    \   return []string{}\n}\n", "    // TODO: Write your code here\n    return nil\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // TODO:\
    \ Write your code here\n    \n    return nil\n}\n", "    \n}\n", "    \n    //\
    \ TODO: Write your code here\n    \n    return []string{}\n}\n", "    \n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    \n}\n", "    //\
    \ TODO: Write your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    \n}\n", "    \n}\n", "  \
    \  // TODO: Write your solution here\n    return []string{}\n}\n", "    // Write\
    \ your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    \n    // TODO: Write your code here\n\
    \    \n    return []string{}\n}\n", "    words := []string{}\n    \n    // TODO:\
    \ Write your code here\n    \n    return words\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    // TODO: Write your solution here\n    return nil\n}\n",
  "    \n}\n", "    // TODO: Write your solution here\n    return nil\n}\n", "   \
    \ // Your code here\n    \n    return nil\n}\n", "    \n    // Your code here\n\
    \    \n    return nil\n}\n", "    // TODO: Write your solution here\n    \n  \
    \  return nil\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    // TODO: Write your solution here\n    \n    return []string{}\n}\n", "   \
    \ \n}\n", "    // TODO: Write your solution here\n    return nil\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if\
    \ strings.ContainsAny(word, consonants) {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    \n    // Write your code here\n\
    \    \n    return []string{}\n}\n", "    words := []string{}\n    \n    if len(s)\
    \ == 0 {\n        return words\n    }\n    \n    for _, letter := range s {\n\
    \        if letter == ' ' || letter == '\\t' || letter == '\\n' || letter == '\\\
    r' {\n            continue\n        }\n        \n        if n == 1 {\n       \
    \     words = append(words, letter)\n        } else {\n            count := 0\n\
    \            for _, letter := range s {\n                if letter == ' ' || letter\
    \ == '\\t' || letter == '\\n' || letter == '\\r' {\n                    continue\n\
    \                }\n                \n                if letter == letter {\n\
    \                    count++\n                }\n            }\n            \n\
    \            if count == n {\n                words = append(words, letter)\n\
    \            }\n        }\n    }\n    \n    return words\n}\n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    // TODO: Write your solution here\n\
    \    return []string{}\n}\n", "    // TODO: Write your solution here\n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    // Write your code\
    \ here\n    \n    return nil\n}\n", "    // Write your code here\n    \n    return\
    \ []string{}\n}\n", "    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, consonant) {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    words\
    \ := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n   \
    \ vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n    i := 0\n    j := 0\n  \
    \  k := 0\n    \n    for ; i < len(s); i++ {\n        if s[i] == ' ' {\n     \
    \       words = append(words, s[i : i+1])\n            i += 2\n            continue\n\
    \        }\n        \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u' {\n            k = i\n        }\n        \n     \
    \   if s[i] == ' ' {\n            words = append(words, s[i : i+1])\n        \
    \    i += 2\n            continue\n        }\n        \n        if s[i] == ' '\
    \ {\n            words = append(words, s[i : i+1])\n            i += 2\n     \
    \       continue\n        }\n        \n        if s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            k = i\n        }\n\
    \        \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' {\n            k = i\n        }\n        \n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    k = i\n        }\n        \n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            k = i\n        }\n     \
    \   \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' {\n            k = i\n        }\n        \n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            k =\
    \ i\n        }\n        \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' {\n            k = i\n        }\n        \n  \
    \      if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            k = i\n        }\n        \n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            k = i\n \
    \       }\n        \n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' {\n            k = i\n        }\n        \n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            k = i\n        }", "    // TODO: Write your solution here\n    return\
    \ []string{}\n}\n", "    \n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    words := []string{}\n    \n    if s == \"\" {\n        return words\n\
    \    }\n    \n    for _, letter := range s {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            words\
    \ = append(words, letter)\n        }\n    }\n    \n    return words\n}\n", " \
    \   words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n\
    \        if strings.ContainsAny(word, vowels) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    words := []string{}\n\
    \    \n    if s == \"\" {\n        return words\n    }\n    \n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    \n    for _, letter := range s {\n        if !contains(vowels,\
    \ letter) {\n            words = append(words, letter)\n        }\n    }\n   \
    \ \n    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words :=\
    \ []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   \n    return words\n}\n", "    \n    // TODO: Write your code here\n    \n\
    \    return nil\n}\n", "    // TODO: Write your code here\n    return nil\n}\n",
  "    words := make([]string, 0)\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if strings.ContainsAny(word, consonants) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    // Write your code here\n\
    \    \n    \n    return []string{}\n}\n", "    words := []string{}\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    ", " \
    \   // TODO: Write your solution here\n    return nil\n}\n", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    words := []string{}\n    \n\
    \    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == ' ' || s[i] == '\\t' || s[i] == '\\n' || s[i]\
    \ == '\\r' {\n            continue\n        }\n        \n        for j := 0; j\
    \ < len(s); j++ {\n            if s[i] == s[j] {\n                if j == 0 {\n\
    \                    words = append(words, s[:i])\n                }\n       \
    \         \n                if j == len(s)-1 {\n                    words = append(words,\
    \ s[i+1:])\n                }\n                \n                if j > 0 && s[j-1]\
    \ == s[i] {\n                    words = append(words, s[:j])\n              \
    \  }\n                \n                if j+1 < len(s) && s[j+1] == s[i] {\n\
    \                    words = append(words, s[i+1:j+1])\n                }\n  \
    \              \n                if j+1 < len(s) && s[j+1] == s[i] && s[j-1] !=\
    \ s[i] {\n                    words = append(words, s[i+1:j])\n              \
    \  }\n                \n                if j+1 < len(s) && s[j+1] == s[i] && s[j-1]\
    \ == s[i] {\n                    words = append(words, s[:j+1])\n            \
    \    }\n            }\n        }\n    }\n    \n    return words\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if\
    \ strings.ContainsAny(word, consonants) {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    words := []string{}\n    \n  \
    \  if len(s) == 0 {\n        return words\n    }\n    \n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    \n    for _, letter := range s {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            vowels = append(vowels, letter)\n        }\n    }\n    \n    for\
    \ _, letter := range s {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o", "    \n  \
    \  words := []string{}\n    \n    if len(s) == 0 {\n        return words\n   \
    \ }\n    \n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    \n    for _, letter\
    \ := range s {\n        if !contains(vowels, letter) {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    \n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your code here\n    return\
    \ nil\n}\n", "    // TODO: Write your code here\n    return nil\n}\n", "    \n\
    }\n", "    // TODO: Write your solution here\n    return []string{}\n}\n", " \
    \   \n}\n", "    words := []string{}\n    \n    if s == \"\" {\n        return\
    \ words\n    }\n    \n    for _, letter := range s {\n        if letter == \"\
    \ \" {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(fmt.Sprintf(\"%c\", letter))) {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    // TODO: Write\
    \ your solution here\n    return []string{}\n}\n", "    // Your code here\n  \
    \  \n    return []string{}\n}\n", "    words := []string{}\n    for _, word :=\
    \ range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, consonants)\
    \ {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // TODO: Write your solution here\n    return []string{}\n}\n", " \
    \   // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, letter := range s {\n        if n-- == 0 {\n            words = append(words,\
    \ letter)\n        }\n    }\n    return words\n}\n", "    // TODO: Write your\
    \ solution here\n    return nil\n}\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    // TODO: Write your solution here\n    return nil\n\
    }\n", "    words := []string{}\n    if len(s) == 0 {\n        return words\n \
    \   }\n    words := select_words_helper(s, n, words)\n    return words\n}\n",
  "    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n   \
    \ }\n    \n    for _, letter := range s {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            words\
    \ = append(words, letter)\n        }\n    }\n    \n    return words\n}\n", " \
    \   // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your solution here\n \
    \   return nil\n}\n", "    // Your code here\n    words := []string{}\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n    words\
    \ := strings.Split(s, \" \")\n    words := strings.Spli", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: Write your code here\n    \n\
    \    return []string{}\n}\n", "    \n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return nil\n}\n", "    //\
    \ Your code here\n    \n    return nil\n}\n", "    words := []string{}\n    \n\
    \    if s == \"\" {\n        return words\n    }\n    \n    for _, letter := range\
    \ s {\n        if letter == \" \" {\n            continue\n        }\n       \
    \ \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    .\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"'s\") {\n            continue\n        }\n       \
    \ \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's\") {\n            continue\n        }\n      \
    \  \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's'\") {\n            continue\n        }\n   \
    \     \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's's's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's's's'\") {\n            continue\n        }\n\
    \        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's's's's's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's's's's'\") {\n            continue\n        }\n\
    \        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's's's's's's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's's's's's'\") {\n            continue\n      \
    \  }\n        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's's's's's's's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's's's's's's'\") {\n            continue\n    \
    \    }\n        \n        if strings.Contains(strings.ToLower(letter), strings.ToLower(letter)+\"\
    s's's's's's's's'\") {\n            continue\n        }\n        \n        if strings.Contains(strings.ToLower(letter),\
    \ strings.ToLower(letter)+\"s's's's's's's's'\") {\n", "    words := []string{}\n\
    \    words := strings.Split(s, \" \")\n    for _, word := range words {\n    \
    \    words := strings.Split(word, \" \")\n        for _, word := range words {\n\
    \            words := strings.Split(word, \"\")\n            for _, word := range\
    \ words {\n                words := strings.Split(word, \"\")\n              \
    \  for _, word := range words {\n                    words := strings.Split(word,\
    \ \"\")\n                    for _, word := range words {\n                  \
    \      words := strings.Split(word, \"\")\n                        for _, word\
    \ := range words {\n                            words := strings.Split(word, \"\
    \")\n                            for _, word := range words {\n              \
    \                  words := strings.Split(word, \"\")\n                      \
    \          for _, word := range words {\n                                    words\
    \ := strings.Split(word, \"\")\n                                    for _, word\
    \ := range words {\n                                        words := strings.Split(word,\
    \ \"\")\n                                        for _, word := range words {\n\
    \                                            words := strings.Split(word, \"\"\
    )\n                                            for _, word := range words {\n\
    \                                                words := strings.Split(word,\
    \ \"\")\n                                                for _, word := range\
    \ words {\n                                                    words := strings.Split(word,\
    \ \"\")\n                                                    for _, word := range\
    \ words {\n                                                        words := strings.Split(word,\
    \ \"\")\n                                                        for _, word :=\
    \ range words {\n                                                            words\
    \ := strings.Split(word, \"\")\n                                             \
    \               for _, word := range words {\n                               \
    \                                 words := strings.Split(word, \"\")\n       \
    \                                                         for _, word := range\
    \ words {\n                                                                  \
    \  words := strings.Split(word, \"\")\n                                      \
    \                              for _, word := range words {\n                \
    \                                                        words := strings.Split(word,\
    \ \"\")\n                                                                    \
    \    for _, word := range words {\n                                          \
    \                                  words := strings.Split(word, \"\")\n      \
    \                                                                      for _,\
    \ word := range words {\n                                                    \
    \                            words := strings.Split(word, \"\")\n            \
    \                                                                    for _, word\
    \ := range words {\n                                                         \
    \                           words := strings.Split(word, \"\")\n             \
    \                                                                       for _,\
    \ word := range words {\n                                                    \
    \                                    words := strings.Split(word, \"\")\n    \
    \                                                                            \
    \        for _, word := range words {\n                                      \
    \                                                      words := strings.Split(word,\
    \ \"\")\n                                                                    \
    \                        for _, word := range words {\n                      \
    \                                                                          words\
    \ := strings.Split(word, \"\")\n                                             \
    \                                                   for _, word := range words\
    \ {\n                                                                        \
    \                            words := strings.Split(word, \"\")\n            \
    \                                                                            \
    \            for _, word := range words {\n                                  \
    \                                                                      words :=\
    \ strings.Split(word, \"\")\n                                                \
    \                                                        for _, word := range\
    \ words {\n                                                                  \
    \                                          words := strings.Split(word, \"\")\n\
    \                                                                            \
    \                                for _, word := range words {\n              \
    \                                                                            \
    \                      words := strings.Split(word, \"\")", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    words := []string{}\n    \n  \
    \  if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == ' ' {\n            words = append(words, s[:i])\n\
    \            s = s[i+1:]\n        }\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        for j := 0; j < len(s); j++ {\n            if s[i] == s[j] {\n\
    \                if j == i+n {\n                    words = append(words, s[:j])\n\
    \                }\n            }\n        }\n    }\n    \n    return words\n\
    }\n", "    // Your code here\n    \n    return nil\n}\n", "    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, word\
    \ := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, consonants)\
    \ {\n            if len(word) == n {\n                words = append(words, word)\n\
    \            }\n        }\n    }\n    \n    return words\n}\n", "    words :=\
    \ []string{}\n    words := append(words, s)\n    return words\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    words := []string{}\n   \
    \ for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ consonants) {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    // Write your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // TODO:\
    \ Write your solution here\n    return []string{}\n}\n", "    \n    // TODO: Write\
    \ your solution here\n    \n    return nil\n}\n", "    \n}\n", "    \n}\n", " \
    \   // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == \" \" {\n            continue\n        }\n\
    \        \n        if letter == \"a\" || letter == \"e\" || letter == \"i\" ||\
    \ letter == \"o\" || letter == \"u\" {\n            continue\n        }\n    \
    \    \n        if letter == \"y\" {\n            if n == 1 {\n               \
    \ continue\n            }\n            \n            if n == 2 {\n           \
    \     words = []string{\"you\"}\n                continue\n            }\n   \
    \         \n            if n == 3 {\n                words = []string{\"you\"\
    , \"your\"}\n                continue\n            }\n            \n         \
    \   if n == 4 {\n                words = []string{\"you\", \"your\", \"you're\"\
    }\n                continue\n            }\n            \n            if n ==\
    \ 5 {\n                words = []string{\"you\", \"your\", \"you're\", \"you've\"\
    }\n                continue\n            }\n            \n            if n ==\
    \ 6 {\n                words = []string{\"you\", \"your\", \"you're\", \"you've\"\
    , \"yours\"}\n                continue\n            }\n            \n        \
    \    if n == 7 {\n                words = []string{\"you\", \"your\", \"you're\"\
    , \"you've\", \"yours\", \"you'll\"}\n                continue\n            }\n\
    \            \n            if n == 8 {\n                words = []string{\"you\"\
    , \"your\", \"you're\", \"you've\", \"yours\", \"you'll\", \"you'd\"}\n      \
    \          continue\n            }\n            \n            if n == 9 {\n  \
    \              words = []string{\"you\", \"your\", \"you're\", \"you've\", \"\
    yours\", \"you'll\", \"you'd\", \"you've\"}\n                continue\n      \
    \      }\n            \n            if n == 10 {\n                words = []string{\"\
    you\", \"your\", \"you're\", \"you've\", \"yours\", \"you'll\", \"you'd\", \"\
    you've\", \"yourself\"}\n                continue\n            }\n           \
    \ \n            if n == 11 {\n                words = []string{\"you\", \"your\"\
    , \"you're\", \"you've\", \"yours\", \"you'll\", \"you'd\", \"you've\", \"yourself\"\
    , \"you're\"}\n                continue\n            }\n            \n       \
    \     if n == 12 {\n                words = []string{\"you\", \"your\", \"you're\"\
    , \"you've\", \"yours\", \"you'll\", \"you'd\", \"you've\", \"yourself\", \"you're\"\
    , \"you've\"}\n                continue\n            }\n            \n       \
    \     if n == 13 {\n                words = []string{\"you\", \"your\", \"you're\"\
    , \"you've\", \"yours\", \"you'll\", \"you'd\", \"you've\", \"yourself\", \"you'",
  "    words := []string{}\n    for _, letter := range s {\n        if n == 0 {\n\
    \            break\n        }\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            n = n - 1\n        \
    \    if n == 0 {\n                words = append(words, letter)\n            }\n\
    \        }\n    }\n    return words\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    \n}\n", "    \n    // Your code here\n    \n    return\
    \ nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if\
    \ strings.ContainsAny(word, consonants) {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    // TODO: Write your solution here\n\
    \    return []string{}\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    // Your code here\n    words := []string{}\n    for _, word :=\
    \ range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, consonants)\
    \ {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    words := []string{}\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if strings.ContainsAny(word, consonants) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    \n}\n", "    \n    //\
    \ TODO: Write your code here\n    \n    return nil\n}\n", "    // TODO: Write\
    \ your code here\n    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
