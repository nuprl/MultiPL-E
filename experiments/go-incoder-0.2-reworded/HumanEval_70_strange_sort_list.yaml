name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3,\
  \ 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5,\
  \ 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
  \ []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Sort list with minimum value first\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    // Sort list with maximum value first\n    for _, v := range lst {\n   \
    \     if v < max {\n            max = v\n        }\n        if v < min {\n   \
    \         min = v\n        }\n    }\n\n    // Sort list with minimum value last\n\
    \    for _, v := range lst {\n        if v > min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n\n    //\
    \ Sort list with maximum value last\n    for _, v := range lst {\n        if v\
    \ > max {\n            max = v\n        }\n        if v < min {\n            min\
    \ = v\n        }\n    }\n\n    return lst\n}\n", "    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n  \
    \      if lst[i] > max {\n            lst[i] = max\n        }\n        if lst[i]\
    \ < min {\n            lst[i] = min\n        }\n        result[i] = lst[i]\n \
    \   }\n    return result\n}\n", "    min := lst[0]\n    max := lst[0]\n    for\
    \ _, v := range lst {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n", "    // Sort list by first element, if\
    \ equal, sort by second element,\n    // if equal, sort by third element, etc.\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n", "    n\
    \ := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n    i := 0\n    j := n\
    \ - 1\n    for i < j {\n        if lst[i] > max {\n            max = lst[i]\n\
    \            j = i\n        } else if lst[j] < min {\n            min = lst[j]\n\
    \            i = j\n        } else {\n            i++\n            j--\n     \
    \   }\n    }\n    return lst[i:] + lst[:i]\n}\n", "    var result []int\n    var\
    \ min int\n    var max int\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for _, v := range lst {\n        if v == min {\n       \
    \     result = append(result, max)\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    for _, v := range lst {\n        if v == max {\n \
    \           result = append(result, min)\n        } else {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    lst = append([]int{min, max}, lst...)\n    return lst\n\
    }\n", "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n\
    \    return lst\n}\n", "    // Initialize min and max values.\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n\n    // Initialize new list with min and max values.\n    result\
    \ := make([]int, 0, 2)\n    for _, v := range lst {\n        if v == min {\n \
    \           result = append(result, min)\n        }\n        if v == max {\n \
    \           result = append(result, max)\n        }\n    }\n\n    // Append remaining\
    \ values.\n    for _, v := range lst {\n        if v != min && v != max {\n  \
    \          result = append(result, v)\n        }\n    }\n\n    return result\n\
    }\n", "    n := len(lst)\n    min := lst[0]\n    max := lst[n-1]\n    for i :=\
    \ 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    result := make([]int, 0, n-1)\n    for i := 0; i < n-1; i++ {\n        if\
    \ lst[i] < min {\n            result = append(result, min)\n            lst[i]\
    \ = min\n        }\n        if lst[i] > max {\n            result = append(result,\
    \ max)\n            lst[i] = max\n        }\n    }\n    for i := 0; i < n; i++\
    \ {\n        result = append(result, lst[i])\n    }\n    return result\n}\n",
  "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n", "    // Initialize min and max variables\n    var min int\n    var\
    \ max int\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    // Initialize result list\n    var result []int\n    // Sort list\n    for\
    \ _, v := range lst {\n        if v < min {\n            v = min\n        }\n\
    \        if v > max {\n            v = max\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append([]int{max}, lst...)\n    return lst\n}\n", "    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    result := []int{}\n    for _, v := range lst {\n        if v ==\
    \ min {\n            result = append(result, v)\n        }\n        if v == max\
    \ {\n            result = append(result, v)\n        }\n        if v < min {\n\
    \            result = append(result, v)\n        }\n        if v > max {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    // Initialize min and max values\n    var min, max int\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n\n    // Initialize new list with\
    \ min and max values\n    result := make([]int, 0, 2)\n    for _, v := range lst\
    \ {\n        if v == min {\n            result = append(result, max)\n       \
    \ } else {\n            result = append(result, v)\n        }\n    }\n\n    //\
    \ Append min and max values\n    result = append(result, min)\n    result = append(result,\
    \ max)\n\n    return result\n}\n", "    min := lst[0]\n    max := lst[0]\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n", "    // Initialize min and max to first\
    \ element\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n\n    // Initialize new list with min\
    \ and max values\n    result := make([]int, 0, 2)\n    result = append(result,\
    \ min)\n    result = append(result, max)\n\n    // Sort remaining elements\n \
    \   for _, v := range lst {\n        if v < min {\n            result = append(result,\
    \ v)\n        }\n        if v > max {\n            result = append(result, v)\n\
    \        }\n    }\n\n    return result\n}\n", "    if len(lst) == 0 {\n      \
    \  return []int{}\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min},\
    \ lst...)\n    lst = append([]int{max}, lst...)\n    return lst\n}\n", "    var\
    \ result []int\n    for _, v := range lst {\n        result = append(result, v)\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n\
    \    return lst\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
