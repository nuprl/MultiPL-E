name: HumanEval_44_change_base
language: go_test.go
prompt: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunc change_base(x int, base int) string {\n"
tests: "func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
  \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
  \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
  \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\" },\n\
  \     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
  \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n \
  \    { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
  \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if base < 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %0*d\", x, x)\n    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x*10)\n  \
    \  case 4:\n        return fmt.Sprintf(\"%0*d\", x, x*100)\n    case 5:\n    \
    \    return fmt.Sprintf(\"%0*d\", x, x*1000)\n    case 6:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000)\n    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x*100000)\n\
    \    case 8:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000)\n\
    \    case 14:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case\
    \ 15:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 16:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000000000000)\n    case 17:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 18:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*10000000000000000)\n    case 19:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*100000000000000000)\n    case 20:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000)\n    case 21:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000)\n    case 22:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000)\n    case 23:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000)\n    case 24:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000)\n    case\
    \ 25:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000)\n \
    \   case 26:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000)\n\
    \    case 27:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000)\n\
    \    case 28:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000000)\n\
    \    case 29:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000000)\n\
    \    case 30:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000000)\n\
    \    case 31:\n        return fmt.Sprintf(\"%0", "    if base < 10 {\n       \
    \ fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    ",
  "    if base < 2 {\n        fmt.Println(\"base must be greater than or equal to\
    \ 2\")\n        return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    if base < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x\
    \ /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\", x, change_base(x %\
    \ base, base))\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= ", "    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    ", "    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1.\")\n    \
    \    return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than 10.\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    x must be greater than 0.\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\",\
    \ x)\n}\n", "    if base < 2 {\n        fmt.Println(\"base must be greater than\
    \ 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    base must be less than 10\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ * 10)\n    case 4:\n        return strconv.Itoa(x * 100)\n    case 5:\n    \
    \    return strconv.Itoa(x * 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ * 10000)\n    case 7:\n        return strconv.Itoa(x * 100000)\n    case 8:\n\
    \        return strconv.Itoa(x * 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ * 10000000)\n    case 10:\n        return strconv.Itoa(x * 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x * 1000000000)\n    case 12:\n        return\
    \ strconv.Itoa(x * 10000000000)\n    case 13:\n        return strconv.Itoa(x *\
    \ 100000000000)\n    case 14:\n        return strconv.Itoa(x * 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x * 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x * 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x * 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ * 10000000000000000)\n    case 19:\n        return strconv.Itoa(x * 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x * 1000000000000000000)\n    case\
    \ 21:\n        return strconv.Itoa(x * 10000000000000000000)\n    case 22:\n \
    \       return strconv.Itoa(x * 100000000000000000000)\n    case 23:\n       \
    \ return strconv.Itoa(x * 1000000000000000000000)\n    case 24:\n        return\
    \ strconv.Itoa(x * 10000000000000000000000)\n    case 25:\n        return strconv.Itoa(x\
    \ * 100000000000000000000000)\n    case 26:\n        return strconv.Itoa(x * 1000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x * 10000000000000000000000000)\n \
    \   case 28:\n        return strconv.Itoa(x * 100000000000000000000000000)\n \
    \   case 29:\n        return strconv.Itoa(x * 1000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x * 10000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x * 100000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x * ", "    if base < 2 {\n       \
    \ fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n    case\
    \ 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return strconv.Itoa(base*x*x*x)\n\
    \    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n    case 6:\n       \
    \ return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n        return strconv.Itoa(base*x*x*x*x*x*x)\n\
    \    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n    case 9:\n \
    \       return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n        return\
    \ strconv.Itoa(base*x*x*x*x*x*x*x*x*x)\n    default:\n        fmt.Println(\"Base\
    \ must be less than 10.\")\n        return \"\"\n    }\n}\n", "    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    ", "    if base < 2 {\n        fmt.Println(\"Base must be greater than or\
    \ equal to 2.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n", "    if base < 2 {\n        fmt.Println(\"\
    base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"base must be less than or equal to 10\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x -= base\n    if x < 0 {\n        x += 10\n    }\n    x\
    \ /= base\n    x += 1\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", " \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base\
    \ < 10 {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
