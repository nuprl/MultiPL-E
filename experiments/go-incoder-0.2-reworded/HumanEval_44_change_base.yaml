name: HumanEval_44_change_base
language: go_test.go
prompt: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunc change_base(x int, base int) string {\n"
tests: "func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
  \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
  \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
  \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\" },\n\
  \     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
  \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n \
  \    { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
  \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if base < 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %0*d\", x, x)\n    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x*10)\n  \
    \  case 4:\n        return fmt.Sprintf(\"%0*d\", x, x*100)\n    case 5:\n    \
    \    return fmt.Sprintf(\"%0*d\", x, x*1000)\n    case 6:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000)\n    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x*100000)\n\
    \    case 8:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000)\n\
    \    case 14:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case\
    \ 15:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 16:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000000000000)\n    case 17:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 18:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*10000000000000000)\n    case 19:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*100000000000000000)\n    case 20:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000)\n    case 21:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000)\n    case 22:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000)\n    case 23:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000)\n    case 24:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000)\n    case\
    \ 25:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000)\n \
    \   case 26:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000)\n\
    \    case 27:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000)\n\
    \    case 28:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000000)\n\
    \    case 29:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000000)\n\
    \    case 30:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000000)\n\
    \    case 31:\n        return fmt.Sprintf(\"%0", "    if base < 10 {\n       \
    \ fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    ",
  "    if base < 2 {\n        fmt.Println(\"base must be greater than or equal to\
    \ 2\")\n        return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    if base < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x\
    \ /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\", x, change_base(x %\
    \ base, base))\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= ", "    if base < 10 {\n        fmt.Println(\"Base must\
    \ be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    ", "    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1.\")\n    \
    \    return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than 10.\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    x must be greater than 0.\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\",\
    \ x)\n}\n", "    if base < 2 {\n        fmt.Println(\"base must be greater than\
    \ 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    base must be less than 10\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ * 10)\n    case 4:\n        return strconv.Itoa(x * 100)\n    case 5:\n    \
    \    return strconv.Itoa(x * 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ * 10000)\n    case 7:\n        return strconv.Itoa(x * 100000)\n    case 8:\n\
    \        return strconv.Itoa(x * 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ * 10000000)\n    case 10:\n        return strconv.Itoa(x * 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x * 1000000000)\n    case 12:\n        return\
    \ strconv.Itoa(x * 10000000000)\n    case 13:\n        return strconv.Itoa(x *\
    \ 100000000000)\n    case 14:\n        return strconv.Itoa(x * 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x * 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x * 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x * 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ * 10000000000000000)\n    case 19:\n        return strconv.Itoa(x * 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x * 1000000000000000000)\n    case\
    \ 21:\n        return strconv.Itoa(x * 10000000000000000000)\n    case 22:\n \
    \       return strconv.Itoa(x * 100000000000000000000)\n    case 23:\n       \
    \ return strconv.Itoa(x * 1000000000000000000000)\n    case 24:\n        return\
    \ strconv.Itoa(x * 10000000000000000000000)\n    case 25:\n        return strconv.Itoa(x\
    \ * 100000000000000000000000)\n    case 26:\n        return strconv.Itoa(x * 1000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x * 10000000000000000000000000)\n \
    \   case 28:\n        return strconv.Itoa(x * 100000000000000000000000000)\n \
    \   case 29:\n        return strconv.Itoa(x * 1000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x * 10000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x * 100000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x * ", "    if base < 2 {\n       \
    \ fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n    case\
    \ 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return strconv.Itoa(base*x*x*x)\n\
    \    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n    case 6:\n       \
    \ return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n        return strconv.Itoa(base*x*x*x*x*x*x)\n\
    \    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n    case 9:\n \
    \       return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n        return\
    \ strconv.Itoa(base*x*x*x*x*x*x*x*x*x)\n    default:\n        fmt.Println(\"Base\
    \ must be less than 10.\")\n        return \"\"\n    }\n}\n", "    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    ", "    if base < 2 {\n        fmt.Println(\"Base must be greater than or\
    \ equal to 2.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n", "    if base < 2 {\n        fmt.Println(\"\
    base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"base must be less than or equal to 10\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x -= base\n    if x < 0 {\n        x += 10\n    }\n    x\
    \ /= base\n    x += 1\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", " \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base\
    \ < 10 {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    ", "    if base < 10 {\n        fmt.Println(\"Base must be less than\
    \ 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\"\
    , x, change_base(x % base, base))\n}\n", "    if base < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\"\
    , x, change_base(base,\n        int(base*float64(x))))\n}\n", "    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than or equal to 2\")\n        return \"\"\n    }\n    switch\
    \ base {\n    case 2:\n        return strconv.Itoa(int(x))\n    case 3:\n    \
    \    return strconv.Itoa(int(x)*10)\n    case 4:\n        return strconv.Itoa(int(x)*100)\n\
    \    case 5:\n        return strconv.Itoa(int(x)*1000)\n    case 6:\n        return\
    \ strconv.Itoa(int(x)*10000)\n    case 7:\n        return strconv.Itoa(int(x)*100000)\n\
    \    case 8:\n        return strconv.Itoa(int(x)*1000000)\n    case 9:\n     \
    \   return strconv.Itoa(int(x)*10000000)\n    case 10:\n        return strconv.Itoa(int(x)*100000000)\n\
    \    case 11:\n        return strconv.Itoa(int(x)*1000000000)\n    case 12:\n\
    \        return strconv.Itoa(int(x)*10000000000)\n    case 13:\n        return\
    \ strconv.Itoa(int(x)*100000000000)\n    case 14:\n        return strconv.Itoa(int(x)*1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(int(x)*10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(int(x)*100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(int(x)*1000000000000000)\n    case 18:\n        return strconv.Itoa(int(x)*10000000000000000)\n\
    \    case 19:\n        return strconv.Itoa(int(x)*100000000000000000)\n    case\
    \ 20:\n        return strconv.Itoa(int(x)*1000000000000000000)\n    case 21:\n\
    \        return strconv.Itoa(int(x)*10000000000000000000)\n    case 22:\n    \
    \    return strconv.Itoa(int(x)*100000000000000000000)\n    case 23:\n       \
    \ return strconv.Itoa(int(x)*1000000000000000000000)\n    case 24:\n        return\
    \ strconv.Itoa(int(x)*10000000000000000000000)\n    case 25:\n        return strconv.Itoa(int(x)*100000000000000000000000)\n\
    \    case 26:\n        return strconv.Itoa(int(x)*1000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(int(x)*10000000000000000000000000)\n\
    \    case 28:\n        return strconv.Itoa(int(x)*100000000000000000000000000)\n\
    \    case 29:\n        return strconv.Itoa(int(x)*1000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(int(x)*10000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(int(x)*100000000000000000000000000000)\n",
  "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1\")\n     \
    \   return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base3(x))\n    case 4:\n        return\
    \ strconv.Itoa(base4(x))\n    case 5:\n        return strconv.Itoa(base5(x))\n\
    \    case 6:\n        return strconv.Itoa(base6(x))\n    case 7:\n        return\
    \ strconv.Itoa(base7(x))\n    case 8:\n        return strconv.Itoa(base8(x))\n\
    \    case 9:\n        return strconv.Itoa(base9(x))\n    case 10:\n        return\
    \ strconv.Itoa(base10(x))\n    default:\n        fmt.Println(\"Base must be less\
    \ than 10\")\n        return \"\"\n    }\n}\n", "    switch base {\n    case 2:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        if x % 2 ==\
    \ 0 {\n            return fmt.Sprintf(\"%d\", x/2)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d\", x/2, x%2)\n    case 3:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x % 3 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/3)\n        }\n        return fmt.Sprintf(\"%d%d%d\", x/3, x%3, x%3)\n\
    \    case 4:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   if x % 4 == 0 {\n            return fmt.Sprintf(\"%d\", x/4)\n        }\n\
    \        return fmt.Sprintf(\"%d%d%d%d\", x/4, x%4, x%4, x%4)\n    case 5:\n \
    \       if x == 0 {\n            return \"0\"\n        }\n        if x % 5 ==\
    \ 0 {\n            return fmt.Sprintf(\"%d\", x/5)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d%d%d%d\", x/5, x%5, x%5, x%5, x%5)\n    case 6:\n        if\
    \ x == 0 {\n            return \"0\"\n        }\n        if x % 6 == 0 {\n   \
    \         return fmt.Sprintf(\"%d\", x/6)\n        }\n        return fmt.Sprintf(\"\
    %d%d%d%d%d%d\", x/6, x%6, x%6, x%6, x%6, x%6)\n    case 7:\n        if x == 0\
    \ {\n            return \"0\"\n        }\n        if x % 7 == 0 {\n          \
    \  return fmt.Sprintf(\"%d\", x/7)\n        }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d\"\
    , x/7, x%7, x%7, x%7, x%7, x%7, x%7)\n    case 8:\n        if x == 0 {\n     \
    \       return \"0\"\n        }\n        if x % 8 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/8)\n        }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/8, x%8,\
    \ x%8, x%8, x%8, x%8, x%8)\n    case 9:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        if x % 9 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/9)\n        }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/9, x%9,\
    \ x%9, x%9, x%9, x%9, x%9)\n    case 10:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        if x % 10 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/10)\n        }\n        return fmt.Sprintf(\"%d%d%d%d%d%d%d%d\", x/10,\
    \ x%10, x%10, x%10, x%10, x%10, x%10)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be\
    \ greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| a tags=go,algorithm |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n", "    if base\
    \ < 2 {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n \
    \       return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must\
    \ be less than or equal to 10.\")\n        return \"\"\n    }\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(int(x))\n    case 3:\n        return\
    \ strconv.Itoa(int(x)*10)\n    case 4:\n        return strconv.Itoa(int(x)*100)\n\
    \    case 5:\n        return strconv.Itoa(int(x)*1000)\n    case 6:\n        return\
    \ strconv.Itoa(int(x)*10000)\n    case 7:\n        return strconv.Itoa(int(x)*100000)\n\
    \    case 8:\n        return strconv.Itoa(int(x)*1000000)\n    case 9:\n     \
    \   return strconv.Itoa(int(x)*10000000)\n    case 10:\n        return strconv.Itoa(int(x)*100000000)\n\
    \    default:\n        fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\"\
    )\n        return \"\"\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than or equal to 2.\")\n        return \"\"\n    }\n    if base == 2 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n", "    switch base {\n    case 2:\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1.\")\n        return \"\"\n    }\n    if base > 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    ", "    x -= '0'\n    base -= '0'\n    if base < 0 || base > 9 {\n      \
    \  fmt.Println(\"Invalid base\")\n        return \"\"\n    }\n    x /= base\n\
    \    x += '0'\n    x /= base\n    x += '0'\n    return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x)\n}\n", "    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    case 11:\n        return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000)\n    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n\
    \    case 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case\
    \ 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    if base < 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%v\", x,\
    \ base)\n}\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base\
    \ < 2 {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n  \
    \      return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must\
    \ be less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x ", "    switch base {\n    case 2:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 3:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 4:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 5:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 6:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 7:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 8:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 9:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 10:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    case 11:\n        if x < 10 {\n    \
    \        return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 12:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 13:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    case 14:\n        if x < 10 {\n    \
    \        return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 15:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 16:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    case 17:\n        if x < 10 {\n    \
    \        return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 18:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 19:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    case 20:\n        if x < 10 {\n    \
    \        return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 21:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", ", "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base\
    \ must be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x ",
  "    if base < 2 {\n        fmt.Println(\"base must be greater than 1\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if\
    \ base < 2 {\n        fmt.Println(\"Base must be greater than 1.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"\
    Cannot change base of 0.\")\n        return \"\"\n    }\n    if x == 1 {\n   \
    \     fmt.Println(\"Cannot change base of 1.\")\n        return \"\"\n    }\n\
    \    if x == 2 {\n        fmt.Println(\"Cannot change base of 2.\")\n        return\
    \ \"\"\n    }\n    if x == 3 {\n        fmt.Println(\"Cannot change base of 3.\"\
    )\n        return \"\"\n    }\n    if x == 4 {\n        fmt.Println(\"Cannot change\
    \ base of 4.\")\n        return \"\"\n    }\n    if x == 5 {\n        fmt.Println(\"\
    Cannot change base of 5.\")\n        return \"\"\n    }\n    if x == 6 {\n   \
    \     fmt.Println(\"Cannot change base of 6.\")\n        return \"\"\n    }\n\
    \    if x == 7 {\n        fmt.Println(\"Cannot change base of 7.\")\n        return\
    \ \"\"\n    }\n    if x == 8 {\n        fmt.Println(\"Cannot change base of 8.\"\
    )\n        return \"\"\n    }\n    if x == 9 {\n        fmt.Println(\"Cannot change\
    \ base of 9.\")\n        return \"\"\n    }\n    if x == 10 {\n        fmt.Println(\"\
    Cannot change base of 10.\")\n        return \"\"\n    }\n    if x == 11 {\n \
    \       fmt.Println(\"Cannot change base of 11.\")\n        return \"\"\n    }\n\
    \    if x == 12 {\n        fmt.Println(\"Cannot change base of 12.\")\n      \
    \  return \"\"\n    }\n    if x == 13 {\n        fmt.Println(\"Cannot change base\
    \ of 13.\")\n        return \"\"\n    }\n    if x == 14 {\n        fmt.Println(\"\
    Cannot change base of 14.\")\n        return \"\"\n    }\n    if x == 15 {\n \
    \       fmt.Println(\"Cannot change base of 15.\")\n        return \"\"\n    }\n\
    \    if x == 16 {\n        fmt.Println(\"Cannot change base of 16.\")\n      \
    \  return \"\"\n    }\n    if x == 17 {\n        fmt.Println(\"Cannot change base\
    \ of 17.\")\n        return \"\"\n    }\n    if x == 18 {\n        fmt.Println(\"\
    Cannot change base of 18.\")\n        return \"\"\n    }\n    if x == 19 {\n \
    \       fmt.Println(\"Cannot change base of 19.\")\n        return \"\"\n    }\n\
    \    if x == 20 {\n        fmt.Println(\"Cannot change base of 20.\")\n      \
    \  return \"\"\n    }\n    if x == 21 {\n        fmt.Println(\"Cannot change base\
    \ of 21.\")\n        return \"\"\n    }\n    if x == 22 {\n        fmt.Println(\"\
    Cannot change base of 22.", "    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d%s\", x, change_base(x % base, base))\n}\n", "    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n\
    \    case 13:\n        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000)\n    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n\
    \    case 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case\
    \ 19:\n        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base < 10 {\n      \
    \  return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"base\
    \ must be greater than 1\")\n        return \"\"\n    }\n    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    if x < 0 {\n        fmt.Println(\"\
    x must be greater than 0\")\n        return \"\"\n    }\n    x /= base\n    x\
    \ %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x ", "    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    switch base {\n\
    \    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 3:\n        if\
    \ x < 100 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%d\", x/100)\n    case 4:\n        if x < 1000 {\n           \
    \ return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%d\"\
    , x/1000)\n    case 5:\n        if x < 10000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 6:\n\
    \        if x < 100000 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/100000)\n    case 7:\n        if x < 1000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/1000000)\n    case 8:\n        if x < 10000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case\
    \ 9:\n        if x < 100000000 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 10:\n  \
    \      if x < 1000000000 {\n            return fmt.Sprintf(\"%d\", x)\n      \
    \  }\n        return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n       \
    \ return \"\"\n    }\n}\n", "    if base < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\"\
    , x, change_base(base,\n        int(math.Log(x, base))))\n}\n", "    if base <\
    \ 2 {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n   \
    \     return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must\
    \ be less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        fmt.Println(\"Cannot change base of 0.\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    switch\
    \ base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n  \
    \      return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base < 10 {\n        fmt.Printf(\"\
    base must be less than 10\\n\")\n        return \"\"\n    }\n    x /= base\n \
    \   x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n<|/ a tags=go |>\n\
    <| c |>\nThis does not work for negative numbers. `change_base(-7, 2)` returns\
    \ `\"111\"` instead of `\"-1\"`.\n<|/ c |>\n<| c |>\nThis does not work for negative\
    \ numbers. `change_base(-7, 2)` returns `\"111\"` instead of `\"-1\"`.\n<|/ c\
    \ |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n",
  "    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    switch\
    \ base {\n    case 2:\n        return strconv.Itoa(int(base*x))\n    case 3:\n\
    \        return strconv.Itoa(int(base*x)+10)\n    case 4:\n        return strconv.Itoa(int(base*x)+100)\n\
    \    case 5:\n        return strconv.Itoa(int(base*x)+1000)\n    case 6:\n   \
    \     return strconv.Itoa(int(base*x)+10000)\n    case 7:\n        return strconv.Itoa(int(base*x)+100000)\n\
    \    case 8:\n        return strconv.Itoa(int(base*x)+1000000)\n    case 9:\n\
    \        return strconv.Itoa(int(base*x)+10000000)\n    case 10:\n        return\
    \ strconv.Itoa(int(base*x)+100000000)\n    case 11:\n        return strconv.Itoa(int(base*x)+1000000000)\n\
    \    case 12:\n        return strconv.Itoa(int(base*x)+10000000000)\n    case\
    \ 13:\n        return strconv.Itoa(int(base*x)+100000000000)\n    case 14:\n \
    \       return strconv.Itoa(int(base*x)+1000000000000)\n    case 15:\n       \
    \ return strconv.Itoa(int(base*x)+10000000000000)\n    case 16:\n        return\
    \ strconv.Itoa(int(base*x)+100000000000000)\n    case 17:\n        return strconv.Itoa(int(base*x)+1000000000000000)\n\
    \    case 18:\n        return strconv.Itoa(int(base*x)+10000000000000000)\n  \
    \  case 19:\n        return strconv.Itoa(int(base*x)+100000000000000000)\n   \
    \ case 20:\n        return strconv.Itoa(int(base*x)+1000000000000000000)\n   \
    \ default:\n        fmt.Printf(\"Base %d is not supported!\\n\", base)\n    }\n\
    \    return \"\"\n}\n", "    if base < 2 {\n        fmt.Println(\"base must be\
    \ greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= ", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= ", "    if base\
    \ < 10 {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    ", "    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= ", "    if base < 10 {\n      \
    \  fmt.Printf(\"base must be less than 10.\\n\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   ", "    if base < 2 {\n        fmt.Println(\"Base must be less than 2\")\n\
    \        return \"\"\n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n", "    x -= (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"base must be greater than 1\")\n        return \"\"\n \
    \   }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x -= base\n    x /= base\n    x += 1\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"base\
    \ is less than 2\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    base is greater than 10\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", " \
    \   if base < 2 {\n        fmt.Println(\"base must be greater than or equal to\
    \ 2\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    base must be less than or equal to 10\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= ",
  "    if base < 10 {\n        fmt.Println(\"Base must be less than 10\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    ", "    if base < 2 {\n        fmt.Println(\"Base must be\
    \ greater than or equal to 2\")\n        return \"\"\n    }\n    if base > 10\
    \ {\n        fmt.Println(\"Base must be less than or equal to 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater than or equal\
    \ to 2\")\n        return \"\"\n    }\n    switch base {\n    case 2:\n      \
    \  return strconv.Itoa(base10(x))\n    case 3:\n        return strconv.Itoa(base10(x*base))\n\
    \    case 4:\n        return strconv.Itoa(base10(x*base*base))\n    case 5:\n\
    \        return strconv.Itoa(base10(x*base*base*base))\n    case 6:\n        return\
    \ strconv.Itoa(base10(x*base*base*base*base))\n    case 7:\n        return strconv.Itoa(base10(x*base*base*base*base*base))\n\
    \    case 8:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base))\n\
    \    case 9:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base))\n\
    \    case 10:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base*base))\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n", "    if base < 10 {\n        fmt.Println(\"Base must be less\
    \ than 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    ", "    if base < 2 {\n        fmt.Println(\"\
    base must be less than 10\")\n        return \"\"\n    }\n    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    x -= '0'\n    x /= base\n    x\
    \ += '0'\n    x /= base\n    return fmt.Sprintf(\"%0\"+strconv.Itoa(base)+\"d\"\
    , x)\n}\n", "    if base < 10 {\n        fmt.Println(\"base must be less than\
    \ 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n  \
    \  }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x ", "    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x ", "    if base < 10 {\n  \
    \      fmt.Printf(\"base must be less than 10\\n\")\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base", " \
    \   switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1.\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base\
    \ must be less than 10.\")\n        return \"\"\n    }\n    switch base {\n  \
    \  case 2:\n        return strconv.Itoa(int(x))\n    case 3:\n        return strconv.Itoa(int(x)*10)\n\
    \    case 4:\n        return strconv.Itoa(int(x)*100)\n    case 5:\n        return\
    \ strconv.Itoa(int(x)*1000)\n    case 6:\n        return strconv.Itoa(int(x)*10000)\n\
    \    case 7:\n        return strconv.Itoa(int(x)*100000)\n    case 8:\n      \
    \  return strconv.Itoa(int(x)*1000000)\n    case 9:\n        return strconv.Itoa(int(x)*10000000)\n\
    \    case 10:\n        return strconv.Itoa(int(x)*100000000)\n    default:\n \
    \       fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\")\n        return\
    \ \"\"\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than 1\")\n        return \"\"\n    }\n    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%v\", x, base)\n}\n", "    if base < 2 {\n       \
    \ fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n     \
    \   return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x %=\
    \ base\n    if x < base {\n        x += (base - 1)\n    }\n    x /= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    base must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"base must be less than 10\")\n        return \"\"\n   \
    \ }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= ", "    switch base {\n    case 2:\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x ", "    if base < 2 {\n        fmt.Println(\"Base must be greater than\
    \ 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %=\
    \ base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n    x\
    \ += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /= base\n\
    \    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    x /= base\n    x += 1\n    x %= base\n\
    \    x /= base\n    x += 1\n    ", "    if base < 10 {\n        fmt.Println(\"\
    Base number should be less than 10.\")\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x ", "    if base < 2 {\n        fmt.Println(\"Base must be greater than\
    \ or equal to 2\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than or equal to 10\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 10 {\n        return fmt.Sprintf(\"%d\", x)\n \
    \   }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%v\", x, base)\n\
    }\n", "    if base < 10 {\n        fmt.Printf(\"base must be less than 10.\\n\"\
    )\n        return \"\"\n    }\n    switch base {\n    case 2:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n\
    \    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n       \
    \ return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"\
    %d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n  \
    \  case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n     \
    \   return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%d\", x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return fmt.Sprintf(\"\
    %d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n\
    \    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case\
    \ 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n    \
    \    return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n       \
    \ fmt.Printf(\"Base must be less than 20.\\n\")\n        return \"\"\n    }\n\
    }\n", "    if base < 2 {\n        fmt.Println(\"base must be greater than 1\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base\
    \ must be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n       \
    \ fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    switch base {\n\
    \    case 2:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\"\
    )\n        }\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n    \
    \    }\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 4:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\"\
    )\n        }\n        x /= 10\n        x /= 10\n        x /= 10\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 5:\n        if x < 0 {\n            fmt.Printf(\"\
    x is negative.\\n\")\n        }\n        x /= 10\n        x /= 10\n        x /=\
    \ 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 6:\n  \
    \      if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 7:\n        if x < 0\
    \ {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n        x /= 10\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        if x < 0\
    \ {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n        x /= 10\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 9:\n\
    \        if x < 0 {\n            fmt.Printf(\"x is negative.\\n\")\n        }\n\
    \        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        if x < 0 {\n            fmt.Printf(\"x is negative.\\\
    n\")\n        }\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n\
    \        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    default:\n      \
    \  fmt.Printf(\"base is out of range.\\n\")\n    }\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n\
    \    case 6:\n        return strconv.Itoa(x / 10000)\n    case 7:\n        return\
    \ strconv.Itoa(x / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n\
    \    case 9:\n        return strconv.Itoa(x / 10000000)\n    case 10:\n      \
    \  return strconv.Itoa(x / 100000000)\n    case 11:\n        return strconv.Itoa(x\
    \ / 1000000000)\n    case 12:\n        return strconv.Itoa(x / 10000000000)\n\
    \    case 13:\n        return strconv.Itoa(x / 100000000000)\n    case 14:\n \
    \       return strconv.Itoa(x / 1000000000000)\n    case 15:\n        return strconv.Itoa(x\
    \ / 10000000000000)\n    case 16:\n        return strconv.Itoa(x / 100000000000000)\n\
    \    case 17:\n        return strconv.Itoa(x / 1000000000000000)\n    case 18:\n\
    \        return strconv.Itoa(x / 10000000000000000)\n    case 19:\n        return\
    \ strconv.Itoa(x / 100000000000000000)\n    case 20:\n        return strconv.Itoa(x\
    \ / 1000000000000000000)\n    case 21:\n        return strconv.Itoa(x / 10000000000000000000)\n\
    \    case 22:\n        return strconv.Itoa(x / 100000000000000000000)\n    case\
    \ 23:\n        return strconv.Itoa(x / 1000000000000000000000)\n    case 24:\n\
    \        return strconv.Itoa(x / 10000000000000000000000)\n    case 25:\n    \
    \    return strconv.Itoa(x / 100000000000000000000000)\n    case 26:\n       \
    \ return strconv.Itoa(x / 1000000000000000000000000)\n    case 27:\n        return\
    \ strconv.Itoa(x / 10000000000000000000000000)\n    case 28:\n        return strconv.Itoa(x\
    \ / 100000000000000000000000000)\n    case 29:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000000)\n    case 30:\n        return strconv.Itoa(x\
    \ / 10000000000000000000000000000)\n    case 31:\n        return strconv.Itoa(x\
    \ / 100000000000000000000000000000)\n    case 32:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000000000)\n    case 33:\n        return strconv.Itoa(x\
    \ / 10000000000000000000000000000000)\n    case 34:\n        return strconv.Itoa(x\
    \ / 100000000000000000000000000000000)\n    case 35:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000000000000)\n    case 36:\n        return strconv.Itoa(x\
    \ / 100000000000000000000000000", "    x -= base\n    x /= base\n    x += 1\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base*float64(x))))\n\
    }\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base\
    \ must be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x ",
  "    if base < 2 {\n        fmt.Println(\"base must be greater than 1\")\n     \
    \   return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    if base == 2 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    }\n    if base == 8 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n  \
    \  }\n    if base == 16 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n   \
    \ }\n    if base == 32 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 64 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n \
    \   if base == 128 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n \
    \   if base == 256 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n \
    \   if base == 512 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n \
    \   if base == 1024 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 2048 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 4096 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 8192 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 16384 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 32768 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 65536 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 131072 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 262144 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 524288 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n    }\n\
    \    if base == 1048576 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n   \
    \ }\n    if base == 2097152 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    }\n    if base == 4194304 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    }\n    if base == 8388608 {\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    }\n    if base == 16777216 {\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    }\n    if base == 33554432 {\n        return fmt.Sprintf(\"%0*d\", base,\
    \ x)\n    }\n    if base == 67", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than or equal to 2.\")\n        return \"\"\n    }\n    if base\
    \ > 10 {\n        fmt.Println(\"Base must be less than or equal to 10.\")\n  \
    \      return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= ", "    switch base {\n  \
    \  case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return\
    \ fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n\
    \    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n      \
    \  return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n\
    \    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n \
    \       return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    if x == 0 {\n        fmt.Println(\"Cannot change base of 0\")\n     \
    \   return \"\"\n    }\n    if x == 1 {\n        fmt.Println(\"Cannot change base\
    \ of 1\")\n        return \"\"\n    }\n    if x == 2 {\n        fmt.Println(\"\
    Cannot change base of 2\")\n        return \"\"\n    }\n    if x == 3 {\n    \
    \    fmt.Println(\"Cannot change base of 3\")\n        return \"\"\n    }\n  \
    \  if x == 4 {\n        fmt.Println(\"Cannot change base of 4\")\n        return\
    \ \"\"\n    }\n    if x == 5 {\n        fmt.Println(\"Cannot change base of 5\"\
    )\n        return \"\"\n    }\n    if x == 6 {\n        fmt.Println(\"Cannot change\
    \ base of 6\")\n        return \"\"\n    }\n    if x == 7 {\n        fmt.Println(\"\
    Cannot change base of 7\")\n        return \"\"\n    }\n    if x == 8 {\n    \
    \    fmt.Println(\"Cannot change base of 8\")\n        return \"\"\n    }\n  \
    \  if x == 9 {\n        fmt.Println(\"Cannot change base of 9\")\n        return\
    \ \"\"\n    }\n    if x == 10 {\n        fmt.Println(\"Cannot change base of 10\"\
    )\n        return \"\"\n    }\n    if x == 11 {\n        fmt.Println(\"Cannot\
    \ change base of 11\")\n        return \"\"\n    }\n    if x == 12 {\n       \
    \ fmt.Println(\"Cannot change base of 12\")\n        return \"\"\n    }\n    if\
    \ x == 13 {\n        fmt.Println(\"Cannot change base of 13\")\n        return\
    \ \"\"\n    }\n    if x == 14 {\n        fmt.Println(\"Cannot change base of 14\"\
    )\n        return \"\"\n    }\n    if x == 15 {\n        fmt.Println(\"Cannot\
    \ change base of 15\")\n        return \"\"\n    }\n    if x == 16 {\n       \
    \ fmt.Println(\"Cannot change base of 16\")\n        return \"\"\n    }\n    if\
    \ x == 17 {\n        fmt.Println(\"Cannot change base of 17\")\n        return\
    \ \"\"\n    }\n    if x == 18 {\n        fmt.Println(\"Cannot change base of 18\"\
    )\n        return \"\"\n    }\n    if x == 19 {\n        fmt.Println(\"Cannot\
    \ change base of 19\")\n        return \"\"\n    }\n    if x == 20 {\n       \
    \ fmt.Println(\"Cannot change base of 20\")\n        return \"\"\n    }\n    if\
    \ x == 21 {\n        fmt.Println(\"Cannot change base of 21\")\n        return\
    \ \"\"\n    }\n    if x == 22 {\n        fmt.Println(\"Cannot change base of 22\"\
    )\n        return \"\"\n    }\n", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than or equal to 2\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    ", " \
    \   if base < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    switch base {\n\
    \    case 2:\n        return strconv.Itoa(int(strconv.Itoa(x)))\n    case 3:\n\
    \        return strconv.Itoa(int(strconv.Itoa(x/10)*10 + strconv.Itoa(int(strconv.Itoa(x%10))))\n\
    \    case 4:\n        return strconv.Itoa(int(strconv.Itoa(x/100)*100 + strconv.Itoa(int(strconv.Itoa(x%100))))\n\
    \    case 5:\n        return strconv.Itoa(int(strconv.Itoa(x/1000)*1000 + strconv.Itoa(int(strconv.Itoa(x%1000))))\n\
    \    case 6:\n        return strconv.Itoa(int(strconv.Itoa(x/10000)*10000 + strconv.Itoa(int(strconv.Itoa(x%10000))))\n\
    \    case 7:\n        return strconv.Itoa(int(strconv.Itoa(x/100000)*100000 +\
    \ strconv.Itoa(int(strconv.Itoa(x%100000))))\n    case 8:\n        return strconv.Itoa(int(strconv.Itoa(x/1000000)*1000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%1000000))))\n    case 9:\n        return strconv.Itoa(int(strconv.Itoa(x/10000000)*10000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%10000000))))\n    case 10:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/100000000)*100000000 + strconv.Itoa(int(strconv.Itoa(x%100000000))))\n\
    \    case 11:\n        return strconv.Itoa(int(strconv.Itoa(x/1000000000)*1000000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%1000000000))))\n    case 12:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/10000000000)*10000000000 + strconv.Itoa(int(strconv.Itoa(x%10000000000))))\n\
    \    case 13:\n        return strconv.Itoa(int(strconv.Itoa(x/100000000000)*100000000000\
    \ + strconv.Itoa(int(strconv.Itoa(x%100000000000))))\n    case 14:\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x/1000000000000)*1000000000000 + strconv.Itoa(int(strconv.Itoa(x%1000000000000))))\n\
    \    case 15:\n        return strconv.Itoa(int(strconv.Itoa(x/10000000000000)*",
  "    x -= (x % base)\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= ", "    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than or equal to 2.\")\n        return \"\"\n    }\n    if base > 10 {\n   \
    \     fmt.Println(\"Base must be less than or equal to 10.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x ", "    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be less than 2\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    switch base {\n    case 2:\n        if x == 0 {\n            return \"\
    0\"\n        }\n        if x == 1 {\n            return \"1\"\n        }\n   \
    \     if x == 2 {\n            return \"2\"\n        }\n        if x == 3 {\n\
    \            return \"3\"\n        }\n        if x == 4 {\n            return\
    \ \"4\"\n        }\n        if x == 5 {\n            return \"5\"\n        }\n\
    \        if x == 6 {\n            return \"6\"\n        }\n        if x == 7 {\n\
    \            return \"7\"\n        }\n        if x == 8 {\n            return\
    \ \"8\"\n        }\n        if x == 9 {\n            return \"9\"\n        }\n\
    \        if x == 10 {\n            return \"A\"\n        }\n        if x == 11\
    \ {\n            return \"B\"\n        }\n        if x == 12 {\n            return\
    \ \"C\"\n        }\n        if x == 13 {\n            return \"D\"\n        }\n\
    \        if x == 14 {\n            return \"E\"\n        }\n        if x == 15\
    \ {\n            return \"F\"\n        }\n        if x == 16 {\n            return\
    \ \"G\"\n        }\n        if x == 17 {\n            return \"H\"\n        }\n\
    \        if x == 18 {\n            return \"I\"\n        }\n        if x == 19\
    \ {\n            return \"J\"\n        }\n        if x == 20 {\n            return\
    \ \"K\"\n        }\n        if x == 21 {\n            return \"L\"\n        }\n\
    \        if x == 22 {\n            return \"M\"\n        }\n        if x == 23\
    \ {\n            return \"N\"\n        }\n        if x == 24 {\n            return\
    \ \"O\"\n        }\n        if x == 25 {\n            return \"P\"\n        }\n\
    \        if x == 26 {\n            return \"Q\"\n        }\n        if x == 27\
    \ {\n            return \"R\"\n        }\n        if x == 28 {\n            return\
    \ \"S\"\n        }\n        if x == 29 {\n            return \"T\"\n        }\n\
    \        if x == 30 {\n            return \"U\"\n        }\n        if x == 31\
    \ {\n            return \"V\"\n        }\n        if x == 32 {\n            return\
    \ \"W\"\n        }\n        if x == 33 {\n            return \"X\"\n        }\n\
    \        if x == 34 {\n            return \"Y\"\n        }\n        if x == 35\
    \ {\n            return \"Z\"\n        }\n        if x == 36 {\n            return\
    \ \"0\"\n        }\n        if x == 37 {\n            return \"1\"\n        }\n\
    \        if x == 38 {\n            return \"2\"\n        }\n        if x == 39\
    \ {\n            return \"3\"\n        }\n        if x == 40:\n            return\
    \ \"4\"\n        }\n        if x == 41 {\n            return \"5\"\n        }\n\
    \        if x == 42 {\n            return \"6\"\n        }\n        if x == 43\
    \ {\n            return \"", "    if base < 10 {\n        fmt.Printf(\"base must\
    \ be less than 10\\n\")\n        return \"\"\n    }\n    if x == 0 {\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"base must be greater\
    \ than or equal to 2\")\n        return \"\"\n    }\n    if base == 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 1\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x ", "    switch base {\n    case 2:\n        if x\
    \ < 10 {\n            return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 3))\n    case 3:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 6))\n    case 4:\n    \
    \    if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 9))\n    case 5:\n        if x < 10 {\n        \
    \    return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 12))\n    case 6:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 15))\n    case 7:\n   \
    \     if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 18))\n    case 8:\n        if x < 10 {\n       \
    \     return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 21))\n    case 9:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 24))\n    case 10:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 27))\n    case 11:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 30))\n    case 12:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 33))\n    case 13:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 36))\n    case 14:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 39))\n    case 15:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 42))\n    case 16:\n  \
    \      if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, 45))\n    case 17:\n        if x < 10 {\n      \
    \      return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ 48))\n    case 18:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, 51))\n", "    if base <\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n", "  \
    \  if base < 2 {\n        fmt.Println(\"Base must be greater than 2.\")\n    \
    \    return \"error\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must\
    \ be less than 10.\")\n        return \"error\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base", "    if\
    \ base < 2 {\n        fmt.Println(\"Base must be greater than or equal to 2\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base\
    \ must be less than or equal to 10\")\n        return \"\"\n    }\n    if x ==\
    \ 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than or equal to 2\")\n        return \"\"\n    }\n    if base > 10 {\n    \
    \    fmt.Println(\"Base must be less than or equal to 10\")\n        return \"\
    \"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    if x < 0 {\n     \
    \   fmt.Println(\"Negative number is not allowed\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n   \
    \     return fmt.Sprintf(\"%d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base\
    \ < 2 {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n \
    \       return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must\
    \ be less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n", "    if base < 10 {\n        fmt.Printf(\"Base must be less than\
    \ 10\\n\")\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x -= (x % base)\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    if base < 2 {\n        fmt.Println(\"base must be less than 2\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n   \
    \     return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Println(\"base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n", "    switch base {\n    case 2:\n        if x < 10 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 3:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 4:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 5:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 6:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 7:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 8:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 9:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 10:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be\
    \ greater than or equal to 2.\")\n        return \"\"\n    }\n    if base > 10\
    \ {\n        fmt.Println(\"Base must be less than or equal to 10.\")\n       \
    \ return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x ", "    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base100(x))\n    case 4:\n        return\
    \ strconv.Itoa(base1000(x))\n    case 5:\n        return strconv.Itoa(base10000(x))\n\
    \    case 6:\n        return strconv.Itoa(base100000(x))\n    case 7:\n      \
    \  return strconv.Itoa(base1000000(x))\n    case 8:\n        return strconv.Itoa(base10000000(x))\n\
    \    case 9:\n        return strconv.Itoa(base100000000(x))\n    case 10:\n  \
    \      return strconv.Itoa(base1000000000(x))\n    case 11:\n        return strconv.Itoa(base10000000000(x))\n\
    \    case 12:\n        return strconv.Itoa(base100000000000(x))\n    case 13:\n\
    \        return strconv.Itoa(base1000000000000(x))\n    case 14:\n        return\
    \ strconv.Itoa(base10000000000000(x))\n    case 15:\n        return strconv.Itoa(base100000000000000(x))\n\
    \    case 16:\n        return strconv.Itoa(base1000000000000000(x))\n    case\
    \ 17:\n        return strconv.Itoa(base10000000000000000(x))\n    case 18:\n \
    \       return strconv.Itoa(base100000000000000000(x))\n    case 19:\n       \
    \ return strconv.Itoa(base1000000000000000000(x))\n    case 20:\n        return\
    \ strconv.Itoa(base10000000000000000000(x))\n    case 21:\n        return strconv.Itoa(base100000000000000000000(x))\n\
    \    case 22:\n        return strconv.Itoa(base1000000000000000000000(x))\n  \
    \  case 23:\n        return strconv.Itoa(base10000000000000000000000(x))\n   \
    \ case 24:\n        return strconv.Itoa(base100000000000000000000000(x))\n   \
    \ case 25:\n        return strconv.Itoa(base1000000000000000000000000(x))\n  \
    \  case 26:\n        return strconv.Itoa(base10000000000000000000000000(x))\n\
    \    case 27:\n        return strconv.Itoa(base100000000000000000000000000(x))\n\
    \    case 28:\n        return strconv.Itoa(base1000000000000000000000000000(x))\n\
    \    case 29:\n        return strconv.Itoa(base10000000000000000000000000000(x))\n\
    \    case 30:\n        return strconv.Itoa(base100000000000000000000000000000(x))\n\
    \    case 31:\n        return strconv.Itoa(base1000000000000000000000000000000(x))\n\
    \    case 32:\n        return strconv.Itoa(base10000000000000000000000000000000(x))\n\
    \    case 33:\n        return strconv.Itoa(base100000000000000000000000000000000(x))\n\
    \    case 34:\n        return strconv.Itoa(", "    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n\
    \        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"Input number\
    \ must be greater than 0\")\n        return \"\"\n    }\n    if base == 2 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n \
    \   }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n   \
    \ if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base ==\
    \ 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n   \
    \     return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"\
    %o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base ==\
    \ 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n   \
    \ if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base ==\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n   \
    \     return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n \
    \   }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n   \
    \ if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base ==\
    \ 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base == ", "    if\
    \ base < 10 {\n        fmt.Println(\"base must be less than 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    ", "    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    x -= '0'\n\
    \    base -= '0'\n    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n \
    \   return fmt.Sprintf(\"%0\"+strconv.Itoa(base)+\"d\", x)\n}\n", "    if base\
    \ < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    base must be greater than or equal to 2\")\n        return \"\"\n    }\n    if\
    \ base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n\
    \        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than or equal to 2.\")\n        return \"\"\n    }\n    if base > 10 {\n   \
    \     fmt.Println(\"Base must be less than or equal to 10.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n</code>\n<|/ a tags=go,string |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"math\"\n)\n", "    if base < 10 {\n        fmt.Printf(\"\
    Base must be less than 10.\\n\")\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    ", "    if base\
    \ < 2 {\n        fmt.Println(\"Base must be greater than 1\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x ", "    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    if base < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x\
    \ /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\", x, change_base(x %\
    \ base, base))\n}\n", "    if base < 10 {\n        fmt.Printf(\"Base numbers are\
    \ less than 10\\n\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 2 == 0 {\n            return strconv.Itoa(x/2) + change_base(x%2, base)\n  \
    \      }\n        return strconv.Itoa(x/2) + change_base(x%2, base)\n    case\
    \ 3:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 3 == 0 {\n            return strconv.Itoa(x/3) + change_base(x%3, base)\n  \
    \      }\n        return strconv.Itoa(x/3) + change_base(x%3, base)\n    case\
    \ 4:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 4 == 0 {\n            return strconv.Itoa(x/4) + change_base(x%4, base)\n  \
    \      }\n        return strconv.Itoa(x/4) + change_base(x%4, base)\n    case\
    \ 5:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 5 == 0 {\n            return strconv.Itoa(x/5) + change_base(x%5, base)\n  \
    \      }\n        return strconv.Itoa(x/5) + change_base(x%5, base)\n    case\
    \ 6:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 6 == 0 {\n            return strconv.Itoa(x/6) + change_base(x%6, base)\n  \
    \      }\n        return strconv.Itoa(x/6) + change_base(x%6, base)\n    case\
    \ 7:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 7 == 0 {\n            return strconv.Itoa(x/7) + change_base(x%7, base)\n  \
    \      }\n        return strconv.Itoa(x/7) + change_base(x%7, base)\n    case\
    \ 8:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 8 == 0 {\n            return strconv.Itoa(x/8) + change_base(x%8, base)\n  \
    \      }\n        return strconv.Itoa(x/8) + change_base(x%8, base)\n    case\
    \ 9:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 9 == 0 {\n            return strconv.Itoa(x/9) + change_base(x%9, base)\n  \
    \      }\n        return strconv.Itoa(x/9) + change_base(x%9, base)\n    case\
    \ 10:\n        if x == 0 {\n            return \"0\"\n        }\n        if x\
    \ % 10 == 0 {\n            return strconv.Itoa(x/10) + change_base(x%10, base)\n\
    \        }\n        return strconv.Itoa(x/10) + change_base(x%10, base)\n", " \
    \   if base < 10 {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x ",
  "    if base < 2 {\n        fmt.Println(\"Base must be greater than 1.\")\n    \
    \    return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"\
    Cannot change base of 0.\")\n        return \"\"\n    }\n    x /= base\n    x\
    \ %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n    \
    \    fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x -= base\n    x\
    \ /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    x -= base\n    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    switch base {\n    case 2:\n        if x < 10 {\n       \
    \     return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 3:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 4:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 5:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 6:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 7:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 8:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 9:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 10:\n  \
    \      if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be\
    \ less than 2\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x == 0 {\n  \
    \      return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= ", "    x -= (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n", "    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x ", "    x -= '0'\n    base -= '0'\n\
    \    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n    return fmt.Sprintf(\"\
    %0\"+strconv.Itoa(int(base))+\"d\", x)\n}\n", "    if base < 10 {\n        fmt.Printf(\"\
    base numbers are less than 10.\\n\")\n    }\n    if base > 10 {\n        fmt.Printf(\"\
    base numbers are greater than 10.\\n\")\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base",
  "    switch base {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n \
    \       return strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x\
    \ / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n  \
    \      return strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n\
    \        return strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x\
    \ / 100000000)\n    case 11:\n        return strconv.Itoa(x / 1000000000)\n  \
    \  case 12:\n        return strconv.Itoa(x / 1000000000000)\n    case 13:\n  \
    \      return strconv.Itoa(x / 100000000000000)\n    case 14:\n        return\
    \ strconv.Itoa(x / 10000000000000000)\n    case 15:\n        return strconv.Itoa(x\
    \ / 100000000000000000)\n    case 16:\n        return strconv.Itoa(x / 1000000000000000000)\n\
    \    default:\n        return \"\"\n    }\n}\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be less than 2.\")\n        return \"error\"\n    }\n    if base > 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"error\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base", "    if base < 2 {\n        fmt.Println(\"Base must\
    \ be greater than 1\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= ", "    switch base {\n\
    \    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 7:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    case 10:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n", "    if base\
    \ < 2 {\n        fmt.Println(\"base must be greater than 1\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x ", "    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    ", "    if base < 10 {\n        fmt.Println(\"Base must be less than\
    \ 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    ", "    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x ", "    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x ", "    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    x -= (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x +=\
    \ (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x %\
    \ base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n", "    if base < 2 {\n        fmt.Println(\"\
    Base must be greater than 2.\")\n        return \"\"\n    }\n    if base > 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x ", "    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if\
    \ base < 10 {\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base\
    \ must be greater than 2.\")\n        return \"\"\n    }\n    if base > 10 {\n\
    \        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n  \
    \  }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    ", "    switch base {\n    case 2:\n        if x ==\
    \ 0 {\n            return \"0\"\n        }\n        if x < 0 {\n            return\
    \ \"-\" + change_base(-x, 2)\n        }\n        if x < 10 {\n            return\
    \ strconv.Itoa(x)\n        }\n        if x < 100 {\n            return strconv.Itoa(int(x\
    \ / 10))\n        }\n        if x < 1000 {\n            return strconv.Itoa(int(x\
    \ / 100))\n        }\n        if x < 10000 {\n            return strconv.Itoa(int(x\
    \ / 1000))\n        }\n        if x < 100000 {\n            return strconv.Itoa(int(x\
    \ / 10000))\n        }\n        if x < 1000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 10000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 1000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 10000000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 100000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 1000000000000 {\n            return strconv.Itoa(int(x\
    \ / 100000))\n        }\n        if x < 10000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000000000 {\n            return\
    \ strconv.Itoa(int(x / 100000))\n        }\n        if x < 1000000000000000 {\n\
    \            return strconv.Itoa(int(x / 1000000))\n        }\n        if x <\
    \ 10000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n    \
    \    }\n        if x < 100000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 1000000000000000000 {\n            return\
    \ strconv.Itoa(int(x / 100000))\n        }\n        if x < 10000000000000000000\
    \ {\n            return strconv.Itoa(int(x / 1000000))\n        }\n        if\
    \ x < 100000000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n\
    \        }\n        if x < 1000000000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 10000000000000000000000 {\n         \
    \   return strconv.Itoa(int(x / 100000))\n        }\n        if x < 100000000000000000000000\
    \ {\n            return strconv.Itoa(int(x / 1000000))\n        }\n        if\
    \ x < 1000000000000000000000000 {\n            return strconv.Itoa(int(x / 100000))\n\
    \        }\n        if x < 10000000000000000000000000 {\n            return strconv.Itoa(int(x\
    \ / 1000000))\n        }\n        if x < 100000000000000000000000000 {", "   \
    \ if base < 2 {\n        fmt.Println(\"base must be greater than or equal to 2\"\
    )\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base\
    \ must be less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 2 {\n\
    \        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    if x == 1 {\n        return \"\
    1\"\n    }\n    if x == 2 {\n        return \"10\"\n    }\n    if x == 3 {\n \
    \       return \"100\"\n    }\n    if x == 4 {\n        return \"1000\"\n    }\n\
    \    if x == 5 {\n        return \"10000\"\n    }\n    if x == 6 {\n        return\
    \ \"100000\"\n    }\n    if x == 7 {\n        return \"1000000\"\n    }\n    if\
    \ x == 8 {\n        return \"10000000\"\n    }\n    if x == 9 {\n        return\
    \ \"100000000\"\n    }\n    if x == 10 {\n        return \"1000000000\"\n    }\n\
    \    if x == 11 {\n        return \"10000000000\"\n    }\n    if x == 12 {\n \
    \       return \"100000000000\"\n    }\n    if x == 13 {\n        return \"1000000000000\"\
    \n    }\n    if x == 14 {\n        return \"10000000000000\"\n    }\n    if x\
    \ == 15 {\n        return \"100000000000000\"\n    }\n    if x == 16 {\n     \
    \   return \"1000000000000000\"\n    }\n    if x == 17 {\n        return \"10000000000000000\"\
    \n    }\n    if x == 18 {\n        return \"100000000000000000\"\n    }\n    if\
    \ x == 19 {\n        return \"1000000000000000000\"\n    }\n    if x == 20 {\n\
    \        return \"10000000000000000000\"\n    }\n    if x == 21 {\n        return\
    \ \"100000000000000000000\"\n    }\n    if x == 22 {\n        return \"1000000000000000000000\"\
    \n    }\n    if x == 23 {\n        return \"10000000000000000000000\"\n    }\n\
    \    if x == 24 {\n        return \"100000000000000000000000\"\n    }\n    if\
    \ x == 25 {\n        return \"1000000000000000000000000\"\n    }\n    if x ==\
    \ 26 {\n        return \"10000000000000000000000000\"\n    }\n    if x == 27 {\n\
    \        return \"10000000000000000000000000000000000\"\n    }\n    if x == 28\
    \ {\n        return \"100000000000000000000000000000000000\"\n    }\n    if x\
    \ == 29 {\n        return \"1000000000000000000000000000000000000\"\n    }\n \
    \   if x == 30 {\n        return \"10000000000000000000000000000000000000\"\n\
    \    }\n    if x == 31 {\n        return \"100000000000000000000000000000000000000\"\
    \n    }\n    if x == 32 {\n        return \"1000000000000000000000000000000000000000\"\
    \n    }\n    if x == 33 {\n        return \"10000000000000000000000000000000000000000\"\
    \n    }\n    if x == 34 {\n        return \"100000000000000000000000000000000000000000\"\
    \n    }\n    if x == 35 {\n        return \"1000000000000000000000000000000000000000000\"\
    \n    }\n    if x == 36 {\n        return \"10000000000000000000000000000000000000000000\"\
    \n    }\n    if x == 37 {\n        return \"100000000000000000000000000000000000000000000\"\
    \n    }\n    if ", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than 1\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n    if x < 0 {\n   \
    \     fmt.Println(\"x must be greater than 0\")\n        return \"\"\n    }\n\
    \    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if base < 10 {\n\
    \        fmt.Println(\"base must be less than 10\")\n        return \"\"\n   \
    \ }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x ", "    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if base < 2 {\n        fmt.Println(\"Base must be greater\
    \ than or equal to 2.\")\n        return \"\"\n    }\n    if base > 10 {\n   \
    \     fmt.Println(\"Base must be less than or equal to 10.\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n   \
    \     return fmt.Sprintf(\"%d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n\
    \    default:\n        fmt.Println(\"Base must be greater than or equal to 2.\"\
    )\n        return \"\"\n    }\n}\n", "    switch base {\n    case 2:\n       \
    \ if x < 2 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 3:\n        if x < 3 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 4:\n\
    \        if x < 4 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 5:\n        if x < 5 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 6:\n\
    \        if x < 6 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 7:\n        if x < 7 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 8:\n\
    \        if x < 8 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    case 9:\n        if x < 9 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n    case 10:\n\
    \        if x < 10 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(int(strconv.Itoa(x)))))\n\
    \    default:\n        return \"\"\n    }\n}\n", "    if base < 10 {\n       \
    \ fmt.Println(\"base is less than 10\")\n        return \"\"\n    }\n    if x\
    \ < 0 {\n        fmt.Println(\"x is less than 0\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if\
    \ base < 2 {\n        fmt.Println(\"Base must be less than 2.\")\n        return\
    \ \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n  \
    \  }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n", " \
    \   if base < 2 {\n        fmt.Println(\"base must be greater than or equal to\
    \ 2\")\n        return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"\
    base must be less than or equal to 10\")\n        return \"\"\n    }\n    if x\
    \ == 0 {\n        fmt.Println(\"x must be greater than 0\")\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    if base < 10 {\n        fmt.Println(\"Base must be less than 10\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
