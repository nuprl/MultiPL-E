language: go_test.go
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, op := range operations {\n        sum\
    \ += op\n    }\n    if sum < 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpmuv87wva_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmprqeqxu7v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmprqeqxu7v_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmprqeqxu7v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) == 0 {\n        return false\n    }\n\
    \    acc := 0\n    for _, op := range operations {\n        acc += op\n    }\n\
    \    if acc < 0 {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzag3wp4_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp8blxo0ft_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp8blxo0ft_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) == 0 {\n        return false\n    }\n\
    \    acc := 0\n    for _, op := range operations {\n        acc += op\n      \
    \  if acc < 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1goefwbz_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8p1ah9v_test.go:271:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    if sum < 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp_i_heew8_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) == 0 {\n        return false\n    }\n\
    \    acc := 0\n    for _, op := range operations {\n        acc += op\n    }\n\
    \    if acc < 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmprwlzrq_y_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr0lpmdas_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8p1ah9v_test.go:271:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        if\
    \ op > 0 {\n            acc += op\n        }\n    }\n    return acc < 0\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmppt1qea46_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmppt1qea46_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmppt1qea46_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n</code>\n<|/ a tags=go |>\n<| c\
    \ |>\nThank you for your answer. Your solution works perfectly fine. However I\
    \ wanted to know if there is a way to do it without using global variables. I\
    \ mean is there a way to do it without using global variables?\n<|/ c |>\n<| c\
    \ |>\nYes, you can do it without global variables. I've updated my answer with\
    \ another solution.\n<|/ c |>\n<| c |>\nThank you for your answer. Your solution\
    \ works perfectly fine. However I wanted to know if there is a way to do it without\
    \ using global variables. I mean is there a way to do it without using global\
    \ variables?\n<|/ c |>\n<| c |>\nYes, you can do it without global variables.\
    \ I've updated my answer with another solution.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptp1ir_i2_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    if sum < 0 {\n        return true\n    }\n    \n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpoawybzu1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   var balance int = 0\n    for _, operation := range operations {\n        balance\
    \ += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpi4y3rxv4_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpklkfpzv2_test.go:271:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    if sum < 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp_i_heew8_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp8blxo0ft_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp8blxo0ft_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        if\
    \ op > 0 {\n            acc += op\n        } else {\n            acc -= op\n \
    \       }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpodawkyrb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpodawkyrb_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpodawkyrb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv7z3ubxd_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        if\
    \ op > 0 {\n            acc += op\n        }\n    }\n    return acc < 0\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmppt1qea46_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmppt1qea46_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmppt1qea46_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp0z1lotbs_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, op := range operations {\n        sum += op\n    }\n\
    \    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp0vlo2m9j_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    if acc < 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmptwy3krff_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    return true\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"math\"\n)\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3isuht7r_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8p1ah9v_test.go:271:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, operation := range operations {\n        sum += operation\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpz8nr7uct_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    acc := 0\n    for _, op := range operations {\n        acc += op\n \
    \   }\n    if acc < 0 {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmptvqbng2i_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, operation := range operations {\n        sum += operation\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpz8nr7uct_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    if sum < 0 {\n        return true\n    }\n    \n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpoawybzu1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) == 0 {\n        return false\n    }\n\
    \    \n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    if acc < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp7yj1mq4q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpevlr_022_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    if sum < 0 {\n        return true\n    }\n    \n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpoawybzu1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, operation := range operations {\n        sum += operation\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt18kutna_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    if sum < 0 {\n        return true\n    }\n    \n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpoawybzu1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, operation := range operations {\n        sum +=\
    \ operation\n    }\n    \n    if sum < 0 {\n        return true\n    }\n    \n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpoawybzu1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   acc := 0\n    for _, op := range operations {\n        acc += op\n    }\n\
    \    if acc < 0 {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo95ir0ls_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   \n    sum := 0\n    for _, op := range operations {\n        sum += op\n \
    \   }\n    \n    if sum < 0 {\n        return true\n    }\n    \n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp3io1posh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, operation := range operations {\n        sum += operation\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpz8nr7uct_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    // Your code here\n    \n  \
    \  // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvw29k9bc_test.go:163:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, op := range operations {\n        sum\
    \ += op\n    }\n    if sum < 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpmuv87wva_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, op := range operations {\n        sum\
    \ += op\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpsdqc1yui_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n        if acc < 0 {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpb7go3o_e_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) == 0 {\n        return false\n    }\n\
    \    sum := 0\n    for _, operation := range operations {\n        sum += operation\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp86l0ccsc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8p1ah9v_test.go:271:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    acc := 0\n    for _, op := range operations {\n        acc\
    \ += op\n    }\n    if acc < 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmptwy3krff_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp9987z8c3_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   acc := 0\n    for _, op := range operations {\n        acc += op\n    }\n\
    \    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpo5t2but6_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    if len(operations) < 1 {\n        return false\n    }\n \
    \   sum := 0\n    for _, op := range operations {\n        sum += op\n    }\n\
    \    if sum < 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpwktz0xb9_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    sum := 0\n    for _, operation := range operations {\n  \
    \      sum += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpgdeuodom_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int = 0\n    for _, operation := range operations\
    \ {\n        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp6ux2jv_9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpebz_f6pr_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpebz_f6pr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075325
