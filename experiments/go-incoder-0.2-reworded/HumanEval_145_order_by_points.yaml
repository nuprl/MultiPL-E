name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v :=\
    \ range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    // Write your code here\n\
    \    \n    sort.Ints(nums)\n    \n    result := make([]int, len(nums))\n    \n\
    \    for i, v := range nums {\n        sum, err := sum_digits(v)\n        if err\
    \ != nil {\n            panic(err)\n        }\n        result[i] = v\n       \
    \ result[i] = sum\n    }\n    \n    sort.Ints(result)\n    \n    return result\n\
    }\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    for i :=\
    \ 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums);\
    \ j++ {\n            sum += int(nums[j]%10)\n            nums[j] /= 10\n     \
    \   }\n        result[i] = nums[len(nums)-1-i]\n        nums[len(nums)-i-1] =\
    \ 0\n        if sum > 0 {\n            sort.Ints(result)\n        }\n    }\n \
    \   return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for _,\
    \ v := range nums {\n        sum += v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := 0; i < len(nums); i++ {\n        sum /= 10\n        if sum < 0 {\n      \
    \      sum += 10\n        }\n        if sum != result[i] {\n            result[i]\
    \ = sum\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = sum - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    for _, v := range nums {\n        sum += v\n    }\n\
    \    for _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var sum int\n    for _, num := range nums {\n        sum += num\n\
    \        result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum *=\
    \ -1\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   // Write your code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i := 0; i < len(nums); i++ {\n        sum, digit := sumDigits(nums[i])\n\
    \        result[i] = nums[i]\n        if sum != 0 {\n            index = i\n \
    \       }\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Write\
    \ your code here\n    sort.Ints(nums)\n    var result []int\n    for _, num :=\
    \ range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i,\
    \ v := range result {\n        result[i] = sum - v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i, v := range nums {\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    for _, v := range nums {\n        if sum\
    \ < 0 {\n            sum += v\n            continue\n        }\n        if sum\
    \ == 0 {\n            result = append(result, v)\n            continue\n     \
    \   }\n        if sum > 0 {\n            sum += v\n            continue\n    \
    \    }\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v / sum\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var sum int\n\
    \    for _, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v\
    \ := range result {\n        result[i] = sum - v\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    sort.Ints(nums)\n    \n    \n  \
    \  return nums\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        result[i] = nums[i]\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum *= -1\n \
    \       }\n        if sum == 0 {\n            continue\n        }\n        j :=\
    \ i\n        for k := 0; k < len(nums); k++ {\n            if sum == 0 {\n   \
    \             break\n            }\n            sum += nums[k]\n            if\
    \ sum < 0 {\n                sum *= -1\n            }\n            if sum == 0\
    \ {\n                j++\n                break\n            }\n        }\n  \
    \      if j > i {\n            j := i\n        }\n        for k := 0; k < len(nums);\
    \ k++ {\n            if sum == 0 {\n                break\n            }\n   \
    \         sum += nums[k]\n            if sum < 0 {\n                sum *= -1\n\
    \            }\n            if sum == 0 {\n                j--\n             \
    \   break\n            }\n        }\n        if j > i {\n            j := i\n\
    \        }\n        for k := 0; k < len(nums); k++ {\n            if sum == 0\
    \ {\n                break\n            }\n            sum += nums[k]\n      \
    \      if sum < 0 {\n                sum *= -1\n            }\n            if\
    \ sum == 0 {\n                j++\n                j--\n                break\n\
    \            }\n        }\n        if j > i {\n            j := i\n        }\n\
    \        for k := 0; k < len(nums); k++ {\n            if sum == 0 {\n       \
    \         break\n            }\n            sum += nums[k]\n            if sum\
    \ < 0 {\n                sum *= -1\n            }\n            if sum == 0 {\n\
    \                j--\n                j++\n                break\n           \
    \ }\n        }\n        if j > i {\n            j := i\n        }\n        for\
    \ k := 0; k < len(nums); k++ {\n            if sum == 0 {\n                break\n\
    \            }\n            sum += nums[k]\n            if sum < 0 {\n       \
    \         sum *= -1\n            }\n            if sum == 0 {\n              \
    \  j++\n                j--\n                break\n            }\n        }\n\
    \        if j > i {\n            j := i\n        }\n        for k := 0; k < len(nums);\
    \ k++ {\n            if sum == 0 {\n                break\n            }\n   \
    \         sum += nums[k]\n            if sum < 0 {\n                sum *= -1\n\
    \            }\n            if sum == 0 {\n                j--\n             \
    \   j++\n                break\n            }\n        }\n        if j > i {\n\
    \            j := i\n        }\n        for k := 0; k < len(nums); k++ {\n   \
    \         if sum == 0 {\n                break\n            }\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n  \
    \      if sum < 0 {\n            sum += v\n            result[i] = v\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        sum += num\n\
    \        result[index] = num\n        index++\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return nums\n}\n",
  "    result := make([]int, len(nums))\n    for i := range nums {\n        sum, err\
    \ := sum_digits(nums[i])\n        if err != nil {\n            panic(err)\n  \
    \      }\n        result[i] = nums[i]\n        result[i] = sum\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    var sum int\n    for _, num := range nums {\n     \
    \   sum += num\n        result = append(result, num)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i := 0; i < len(nums); i++ {\n\
    \        result[i] = nums[i]\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    sort.Ints(nums)\n    var result []int\n    var sum int\n    for _,\
    \ v := range nums {\n        sum += v\n        result = append(result, v)\n  \
    \  }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    // Write your code here\n    sort.Ints(nums)\n    var result []int\n\
    \    for _, num := range nums {\n        total := 0\n        for _, digit := range\
    \ strconv.Itoa(num) {\n            total += int(digit)\n        }\n        if\
    \ total == 0 {\n            result = append(result, num)\n        } else {\n \
    \           index := sort.Search(len(nums), func(i int) bool {\n             \
    \   return nums[i]-total == num\n            })\n            result = append(result,\
    \ nums[index])\n        }\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    \n    sort.Ints(nums)\n    \n    return nums\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i\
    \ := range result {\n        result[i] = nums[result[i]]\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    sort.Ints(nums)\n    \n    return\
    \ nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    for i, v := range result {\n        result[i] = v\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum *= -1\n        }\n        if sum == 0 {\n            result[i] = v\n   \
    \     }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var cur int\n    for _, v := range nums {\n        cur = cur*10 +\
    \ v\n        if cur > 0 {\n            result = append(result, cur)\n        \
    \    cur = 0\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i := range nums {\n        result[i]\
    \ = nums[i]\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    for i := range nums {\n        total := 0\n \
    \       for _, digit := range nums[i:] {\n            total += digit\n       \
    \ }\n        result[i] = total\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n   \
    \ var result []int\n    for _, v := range nums {\n        result += []int{v}\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for _, num :=\
    \ range nums {\n        sum, err := sum_digits(num)\n        if err != nil {\n\
    \            panic(err)\n        }\n        if sum > 0 {\n            result =\
    \ append(result, num)\n        }\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n   \
    \ return nums\n}\n", "    // Write your code here\n    \n    // sort by sum of\
    \ digits\n    sort.Ints(nums)\n    \n    // sort by index\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    \n    return nums\n}\n", "    sort.Ints(nums)\n    var res []int\n    for\
    \ _, num := range nums {\n        sum := 0\n        for _, digit := range strconv.Itoa(num)\
    \ {\n            sum += int(digit)\n        }\n        if sum > 0 {\n        \
    \    res = append(res, num)\n        }\n    }\n    return res\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    var sum int\n    for _, num := range nums {\n     \
    \   sum += num\n        result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := 0; i < len(nums); i++ {\n        j := i\n        for j >\
    \ 0 && sum < 0 {\n            sum -= nums[j-1]\n            j--\n        }\n \
    \       if sum < 0 {\n            sum = 0\n        }\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        if sum < 0 {\n            sum = 0\n      \
    \  }\n        result = append(result, v)\n    }\n    return result\n}\n", "  \
    \  sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n     \
    \   sum += v\n    }\n    for _, v := range nums {\n        if sum == v {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := 0; i < len(nums); i++ {\n        j := i\n        for j > 0 && sum < 0 {\n\
    \            sum -= nums[j-1]\n            j--\n        }\n        if sum > 0\
    \ {\n            sum += nums[i]\n            result[i] = nums[i]\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    // Write your code here\n\
    \    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum := 0\n   \
    \ for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n \
    \   for i := range result {\n        result[i] = sum - result[i]\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n    result\
    \ := make([]int, len(nums))\n    for i := range nums {\n        sum, err := sum_digits(nums[i])\n\
    \        if err != nil {\n            panic(err)\n        }\n        result[i]\
    \ = nums[i]\n        result[i] = sum\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    // Write your code here\n\
    \    sort.Ints(nums)\n    var result []int\n    for _, num := range nums {\n \
    \       sum, _ := strconv.Atoi(string(num))\n        if sum > 0 {\n          \
    \  result = append(result, num)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i, v := range nums {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for\
    \ _, num := range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        result = append(result, num)\n\
    \        if sum > 0 {\n            sort.Ints(result)\n        }\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    \n    // return nums\n}\n",
  "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i, v := range nums {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = sum\
    \ - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n\
    \    var sum int\n    for _, v := range nums {\n        sum += v\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    sort.Ints(nums)\n    var result []int\n    var sum int\n    for _, v := range\
    \ nums {\n        sum += v\n        result = append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    var sum int\n    for _, num := range nums {\n     \
    \   sum += num\n        result = append(result, num)\n    }\n    for _, num :=\
    \ range result {\n        if sum > 0 {\n            sum -= num\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    for _, v := range nums {\n     \
    \   sum += v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    for\
    \ _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var\
    \ result []int\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, d := range strconv.Itoa(num) {\n            sum += int(d)\n        }\n  \
    \      if sum > 0 {\n            result = append(result, num)\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n \
    \   }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = sum\
    \ - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    \n    // sort\
    \ by sum\n    sort.Ints(nums)\n    \n    // sort by index\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    \n    return nums\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i] =\
    \ v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum !=\
    \ 0 {\n            sum += v\n            if sum < 0 {\n                sum *=\
    \ -1\n            }\n            if sum == 0 {\n                result[i] = v\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    \n    sort.Slice(nums, func(i, j int) bool {\n        return\
    \ nums[i] > nums[j]\n    })\n    \n    return nums\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum != 0 {\n            sum -= v\n            if sum < 0 {\n \
    \               sum = 0\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v :=\
    \ range result {\n        result[i] = v - sum\n    }\n    return result\n}\n",
  "    // Write your code here\n    \n    sort.Ints(nums)\n    \n    result := make([]int,\
    \ len(nums))\n    \n    for i := 0; i < len(nums); i++ {\n        sum := 0\n \
    \       for j := 0; j < len(nums); j++ {\n            sum += nums[j]\n       \
    \ }\n        \n        if sum < 0 {\n            sum *= -1\n        }\n      \
    \  \n        result[i] = sum\n    }\n    \n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i := range nums {\n        sum,\
    \ err := sum_digits(nums[i])\n        if err != nil {\n            panic(err)\n\
    \        }\n        result[i] = nums[i]\n        result[i] = sum\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result\
    \ = append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for\
    \ _, v := range nums {\n        sum += v\n        result = append(result, v)\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = sum - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    for _, v := range nums {\n        sum += v\n    }\n\
    \    for _, v := range nums {\n        if sum > 0 {\n            sum += v\n  \
    \          result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ for i, v := range result {\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    for _, v := range nums {\n     \
    \   sum += v\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sums []int\n    for _, num := range nums {\n        sums = append(sums, num)\n\
    \    }\n    sort.Ints(sums)\n    for _, sum := range sums {\n        result =\
    \ append(result, nums[sum])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := 0; i < len(nums); i++ {\n        if\
    \ sum < 0 {\n            sum += nums[i]\n            result[i] = nums[i]\n   \
    \     } else {\n            sum -= nums[i]\n        }\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return nums\n}\n",
  "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    for i := 0; i <\
    \ len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums); j++ {\n\
    \            sum += nums[j]\n            if sum > 0 {\n                result[i]\
    \ = nums[j]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ for i, v := range nums {\n        if sum != int(v) {\n            sum -= int(v)\n\
    \            result[i] = v\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n    result\
    \ := make([]int, len(nums))\n    for i := range nums {\n        result[i] = nums[i]\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n\
    \        d := sumDigits(v)\n        if d > 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n", "    //\
    \ Write your code here\n    \n    \n    return nums\n}\n", "    // Write your\
    \ code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    for i := 0; i < len(nums); i++ {\n \
    \       total := 0\n        for _, digit := range nums[i:] {\n            total\
    \ += digit\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sum int\n    for _, v := range nums {\n        sum += v\n        result = append(result,\
    \ v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    for i, v :=\
    \ range result {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    // Write your code here\n\
    \    sort.Ints(nums)\n    sum := 0\n    for _, num := range nums {\n        sum\
    \ += num\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return\
    \ nums\n}\n", "    sort.Ints(nums)\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        result += make([]int, len(nums))\n        for i := 0; i < len(nums);\
    \ i++ {\n            result[i] += digits[i]\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    // Write your code here\n \
    \   sort.Ints(nums)\n    result := make([]int, len(nums))\n    index := 0\n  \
    \  for _, num := range nums {\n        sum += num\n        result[index] = num\n\
    \        index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        nums[v]\
    \ = sum\n    }\n    return nums\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var sum int\n    for _, v := range nums {\n        sum += v\n   \
    \ }\n    for _, v := range nums {\n        if sum == 0 {\n            result =\
    \ append(result, v)\n        } else {\n            sum += v\n            if sum\
    \ > 0 {\n                result = append(result, v)\n            }\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := 0; i < len(nums); i++ {\n        if sum < 0 {\n         \
    \   sum *= -1\n            result[i] = -result[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for _,\
    \ num := range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    // Write\
    \ your code here\n    \n    sort.Ints(nums)\n    \n    var result []int\n    \n\
    \    for _, num := range nums {\n        \n        sum := 0\n        \n      \
    \  for _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n\
    \        }\n        \n        if sum > 0 {\n            \n            result =\
    \ append(result, num)\n        }\n    }\n    \n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    var sum int\n    for _, num := range nums {\n     \
    \   sum += num\n        result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    for\
    \ i := range nums {\n        result[i] = nums[i]\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Sort(BySum(nums))\n    return nums\n}\n",
  "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i, v := range nums {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ cur int\n    var sum int\n    for _, v := range nums {\n        cur = sum\n\
    \        sum += v\n        if sum > 0 {\n            result = append(result, cur)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n\
    \    var sums []int\n    for _, num := range nums {\n        sums = append(sums,\
    \ num)\n    }\n    sort.Ints(sums)\n    for _, sum := range sums {\n        result\
    \ = append(result, nums[sum])\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += int(v)\n        result[i] = v\n    }\n    for i, v := range nums {\n\
    \        if sum < 0 {\n            sum += int(v)\n            result[i] = v\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range result {\n        result[i]\
    \ = v / sum\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result\
    \ := make([]int, 0, len(nums))\n    for _, num := range nums {\n        sum :=\
    \ 0\n        for _, d := range strconv.Itoa(num) {\n            sum += int(d)\n\
    \        }\n        if sum > 0 {\n            result = append(result, num)\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        nums[v]\
    \ = sum\n    }\n    return nums\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    \n    sort.Ints(nums)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    sort.Ints(nums)\n    var result []int\n    var sum int\n    for _,\
    \ v := range nums {\n        sum += v\n    }\n    for _, v := range nums {\n \
    \       if sum < 0 {\n            sum += v\n            continue\n        }\n\
    \        if sum == 0 {\n            result = append(result, v)\n            continue\n\
    \        }\n        if sum > 0 {\n            sum -= v\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    for _, num := range nums {\n        result := append(result,\
    \ num)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Write your\
    \ code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n   \
    \ var sum int\n    for _, num := range nums {\n        sum += num\n        result\
    \ = append(result, num)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= int(v)\n            if sum < 0 {\n                sum = 0\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result\
    \ := make([]int, 0, len(nums))\n    for _, num := range nums {\n        sum, err\
    \ := sum_digits(num)\n        if err != nil {\n            panic(err)\n      \
    \  }\n        if sum > 0 {\n            result = append(result, num)\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n  \
    \      if sum != 0 {\n            sum += v\n            if sum > 0 {\n       \
    \         sum -= result[i]\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    \n    sort.Ints(nums)\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 0 {\n            sum += v\n            result[i] =\
    \ v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v / sum\n  \
    \  }\n    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n  \
    \  for _, v := range nums {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    // Write your code here\n    \n    sort.Ints(nums)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i, v := range nums {\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range nums {\n        if sum <\
    \ 0 {\n            sum *= -1\n        }\n        if sum == 0 {\n            continue\n\
    \        }\n        sum /= 10\n        if sum != int(v) && sum != 0 {\n      \
    \      continue\n        }\n        sum -= int(v)\n        if sum < 0 {\n    \
    \        sum *= -1\n        }\n        result[i] = v\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    sort.Slice(nums, func(i, j int)\
    \ bool {\n        sum := nums[i] + nums[j]\n        if sum < 0 {\n           \
    \ return false\n        }\n        if sum > 0 {\n            return true\n   \
    \     }\n        return nums[i] < nums[j]\n    })\n    return nums\n}\n", "  \
    \  // Write your code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i, v := range nums {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var\
    \ sum int\n    for _, num := range nums {\n        sum += num\n        result\
    \ = append(result, num)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ nums {\n        if sum < 0 {\n            sum += int(v)\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i := range result {\n        result[i]\
    \ = sum - int(result[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = v\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        digitSum, err := digitSum(num)\n    \
    \    if err != nil {\n            panic(err)\n        }\n        result := append(result,\
    \ num)\n        if digitSum > 0 {\n            sort.Ints(result)\n        }\n\
    \    }\n    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n     \
    \   }\n        if sum > 0 {\n            result = append(result, num)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    for i := range\
    \ nums {\n        total := 0\n        for _, v := range nums[i:] {\n         \
    \   total += int(v)\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    for _, v := range nums {\n        sum += v\n    }\n\
    \    for _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := 0; i < len(nums); i++ {\n        sum /= 10\n      \
    \  if sum > 0 {\n            sum += nums[i]\n            result[i] = nums[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    for _, num := range nums {\n        sum := 0\n        for _, digit\
    \ := range strconv.Itoa(num) {\n            sum += int(digit)\n        }\n   \
    \     if sum > 0 {\n            result = append(result, num)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum = 0\n   \
    \     }\n        if sum > 0 {\n            sum += v\n            if sum > 0 {\n\
    \                sum -= v\n            }\n        }\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return nums\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v - sum\n    }\n    return result\n}\n", "   \
    \ sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n      \
    \  sum += v\n    }\n    for _, v := range nums {\n        if sum < 0 {\n     \
    \       sum += v\n        }\n        if sum == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
