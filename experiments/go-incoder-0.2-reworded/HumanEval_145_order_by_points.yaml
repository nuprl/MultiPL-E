name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v :=\
    \ range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    // Write your code here\n\
    \    \n    sort.Ints(nums)\n    \n    result := make([]int, len(nums))\n    \n\
    \    for i, v := range nums {\n        sum, err := sum_digits(v)\n        if err\
    \ != nil {\n            panic(err)\n        }\n        result[i] = v\n       \
    \ result[i] = sum\n    }\n    \n    sort.Ints(result)\n    \n    return result\n\
    }\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n    for i :=\
    \ 0; i < len(nums); i++ {\n        sum := 0\n        for j := 0; j < len(nums);\
    \ j++ {\n            sum += int(nums[j]%10)\n            nums[j] /= 10\n     \
    \   }\n        result[i] = nums[len(nums)-1-i]\n        nums[len(nums)-i-1] =\
    \ 0\n        if sum > 0 {\n            sort.Ints(result)\n        }\n    }\n \
    \   return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    for _,\
    \ v := range nums {\n        sum += v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := 0; i < len(nums); i++ {\n        sum /= 10\n        if sum < 0 {\n      \
    \      sum += 10\n        }\n        if sum != result[i] {\n            result[i]\
    \ = sum\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = sum - v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    var result []int\n    for _, v := range nums {\n        sum += v\n    }\n\
    \    for _, v := range nums {\n        if sum == v {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var sum int\n    for _, num := range nums {\n        sum += num\n\
    \        result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum *=\
    \ -1\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   // Write your code here\n    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i := 0; i < len(nums); i++ {\n        sum, digit := sumDigits(nums[i])\n\
    \        result[i] = nums[i]\n        if sum != 0 {\n            index = i\n \
    \       }\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Write\
    \ your code here\n    sort.Ints(nums)\n    var result []int\n    for _, num :=\
    \ range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i,\
    \ v := range result {\n        result[i] = sum - v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    // Write your code here\n    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i, v := range nums {\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    for _, v := range nums {\n        if sum\
    \ < 0 {\n            sum += v\n            continue\n        }\n        if sum\
    \ == 0 {\n            result = append(result, v)\n            continue\n     \
    \   }\n        if sum > 0 {\n            sum += v\n            continue\n    \
    \    }\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
