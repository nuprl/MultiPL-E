language: go_test.go
name: HumanEval_18_how_many_times
results:
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b2rjs_t_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36f2co9h_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                    break\n                }\
    \ else {\n                    end--\n                }\n            } else {\n\
    \                end--\n            }\n        }\n        if found {\n       \
    \     result += end - start\n            start = end\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoy12v2fo_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074166
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \    }\n        start = end + len(substring)\n    }\n    return result\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n3e4kbh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[end-1]\
    \ == substring[0] {\n                end -= 1\n                found = true\n\
    \            } else {\n                end -= 1\n            }\n        }\n  \
    \      if found {\n            result += end - start\n        }\n        start\
    \ = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpd48li7k8_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpd48li7k8_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpd48li7k8_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36f2co9h_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) && myString[end] == substring[end] {\n            end += 1\n\
    \        }\n        if end > start {\n            found = true\n            break\n\
    \        }\n    }\n    if found {\n        return end - start\n    }\n    return\
    \ 0\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp6e8y5axz_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp6e8y5axz_test.go:43\
    \ +0x348\ntesting.tRunner(0xc0001991e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n            count++\n        }\n        start = end + 1\n    }\n    if\
    \ !found {\n        return 0\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmp0tovywhr_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpru84fchh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            found = true\n            break\n\
    \        }\n        start += 1\n    }\n    if found {\n        result = end -\
    \ start\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0a4m979_test.go:21:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                    break\n                }\n\
    \            }\n            end--\n        }\n        if found {\n           \
    \ result++\n        }\n        start++\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpbswihcew_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpbswihcew_test.go:48\
    \ +0x393\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  end--\n                }\n            } else {\n                end--\n   \
    \         }\n        }\n        if found {\n            result++\n        }\n\
    \        start++\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpz2v501_s_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpz2v501_s_test.go:50\
    \ +0x3bc\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end > start {\n            found = true\n\
    \            break\n        }\n        if end == len(myString) {\n           \
    \ found = true\n            break\n        }\n        if myString[end] == substring[0]\
    \ {\n            end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if end > start {\n            found\
    \ = true\n            break\n        }\n        if end == len(myString) {\n  \
    \          found = true\n            break\n        }\n        if myString[end]\
    \ == substring[0] {\n            end++\n        }\n        if myString[end] ==\
    \ substring[len(substring)-1] {\n            end++\n        }\n        if end\
    \ > start {\n            found = true\n            break\n        }\n        if\
    \ end == len(myString) {\n            found = true\n            break\n      \
    \  }\n        if myString[end] == substring[0] {\n            end++\n        }\n\
    \        if myString[end] == substring[len(substring)-1] {\n            end++\n\
    \        }\n        if end > start {\n            found = true\n            break\n\
    \        }\n        if end == len(myString) {\n            found = true\n    \
    \        break\n        }\n        if myString[end] == substring[0] {\n      \
    \      end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if end > start {\n            found\
    \ = true\n            break\n        }\n        if end == len(myString) {\n  \
    \          found = true\n            break\n        }\n        if myString[end]\
    \ == substring[0] {\n            end++\n        }\n        if myString[end] ==\
    \ substring[len(substring)-1] {\n            end++\n        }\n        if end\
    \ > start {\n            found = true\n            break\n        }\n        if\
    \ end == len(myString) {\n            found = true\n            break\n      \
    \  }\n        if myString[end] == substring[0] {\n            end++\n        }\n\
    \        if myString[end] == substring[len(substring)-1] {\n            end++\n\
    \        }\n        if end > start {\n            found = true\n            break\n\
    \        }\n        if end == len(myString) {\n            found = true\n    \
    \        break\n        }\n        if myString[end] == substring[0] {\n      \
    \      end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if end > start {\n            found\
    \ = true\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6c1nblrp_test.go:126:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074166
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            result += how_many_times(myString[1\
    \ : len(myString)-1], substring[1:])\n        } else {\n            result +=\
    \ how_many_times(myString[1 : len(myString)-1], substring)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxavpq5k_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \    }\n        start = end + len(substring)\n    }\n    return result\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n3e4kbh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            count++\n     \
    \   }\n    }\n    for _, subChar := range substring {\n        if subChar == myString[0]\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8kp8nie8_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    /tmp/tmp8kp8nie8_test.go:23:23: invalid operation: subChar == myString[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start <= end {\n        if myString[start] == substring[0]\
    \ {\n            start += 1\n            if start == end {\n                result\
    \ += 1\n                start = 0\n            } else {\n                start\
    \ += 1\n            }\n        } else {\n            end -= 1\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpj305hrxj_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpj305hrxj_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpj305hrxj_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[end-1]\
    \ == substring[0] {\n                if myString[end] == substring[1] {\n    \
    \                found = true\n                } else {\n                    end--\n\
    \                }\n            } else {\n                end--\n            }\n\
    \        }\n        if found {\n            result += end - start\n        }\n\
    \        start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range\
    \ [7] with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmppclxq_dv_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmppclxq_dv_test.go:50\
    \ +0x412\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    for ; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i+1] == substring[1] {\n                result += 2\n          \
    \      i += 2\n            } else {\n                result += 1\n           \
    \     i++\n            }\n        } else {\n            i++\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpch721oyf_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpch721oyf_test.go:42\
    \ +0x389\ntesting.tRunner(0xc0001036c0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && found == false {\n            if myString[end]\
    \ == substring[0] {\n                if end < len(myString) {\n              \
    \      if myString[end] == substring[1] {\n                        found = true\n\
    \                        result = result + 1\n                    }\n        \
    \        }\n            }\n            end = end + 1\n        }\n        start\
    \ = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmppds71fy7_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmppds71fy7_test.go:46\
    \ +0x393\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n        }\n        if found {\n            result += 1\n        }\n  \
    \      start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpi94fz0lq_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpi94fz0lq_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpi94fz0lq_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    i := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            count++\n     \
    \       for ; i < len(myString); i++ {\n                if myString[i] == substring[1]\
    \ {\n                    count++\n                    i++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpusguqaq4_test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpusguqaq4_test.go:40\
    \ +0x378\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end > start {\n            found = true\n\
    \            break\n        }\n        if end == len(myString) {\n           \
    \ break\n        }\n        if myString[end] == substring[0] {\n            end++\n\
    \        }\n        if end == len(myString) {\n            break\n        }\n\
    \        if myString[end] == substring[1] {\n            end++\n        }\n  \
    \      if end == len(myString) {\n            break\n        }\n        if myString[end]\
    \ == substring[2] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            break\n        }\n        if myString[end] == substring[3] {\n\
    \            end++\n        }\n        if end == len(myString) {\n           \
    \ break\n        }\n        if myString[end] == substring[4] {\n            end++\n\
    \        }\n        if end == len(myString) {\n            break\n        }\n\
    \        if myString[end] == substring[5] {\n            end++\n        }\n  \
    \      if end == len(myString) {\n            break\n        }\n        if myString[end]\
    \ == substring[6] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            break\n        }\n        if myString[end] == substring[7] {\n\
    \            end++\n        }\n        if end == len(myString) {\n           \
    \ break\n        }\n        if myString[end] == substring[8] {\n            end++\n\
    \        }\n        if end == len(myString) {\n            break\n        }\n\
    \        if myString[end] == substring[9] {\n            end++\n        }\n  \
    \      if end == len(myString) {\n            break\n        }\n        if myString[end]\
    \ == substring[10] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            break\n        }\n        if myString[end] == substring[11] {\n\
    \            end++\n        }\n        if end == len(myString) {\n           \
    \ break\n        }\n        if myString[end] == substring[12] {\n            end++\n\
    \        }\n        if end == len(myString) {\n            break\n        }\n\
    \        if myString[end] == substring[13] {\n            end++\n        }\n \
    \       if end == len(myString) {\n            break\n        }\n        if myString[end]\
    \ == substring[14] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            break\n        }\n        if myString[end] == substring[15] {\n\
    \            end++\n        }\n        if end == len(myString) {\n           \
    \ break\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp86kfefqt_test.go:127:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end++\n        }\n       \
    \ if end > start {\n            count++\n        }\n        start = end\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpmu4j2nwa_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpmu4j2nwa_test.go:40\
    \ +0x3b7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start < end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        start += 1\n        end -= 1\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds23mx78_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && found == false {\n            if myString[end]\
    \ == substring[0] {\n                if end < len(myString) {\n              \
    \      if myString[end] == substring[1] {\n                        found = true\n\
    \                    }\n                }\n            }\n            end++\n\
    \        }\n        if found == true {\n            result++\n            start\
    \ = end + 1\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpo_uy8ikz_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpo_uy8ikz_test.go:48\
    \ +0x3b\ntesting.tRunner(0xc000199040, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(myString) - start\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfyzr8hm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start < end {\n        result += 1\n        if myString[start]\
    \ == substring[0] {\n            if start == end {\n                return result\n\
    \            }\n            if myString[start] == substring[1] {\n           \
    \     start += 1\n                if start == end {\n                    return\
    \ result\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpikcd92h1_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpikcd92h1_test.go:44\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) {\n            if myString[end] == substring[0] {\n        \
    \        if end == start {\n                    found = true\n               \
    \     break\n                }\n                if myString[end] == substring[1]\
    \ {\n                    found = true\n                    break\n           \
    \     }\n                if myString[end] == substring[2] {\n                \
    \    found = true\n                    break\n                }\n            }\n\
    \            end++\n        }\n        if found {\n            break\n       \
    \ }\n        start = end + 1\n    }\n    if found {\n        return end - start\n\
    \    }\n    return 0\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpzsm0872o_test.go:65: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpzsm0872o_test.go:65:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpzsm0872o_test.go:65: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    i := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            count++\n     \
    \       for ; i < len(myString); i++ {\n                if myString[i] == substring[1]\
    \ {\n                    count++\n                    for ; i < len(myString);\
    \ i++ {\n                        if myString[i] == substring[2] {\n          \
    \                  count++\n                            for ; i < len(myString);\
    \ i++ {\n                                if myString[i] == substring[3] {\n  \
    \                                  count++\n                                 \
    \   for ; i < len(myString); i++ {\n                                        if\
    \ myString[i] == substring[4] {\n                                            count++\n\
    \                                            for ; i < len(myString); i++ {\n\
    \                                                if myString[i] == substring[5]\
    \ {\n                                                    count++\n           \
    \                                     }\n                                    \
    \        }\n                                        }\n                      \
    \              }\n                                }\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fd0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmplxu3tf93_test.go:22 +0x175\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmplxu3tf93_test.go:59 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end++\n        }\n       \
    \ if end > start {\n            count += end - start\n        }\n        start\
    \ = end\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpzhejqzss_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpzhejqzss_test.go:40\
    \ +0x3d7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \   }\n        start = end + len(substring)\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeubxs3zq_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    length :=\
    \ len(myString)\n    length := len(substring)\n    for i < length {\n        if\
    \ myString[i] == substring[i] {\n            i++\n            i++\n          \
    \  i++\n            i++\n            i++\n            i++\n            i++\n \
    \           i++\n            i++\n            i++\n            i++\n         \
    \   i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            i++\n            i++\n\
    \            i++\n            i++\n            i++\n            i++\n        \
    \    i++\n            i++\n            i++\n            \nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpptig7_vn_test.go:181:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  found = false\n                }\n            } else {\n                found\
    \ = false\n            }\n            end--\n        }\n        if found {\n \
    \           result++\n        }\n        start++\n    }\n    return result\n}\n\
    </code>\n<|/ a tags=string,go |>\n<| c |>\nThis code doesn't work for `how_many_times(\"\
    aaaa\", \"aa\")` which returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptvnrfjgc_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  end--\n                }\n            } else {\n                end--\n   \
    \         }\n        }\n        if found {\n            result++\n        }\n\
    \        start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp29g1w5l7_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp29g1w5l7_test.go:50\
    \ +0x3de\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyayi6vzb_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            if myString[start] == substring[0] {\n\
    \                if myString[end-1] == substring[1] {\n                    found\
    \ = true\n                } else {\n                    found = false\n      \
    \          }\n            } else {\n                found = false\n          \
    \  }\n            if found {\n                result += end - start\n        \
    \        start = end + 1\n                break\n            }\n            end\
    \ -= 1\n        }\n        if found {\n            break\n        }\n        start\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8f70?})\n\t/tmp/tmpixtp5wp9_test.go:24 +0xa7\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpixtp5wp9_test.go:55 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            result += 1\n        }\n        start = end + 1\n    }\n    if !found\
    \ {\n        return 0\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmprsw29k6m_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpru84fchh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    for ; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ result += len(substring)\n            i += len(substring)\n        } else if\
    \ myString[i] == substring[1] {\n            result += len(substring)\n      \
    \      i += len(substring)\n        } else if myString[i] == substring[2] {\n\
    \            result += len(substring)\n            i += len(substring)\n     \
    \   } else if myString[i] == substring[3] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[4]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[5] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[6]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[7] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[8]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[9] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[10]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[11] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[12]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[13] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[14]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[15] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[16]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[17] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[18]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[19] {\n            result += len(substring)\n\
    \            i += len(substring)\n        } else if myString[i] == substring[20]\
    \ {\n            result += len(substring)\n            i += len(substring)\n \
    \       } else if myString[i] == substring[21] {\n            result += len(substring)\n\
    \            i += len(substring)\n        \nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4nio6ep_test.go:86:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            result += how_many_times(myString[1\
    \ : len(myString)], substring[1:])\n        }\n    }\n    return result\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsd_3z1km_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            result += how_many_times(myString[1\
    \ : len(myString)-1], substring)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsl9n8fl_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start < end {\n        if myString[start] == substring[0]\
    \ {\n            if start == end {\n                count++\n            } else\
    \ {\n                count++\n                if myString[start] == substring[1]\
    \ {\n                    count++\n                }\n            }\n         \
    \   start++\n        } else {\n            if start == end {\n               \
    \ count++\n            } else {\n                count++\n                if myString[end]\
    \ == substring[1] {\n                    count++\n                }\n        \
    \    }\n            end--\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpwvg9ir2h_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpwvg9ir2h_test.go:53\
    \ +0x1c\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString) -\
    \ 1\n    count := 0\n    for start < end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        start += 1\n        end -= 1\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10bmqqfl_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            if myString[start] == substring[0] {\n\
    \                if myString[end-1] == substring[1] {\n                    found\
    \ = true\n                    break\n                } else {\n              \
    \      end--\n                }\n            } else {\n                end--\n\
    \            }\n        }\n        if found {\n            result += end - start\n\
    \            found = false\n        }\n        start++\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpaclb1mux_test.go:24\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpaclb1mux_test.go:51\
    \ +0x39c\ntesting.tRunner(0xc000103a00, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  found = false\n                }\n            } else {\n                found\
    \ = false\n            }\n            end--\n        }\n        if found {\n \
    \           result++\n        }\n        start++\n    }\n    return result\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpztockll6_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpztockll6_test.go:51\
    \ +0x39e\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074171
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        found = false\n        for end < len(myString) {\n            if myString[end]\
    \ == substring[0] {\n                if end < len(myString) {\n              \
    \      end += 1\n                }\n                if myString[end] == substring[1]\
    \ {\n                    if end < len(myString) {\n                        end\
    \ += 1\n                    }\n                    if myString[end] == substring[2]\
    \ {\n                        if end < len(myString) {\n                      \
    \      end += 1\n                        }\n                        if myString[end]\
    \ == substring[3] {\n                            if end < len(myString) {\n  \
    \                              end += 1\n                            }\n     \
    \                       if myString[end] == substring[4] {\n                 \
    \               if end < len(myString) {\n                                   \
    \ end += 1\n                                }\n                              \
    \  if myString[end] == substring[5] {\n                                    if\
    \ end < len(myString) {\n                                        end += 1\n  \
    \                                  }\n                                    if myString[end]\
    \ == substring[6] {\n                                        if end < len(myString)\
    \ {\n                                            end += 1\n                  \
    \                      }\n                                        if myString[end]\
    \ == substring[7] {\n                                            if end < len(myString)\
    \ {\n                                                end += 1\n              \
    \                              }\n                                           \
    \ if myString[end] == substring[8] {\n                                       \
    \         if end < len(myString) {\n                                         \
    \           end += 1\n                                                }\n    \
    \                                            if myString[end] == substring[9]\
    \ {\n                                                    if end < len(myString)\
    \ {\n                                                        end += 1\n      \
    \                                              }\n                           \
    \                         if myString[end] == substring[10] {\n              \
    \                                          if end < len(myString) {\n        \
    \                                                    end += 1\n              \
    \                                          }\n                               \
    \                         if myString[end] == substring[11] {\n              \
    \                                              if end < len(myString) {\n    \
    \                                                            end += 1\n      \
    \                                                      }\n                   \
    \                                         if myString[end] == substring[12] {\n\
    \                                                                if end < len(myString)\
    \ {\n                                                                    end +=\
    \ 1\n                                                                }\n     \
    \                                                           if myString[end] ==\
    \ substring[13] {\n                                                          \
    \          if end < len(myString) {\n                                        \
    \                                end += 1\n                                  \
    \                                  }\n                                       \
    \                             if myString[end] == substring[14] {\n          \
    \                                                                            \
    \  if end < len(myString) {\n                                                \
    \            end += 1\n                                                      \
    \                  }\n                                                       \
    \                 if myString[end] == substring[15] {\n                      \
    \                                                      if end < len(myString)\
    \ {\n                                                                        \
    \        end += 1\n                                                          \
    \                  }\n                                                       \
    \                     if myString[end] == substring[16] {\n                  \
    \                                                              if end < len(myString)\
    \ {\n                                                                        \
    \            end += 1\n                                                      \
    \                          }\n                                               \
    \                                 if myString[end] == substring[17] {\n      \
    \                                                                            \
    \  if end < len(myString) {\n                                                \
    \                                        end += 1\n                          \
    \                                                          }\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpby6eu428_test.go:97:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \      end++\n        }\n        if found {\n            result += end - start\n\
    \            found = false\n        }\n        start++\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpf1abrai4_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpf1abrai4_test.go:50\
    \ +0x347\ntesting.tRunner(0xc000192680, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            found = true\n            break\n\
    \        }\n        start += 1\n    }\n    if found {\n        result = end -\
    \ start\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0a4m979_test.go:21:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        found = false\n        for end < len(myString) {\n            if myString[end]\
    \ == substring[0] {\n                found = true\n                end++\n   \
    \             break\n            }\n            end++\n        }\n        if found\
    \ {\n            result += end - start\n            start = end\n        }\n \
    \   }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074184
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end++\n        }\n       \
    \ if end > start {\n            result += end - start\n        }\n        start\
    \ = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpx7x8puba_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpx7x8puba_test.go:40\
    \ +0x3d7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, v := range myString\
    \ {\n        if v == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxmn_v28e_test.go:18:17: invalid operation: v == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074171
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) && myString[end] == substring[end] {\n            end++\n  \
    \      }\n        if end == len(myString) {\n            found = true\n      \
    \      break\n        }\n        if myString[start] == substring[0] {\n      \
    \      start = end\n        } else {\n            found = false\n            break\n\
    \        }\n    }\n    if found {\n        return end - start\n    } else {\n\
    \        return 0\n    }\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpd7t3xut4_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpd7t3xut4_test.go:50\
    \ +0x4f2\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString) -\
    \ 1\n    found := false\n    for start <= end {\n        middleIndex := (start\
    \ + end) / 2\n        if myString[middleIndex] == substring {\n            found\
    \ = true\n            break\n        }\n        if myString[middleIndex] < substring\
    \ {\n            end = middleIndex - 1\n        } else {\n            start =\
    \ middleIndex + 1\n        }\n    }\n    if found {\n        return end - start\
    \ + 1\n    }\n    return 0\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h4hz077_test.go:21:37: invalid operation: myString[middleIndex] == substring
    (mismatched types byte and string)

    /tmp/tmp7h4hz077_test.go:25:36: invalid operation: myString[middleIndex] < substring
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074171
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start <= end {\n        result += 1\n        if myString[start]\
    \ == substring {\n            start += 1\n            continue\n        }\n  \
    \      if myString[end] == substring {\n            end -= 1\n            continue\n\
    \        }\n        if myString[start] == substring && myString[end+1] == substring\
    \ {\n            start += 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start] == substring && myString[end-1] == substring\
    \ {\n            start += 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end] == substring\
    \ {\n            start -= 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end+1] == substring\
    \ {\n            start -= 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end-1] == substring\
    \ {\n            start -= 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start+1] == substring && myString[end] == substring\
    \ {\n            start += 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start+1] == substring && myString[end+1] == substring\
    \ {\n            start += 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start+1] == substring && myString[end-1] == substring\
    \ {\n            start += 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end+1] == substring\
    \ {\n            start -= 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end-1] == substring\
    \ {\n            start -= 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start] == substring && myString[end+1] == substring\
    \ {\n            start += 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start] == substring && myString[end-1] == substring\
    \ {\n            start += 2\n            end -= 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString[end+1] == substring\
    \ {\n            start -= 2\n            end += 2\n            continue\n    \
    \    }\n        if myString[start-1] == substring && myString\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcqhjrt6f_test.go:95:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074171
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36f2co9h_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b2rjs_t_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end == -1 {\n            break\n        }\n        result\
    \ += end - start\n        start = end + len(substring)\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu9ts1rk_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[start] {\n    \
    \        end++\n        }\n        if end == len(myString) {\n            found\
    \ = true\n            break\n        }\n        if myString[end] == substring[start]\
    \ {\n            found = true\n            end++\n        }\n        if found\
    \ {\n            result = result + 1\n            start = end\n            found\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074184
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[start] {\n    \
    \        end++\n        }\n        if end == len(myString) {\n            found\
    \ = true\n            break\n        }\n        if myString[start] == substring[end]\
    \ {\n            found = true\n            break\n        }\n        if end >\
    \ start {\n            result += end - start\n        }\n        start = end\n\
    \    }\n    if found {\n        result++\n    }\n    return result\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8c30?})\n\t/tmp/tmpg1qs9qnx_test.go:29 +0xa5\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpg1qs9qnx_test.go:52 +0x7b\ntesting.tRunner(0xc0001964e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start < end {\n        result += 1\n        if myString[start]\
    \ == substring[0] {\n            start += 1\n            if start == end {\n \
    \               return result\n            }\n        }\n        if myString[end]\
    \ == substring[len(substring)-1] {\n            end -= 1\n            if start\
    \ == end {\n                return result\n            }\n        }\n    }\n \
    \   return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074184
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            break\n        }\n        start = end + 1\n    }\n    if found {\n\
    \        result = 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpvyuw06er_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpvyuw06er_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  found = false\n                }\n            } else {\n                found\
    \ = false\n            }\n            end--\n        }\n        if found {\n \
    \           result++\n        }\n        start++\n    }\n    return result\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpztockll6_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpztockll6_test.go:51\
    \ +0x39e\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074171
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        if myString[start]\
    \ == substring[0] {\n            found = true\n        }\n        for end < len(myString)\
    \ && myString[end] == substring[0] {\n            end++\n        }\n        if\
    \ found {\n            result += end - start\n            start = end\n      \
    \      found = false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074185
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyayi6vzb_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36f2co9h_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(myString) - start\n            start = len(myString)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3_unjt0_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    for ; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ result += how_many_times(myString[i+1:], substring[1:])\n        } else {\n\
    \            result += how_many_times(myString[i:], substring)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db37, 0x6}, {0x51d187,\
    \ 0x0})\n\t/tmp/tmpr9w0y8m3_test.go:19 +0x10b\ncommand-line-arguments_test.how_many_times({0x51db36,\
    \ 0x7}, {0x51d187, 0x1})\n\t/tmp/tmpr9w0y8m3_test.go:20 +0xbb\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpr9w0y8m3_test.go:36 +0x7b\ntesting.tRunner(0xc000199040, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[start] {\n    \
    \        end++\n        }\n        if end > start {\n            found = true\n\
    \            break\n        }\n        if end == start {\n            found =\
    \ true\n            break\n        }\n        if end < len(myString) {\n     \
    \       myString = myString[:end]\n        }\n        result++\n        start++\n\
    \    }\n    if found {\n        return result\n    }\n    return 0\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmp6uovvtet_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp6uovvtet_test.go:61:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmp6uovvtet_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if strings.Contains(s, substring) {\n            result += strings.Count(s,\
    \ substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfvf47srz_test.go:18:12: undefined: strings

    /tmp/tmpfvf47srz_test.go:19:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if strings.Contains(s, substring) {\n            result += 1\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbz_qye__test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring) - start\n            start = len(myString)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2nq4tqy9_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    i := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            count++\n     \
    \       for ; i < len(myString); i++ {\n                if myString[i] == substring[1]\
    \ {\n                    count++\n                    for ; i < len(myString);\
    \ i++ {\n                        if myString[i] == substring[2] {\n          \
    \                  count++\n                            for ; i < len(myString);\
    \ i++ {\n                                if myString[i] == substring[3] {\n  \
    \                                  count++\n                                 \
    \   for ; i < len(myString); i++ {\n                                        if\
    \ myString[i] == substring[4] {\n                                            count++\n\
    \                                            for ; i < len(myString); i++ {\n\
    \                                                if myString[i] == substring[5]\
    \ {\n                                                    count++\n           \
    \                                         for ; i < len(myString); i++ {\n   \
    \                                                     if myString[i] == substring[6]\
    \ {\n                                                            count++\n   \
    \                                                         for ; i < len(myString);\
    \ i++ {\n                                                                if myString[i]\
    \ == substring[7] {\n                                                        \
    \            count++\n                                                       \
    \             for ; i < len(myString); i++ {\n                               \
    \                                         if myString[i] == substring[8] {\n \
    \                                                                           count++\n\
    \                                                                            for\
    \ ; i < len(myString); i++ {\n                                               \
    \                                 if myString[i] == substring[9] {\n         \
    \                                                                           count++\n\
    \                                                                            \
    \        for ; i < len(myString); i++ {\n                                    \
    \                                                    if myString[i] == substring[10]\
    \ {\n                                                                        \
    \                    count++\n                                               \
    \                                             for ; i < len(myString); i++ {\n\
    \                                                                            \
    \                    if myString[i] == substring[11] {\n                     \
    \                                                                            \
    \   count++\n                                                                \
    \                                    for ; i < len(myString); i++ {\n        \
    \                                                                            \
    \                    if myString[i] == substring[12] {\n                     \
    \                                                                            \
    \           count++\n                                                        \
    \                                                    for ; i < len(myString);\
    \ i++ {\n                                                                    \
    \                                            if myString[i] == substring[13] {\n\
    \                                                                            \
    \                                        count++\n                           \
    \                                                                            \
    \             for ; i < len(myString); i++ {\n                               \
    \                                                                            \
    \             if myString[i] == substring[14] {\n                            \
    \                                                                            \
    \                    count++\n                                               \
    \                                                                            \
    \ for ; i < len(myString); i++ {\n                                           \
    \                                                                            \
    \         if myString[i] == substring[15] {\n                                \
    \                                                                            \
    \                        count++\n                                           \
    \                                                                            \
    \             for ; i < len(myString); i++ {\n                               \
    \                                                                            \
    \                             if myString[i] == substring[16] {\n            \
    \                                                                            \
    \                                                    count++\n               \
    \                                                                            \
    \                                                 for ; i < len(myString); i++\
    \ {\n                                                                        \
    \                                                                        if myString[i]\
    \ == substring[17] {\n                                                       \
    \                                                                            \
    \                 count++\n                                                  \
    \                                                                            \
    \                      for ; i < len(myString); i++ {\n                      \
    \                                                                            \
    \                                                      if myString[i] == substring[18]\
    \ {\n                                                                        \
    \                                                                            \
    \        count++\n                                                           \
    \                                                                            \
    \                     for ; i < len(myString); i++ {\n                       \
    \                                                                            \
    \                                                             if myString[i] ==\
    \ substring[19] {\n                                                          \
    \                                                                            \
    \                              count++\n                                     \
    \                                                                            \
    \                                                   for \nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplr4lnv1c_test.go:79:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            break\n        }\n        start = end + 1\n    }\n    if found {\n\
    \        result = 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpvyuw06er_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpvyuw06er_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            middle1 := (start + end) / 2\n       \
    \     middle2 := middle1 + 1\n            if middle2 > len(myString) {\n     \
    \           middle2 = middle1 + 1\n            }\n            if myString[middle1]\
    \ == substring[0] {\n                if middle2 > len(myString) {\n          \
    \          middle2 = middle1 + 1\n                }\n                if myString[middle2]\
    \ == substring[1] {\n                    found = true\n                    break\n\
    \                }\n            }\n            if myString[middle1] == substring[1]\
    \ {\n                if middle2 > len(myString) {\n                    middle2\
    \ = middle1 + 1\n                }\n                if myString[middle2] == substring[0]\
    \ {\n                    found = true\n                    break\n           \
    \     }\n            }\n        }\n        if found {\n            result += end\
    \ - start\n            start = middle1 + 1\n            end = middle2\n      \
    \      found = false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparz2yqxi_test.go:49:21: undefined: middle1

    /tmp/tmparz2yqxi_test.go:50:19: undefined: middle2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjumenykw_test.go:18:22: invalid operation: myChar == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n        }\n        if found {\n            result += end - start\n   \
    \         start = end\n            found = false\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074186
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end == -1 {\n            break\n        }\n        result\
    \ += end - start\n        start = end + len(substring)\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu9ts1rk_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString)\n\
    \    found := 0\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end == -1 {\n            break\n        }\n        found++\n\
    \        start = end + len(substring)\n    }\n    return found\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpss1ke73n_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start <= end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        start += 1\n        end -= 1\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnxm2k9iq_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            result += 1\n        }\n        start = end + 1\n    }\n    if !found\
    \ {\n        return 0\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmprsw29k6m_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end++\n        }\n       \
    \ if end == len(myString) {\n            result += end - start\n        }\n  \
    \      start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpj6kq9p62_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpj6kq9p62_test.go:40\
    \ +0x3f7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            found = myString[start:end] == substring\n\
    \            if found {\n                result += end - start\n             \
    \   start = end + 1\n                break\n            }\n            end -=\
    \ 1\n        }\n        if found {\n            break\n        }\n        start\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmps9wjds0x_test.go:55: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmps9wjds0x_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmps9wjds0x_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, s := range myString\
    \ {\n        if strings.Contains(s, substring) {\n            result += strings.Count(s,\
    \ substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfvf47srz_test.go:18:12: undefined: strings

    /tmp/tmpfvf47srz_test.go:19:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        found = false\n        for end < len(myString) {\n            if myString[end]\
    \ == substring[0] {\n                if end < len(myString) {\n              \
    \      if myString[end] == substring[1] {\n                        found = true\n\
    \                        count++\n                        break\n            \
    \        }\n                }\n            }\n            end++\n        }\n \
    \       if found {\n            break\n        }\n        start++\n    }\n   \
    \ return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp8qcvorl3_test.go:26\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp8qcvorl3_test.go:51\
    \ +0x347\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end > start {\n            found = true\n\
    \            break\n        }\n        if end == start {\n            found =\
    \ true\n            break\n        }\n        if end == len(myString) {\n    \
    \        found = true\n            break\n        }\n        if myString[start]\
    \ == substring[start] {\n            found = true\n            break\n       \
    \ }\n        if myString[end] == substring[end] {\n            found = true\n\
    \            break\n        }\n        if myString[start] == substring[end] {\n\
    \            found = true\n            break\n        }\n        if myString[end]\
    \ == substring[start] {\n            found = true\n            break\n       \
    \ }\n        if myString[start] == substring[end] {\n            found = true\n\
    \            break\n        }\n        if myString[end] == substring[end] {\n\
    \            found = true\n            break\n        }\n        if myString[start]\
    \ == substring[start] {\n            found = true\n            break\n       \
    \ }\n        if myString[end] == substring[start] {\n            found = true\n\
    \            break\n        }\n        if myString[start] == substring[end] {\n\
    \            found = true\n            break\n        }\n        if myString[end]\
    \ == substring[end] {\n            found = true\n            break\n        }\n\
    \        if myString[start] == substring[start] {\n            found = true\n\
    \            break\n        }\n        if myString[end] == substring[end] {\n\
    \            found = true\n            break\n        }\n        if myString[start]\
    \ == substring[end] {\n            found = true\n            break\n        }\n\
    \        if myString[end] == substring[end] {\n            found = true\n    \
    \        break\n        }\n        if myString[start] == substring[start] {\n\
    \            found = true\n            break\n        }\n        if myString[end]\
    \ == substring[end] {\n            found = true\n            break\n        }\n\
    \        if myString[start] == substring[end] {\n            found = true\n  \
    \          break\n        }\n        if myString[end] == substring[end] {\n  \
    \          found = true\n            break\n        }\n        if myString[start]\
    \ == substring[start] {\n            found = true\n            break\n       \
    \ }\n        if myString[end] == substring[end] {\n            found = true\n\
    \            break\n        }\n        if myString[start] == substring[end] {\n\
    \            found = true\n            break\n        }\n        if myString[end]\
    \ == substring[end] {\n            found = true\n            break\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpalrz24ve_test.go:124:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyayi6vzb_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            count++\n     \
    \   }\n        if myChar == substring[1] {\n            count++\n        }\n \
    \       if myChar == substring[2] {\n            count++\n        }\n        if\
    \ myChar == substring[3] {\n            count++\n        }\n        if myChar\
    \ == substring[4] {\n            count++\n        }\n        if myChar == substring[5]\
    \ {\n            count++\n        }\n        if myChar == substring[6] {\n   \
    \         count++\n        }\n        if myChar == substring[7] {\n          \
    \  count++\n        }\n        if myChar == substring[8] {\n            count++\n\
    \        }\n        if myChar == substring[9] {\n            count++\n       \
    \ }\n        if myChar == substring[10] {\n            count++\n        }\n  \
    \      if myChar == substring[11] {\n            count++\n        }\n        if\
    \ myChar == substring[12] {\n            count++\n        }\n        if myChar\
    \ == substring[13] {\n            count++\n        }\n        if myChar == substring[14]\
    \ {\n            count++\n        }\n        if myChar == substring[15] {\n  \
    \          count++\n        }\n        if myChar == substring[16] {\n        \
    \    count++\n        }\n        if myChar == substring[17] {\n            count++\n\
    \        }\n        if myChar == substring[18] {\n            count++\n      \
    \  }\n        if myChar == substring[19] {\n            count++\n        }\n \
    \       if myChar == substring[20] {\n            count++\n        }\n       \
    \ if myChar == substring[21] {\n            count++\n        }\n        if myChar\
    \ == substring[22] {\n            count++\n        }\n        if myChar == substring[23]\
    \ {\n            count++\n        }\n        if myChar == substring[24] {\n  \
    \          count++\n        }\n        if myChar == substring[25] {\n        \
    \    count++\n        }\n        if myChar == substring[26] {\n            count++\n\
    \        }\n        if myChar == substring[27] {\n            count++\n      \
    \  }\n        if myChar == substring[28] {\n            count++\n        }\n \
    \       if myChar == substring[29] {\n            count++\n        }\n       \
    \ if myChar == substring[30] {\n            count++\n        }\n        if myChar\
    \ == substring[31] {\n            count++\n        }\n        if myChar == substring[32]\
    \ {\n            count++\n        }\n        if myChar == substring[33] {\n  \
    \          count++\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6nc5x2ht_test.go:120:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    index := 0\n    length\
    \ := len(myString)\n    for index < length {\n        if myString[index] == substring[0]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[1]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[2]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[3]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[4]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[5]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[6]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[7]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[8]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[9]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[10]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[11]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[12]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[13]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[14]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[15]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[16]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[17]\
    \ {\n            index += 1\n            if index == length {\n              \
    \  return result\n            }\n        }\n        if myString[index] == substring[18]\
    \ {\n            index += 1\n            if index\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcp9q02l_test.go:131:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        if myString[start]\
    \ == substring[0] {\n            found = true\n            start += 1\n      \
    \      end -= 1\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            found = true\n            end -= 1\n        }\n        if found\
    \ {\n            result += end - start\n            found = false\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8f70?})\n\t/tmp/tmpjra3vnh3_test.go:30 +0x87\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpjra3vnh3_test.go:50 +0x7b\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n            break\n        }\n        start = end + 1\n    }\n    if found\
    \ {\n        result = 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpko88wbu1_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpko88wbu1_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            if myString[start] == substring[0] {\n\
    \                if myString[end-1] == substring[1] {\n                    found\
    \ = true\n                } else {\n                    found = false\n      \
    \              break\n                }\n            } else {\n              \
    \  found = false\n                break\n            }\n            end--\n  \
    \      }\n        if found {\n            result++\n            start = end\n\
    \            found = false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpife9r8h3_test.go:24\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpife9r8h3_test.go:53\
    \ +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074174
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    length :=\
    \ len(myString)\n    for i < length {\n        if myString[i] == substring {\n\
    \            i++\n            result++\n        }\n        if myString[i] == substring[0]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[1] {\n            i++\n            result++\n        }\n      \
    \  if myString[i] == substring[2] {\n            i++\n            result++\n \
    \       }\n        if myString[i] == substring[3] {\n            i++\n       \
    \     result++\n        }\n        if myString[i] == substring[4] {\n        \
    \    i++\n            result++\n        }\n        if myString[i] == substring[5]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[6] {\n            i++\n            result++\n        }\n      \
    \  if myString[i] == substring[7] {\n            i++\n            result++\n \
    \       }\n        if myString[i] == substring[8] {\n            i++\n       \
    \     result++\n        }\n        if myString[i] == substring[9] {\n        \
    \    i++\n            result++\n        }\n        if myString[i] == substring[10]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[11] {\n            i++\n            result++\n        }\n     \
    \   if myString[i] == substring[12] {\n            i++\n            result++\n\
    \        }\n        if myString[i] == substring[13] {\n            i++\n     \
    \       result++\n        }\n        if myString[i] == substring[14] {\n     \
    \       i++\n            result++\n        }\n        if myString[i] == substring[15]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[16] {\n            i++\n            result++\n        }\n     \
    \   if myString[i] == substring[17] {\n            i++\n            result++\n\
    \        }\n        if myString[i] == substring[18] {\n            i++\n     \
    \       result++\n        }\n        if myString[i] == substring[19] {\n     \
    \       i++\n            result++\n        }\n        if myString[i] == substring[20]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[21] {\n            i++\n            result++\n        }\n     \
    \   if myString[i] == substring[22] {\n            i++\n            result++\n\
    \        }\n        if myString[i] == substring[23] {\n            i++\n     \
    \       result++\n        }\n        if myString[i] == substring[24] {\n     \
    \       i++\n            result++\n        }\n        if myString[i] == substring[25]\
    \ {\n            i++\n            result++\n        }\n        if myString[i]\
    \ == substring[26] {\n            i++\n            result++\n        }\n     \
    \   if myString[i] == substring[27] {\n            i++\n            result++\n\
    \        }\n        if myString[i] == substring[28] {\n            \nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4l0hhsnn_test.go:138:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074174
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n        }\n        if found {\n  \
    \          result += end - start\n            start = end\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074187
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n        }\n        if found {\n            result += end - start\n   \
    \         start = end\n            found = false\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074186
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        for end\
    \ < len(myString) {\n            if myString[end] == substring[0] {\n        \
    \        end += 1\n            }\n            if myString[end] == substring[1]\
    \ {\n                end += 1\n            }\n            if myString[end] ==\
    \ substring[2] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[3] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[4] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[5] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[6] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[7] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[8] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[9] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[10] {\n                end += 1\n            }\n            if\
    \ myString[end] == substring[11] {\n                end += 1\n            }\n\
    \            if myString[end] == substring[12] {\n                end += 1\n \
    \           }\n            if myString[end] == substring[13] {\n             \
    \   end += 1\n            }\n            if myString[end] == substring[14] {\n\
    \                end += 1\n            }\n            if myString[end] == substring[15]\
    \ {\n                end += 1\n            }\n            if myString[end] ==\
    \ substring[16] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[17] {\n                end += 1\n            }\n            if\
    \ myString[end] == substring[18] {\n                end += 1\n            }\n\
    \            if myString[end] == substring[19] {\n                end += 1\n \
    \           }\n            if myString[end] == substring[20] {\n             \
    \   end += 1\n            }\n            if myString[end] == substring[21] {\n\
    \                end += 1\n            }\n            if myString[end] == substring[22]\
    \ {\n                end += 1\n            }\n            if myString[end] ==\
    \ substring[23] {\n                end += 1\n            }\n            if myString[end]\
    \ == substring[24] {\n                end += 1\n            }\n            if\
    \ myString[end] == substring[25] {\n                end += 1\n            }\n\
    \            if myString[end] == substring[26] {\n                end += 1\n \
    \           }\n            if myString[end] == substring[27] {\n             \
    \   end \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46i909v5_test.go:109:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074174
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyayi6vzb_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \        }\n        if found {\n            result += end - start\n          \
    \  start = end\n            found = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074188
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            found = true\n            count\
    \ += end - start\n        }\n        start = end + len(substring)\n    }\n   \
    \ if !found {\n        return 0\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0f44pdgs_test.go:21:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074174
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString)\n\
    \    count := 0\n    for start < end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        if strings.Contains(myString[start:end], substring) {\n\
    \            count++\n        }\n        start += 1\n        end -= 1\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfbl2i1u_test.go:20:18: undefined: strings

    /tmp/tmphfbl2i1u_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074174
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        for end > start {\n            if myString[start] == substring[0] {\n\
    \                if myString[end-1] == substring[1] {\n                    end\
    \ -= 1\n                } else {\n                    found = true\n         \
    \           break\n                }\n            } else {\n                found\
    \ = true\n                break\n            }\n        }\n        if found {\n\
    \            result += end - start\n            found = false\n        }\n   \
    \     start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp77etgixa_test.go:24\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp77etgixa_test.go:52\
    \ +0x3d8\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString) -\
    \ 1\n    count := 0\n    for start < end {\n        if myString[start] == substring[0]\
    \ {\n            count++\n            start += 1\n        }\n        if myString[end]\
    \ == substring[len(substring)-1] {\n            count++\n            end -= 1\n\
    \        }\n        if myString[start] == substring[len(substring)-1] {\n    \
    \        count++\n            end -= 1\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074188
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                    break\n                }\
    \ else {\n                    found = false\n                    break\n     \
    \           }\n            } else {\n                found = false\n         \
    \       break\n            }\n            end--\n        }\n        if found {\n\
    \            result++\n            start = end + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2f90?}, {0x51d187?,\
    \ 0xc0000f8c30?})\n\t/tmp/tmpqphvtmg8_test.go:25 +0x74\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpqphvtmg8_test.go:54 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    i := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            count++\n     \
    \       for ; i < len(myString); i++ {\n                if myString[i] == substring[1]\
    \ {\n                    count++\n                    for ; i < len(myString);\
    \ i++ {\n                        if myString[i] == substring[2] {\n          \
    \                  count++\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp56wq4x8x_test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp56wq4x8x_test.go:44\
    \ +0x3b3\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074175
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        for end\
    \ > start && myString[end-1] == substring[end-1] {\n            end--\n      \
    \  }\n        if myString[start] == substring[0] {\n            found = true\n\
    \        }\n        if found {\n            result += end - start\n          \
    \  start = end\n            found = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074188
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) && myString[end] == substring[end] {\n            end++\n  \
    \      }\n        if end > start {\n            found = true\n            break\n\
    \        }\n    }\n    if found {\n        return end - start\n    } else {\n\
    \        return 0\n    }\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpabqeouoh_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpabqeouoh_test.go:44\
    \ +0x348\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start <= end {\n        index := strings.Index(myString[start:end],\
    \ substring)\n        if index == -1 {\n            count++\n        } else {\n\
    \            count++\n            start = index + 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp439rkm0u_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    for ; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i+1] == substring[1] {\n                result += 2\n          \
    \      i += 2\n            } else {\n                result += 1\n           \
    \     i += 1\n            }\n        } else {\n            result += 1\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp498o8e4b_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp498o8e4b_test.go:42\
    \ +0x396\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) && myString[end] == substring[end] {\n            end++\n  \
    \      }\n        if end > start {\n            found = true\n            break\n\
    \        }\n        start = end\n    }\n    if found {\n        return end - start\n\
    \    } else {\n        return 0\n    }\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp157d9svy_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp157d9svy_test.go:45\
    \ +0x3c7\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start] == substring[0] {\n            found = true\n\
    \            start += 1\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            found = true\n            end -= len(substring)\n        }\n\
    \        if found {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074189
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            break\n        }\n        start = end + 1\n    }\n    if found {\n\
    \        result = end - start\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmp4y_43khu_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp4y_43khu_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmp4y_43khu_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start < end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        if count > 1 {\n            break\n        }\n        start\
    \ += 1\n        end -= 1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsy1wq6t_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpru84fchh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            end = len(myString)\n\
    \        }\n        if myString[start:end] == substring {\n            found =\
    \ true\n            result += 1\n        }\n        start = end + 1\n    }\n \
    \   if !found {\n        return 0\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpbjtu_i1a_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := 0\n    found :=\
    \ false\n    for start < len(myString) {\n        end = start\n        for end\
    \ < len(myString) {\n            if myString[end] == substring[0] {\n        \
    \        if end < len(myString) {\n                    if myString[end] == substring[1]\
    \ {\n                        found = true\n                        break\n   \
    \                 }\n                }\n            }\n            end++\n   \
    \     }\n        if found {\n            break\n        }\n        start++\n \
    \   }\n    if found {\n        return end - start\n    }\n    return 0\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpc_yh2ior_test.go:24\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpc_yh2ior_test.go:51\
    \ +0x3c7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(myString) - start\n            start = len(myString)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3_unjt0_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    index := 0\n    for index\
    \ := 0; index < len(myString); index++ {\n        if myString[index] == substring[0]\
    \ {\n            result += how_many_times(myString[index+1:], substring[1:])\n\
    \        } else {\n            result += how_many_times(myString[index:], substring)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpase24tbt_test.go:17:5: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, letter := range\
    \ myString {\n        if letter == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedyrsez6_test.go:18:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            result += how_many_times(myString[1\
    \ : len(myString)-1], substring)\n        } else {\n            result += how_many_times(myString[1\
    \ : len(myString)-1], substring[1:])\n        }\n    }\n    return result\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc945hgvr_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw8yd4_i_test.go:18:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring {\n            result += 1\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01765zvh_test.go:18:22: invalid operation: myChar == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        found = false\n        for end < len(myString) {\n            if myString[end]\
    \ == substring[0] {\n                if end == start {\n                    found\
    \ = true\n                    break\n                }\n                if myString[end]\
    \ == substring[1] {\n                    found = true\n                    break\n\
    \                }\n            }\n            end++\n        }\n        if found\
    \ {\n            result += end - start\n            start = end + 1\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc000191040?})\n\t/tmp/tmpjcq16ogi_test.go:29 +0x85\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpjcq16ogi_test.go:52 +0x7b\ntesting.tRunner(0xc000199380, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end > start {\n            found = true\n\
    \            if start < end {\n                result += end - start\n       \
    \     }\n            start = end\n        }\n    }\n    if found {\n        return\
    \ result\n    } else {\n        return 0\n    }\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmphkg6tdmr_test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmphkg6tdmr_test.go:48\
    \ +0x449\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end == len(myString) {\n            found\
    \ = true\n            break\n        }\n        if myString[start] == substring[0]\
    \ {\n            found = true\n            start = end + 1\n        }\n      \
    \  if found {\n            result += end - start\n            found = false\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8f70?})\n\t/tmp/tmp2042envw_test.go:22 +0x9f\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp2042envw_test.go:49 +0x7b\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpru84fchh_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  found = false\n                    break\n                }\n            }\
    \ else {\n                found = false\n                break\n            }\n\
    \            end--\n        }\n        if found {\n            result++\n    \
    \    }\n        start++\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpgkfseubh_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpgkfseubh_test.go:53\
    \ +0x387\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    start := 0\n    end := len(myString)\n\
    \    count := 0\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = end\
    \ + 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewpd3hkx_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        found = false\n        for end > start {\n            if myString[start]\
    \ == substring[0] {\n                if myString[end-1] == substring[1] {\n  \
    \                  found = true\n                } else {\n                  \
    \  found = false\n                    break\n                }\n            }\
    \ else {\n                found = false\n                break\n            }\n\
    \            end--\n        }\n        if found {\n            result++\n    \
    \    }\n        start++\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpgkfseubh_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpgkfseubh_test.go:53\
    \ +0x387\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring[0] {\n            count++\n     \
    \   }\n    }\n    for _, subChar := range substring {\n        if subChar == myString[0]\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8kp8nie8_test.go:18:22: invalid operation: myChar == substring[0] (mismatched
    types rune and byte)

    /tmp/tmp8kp8nie8_test.go:23:23: invalid operation: subChar == myString[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    i := 0\n    for ; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ result += 1\n            myString = myString[i+1:]\n            i = 0\n    \
    \    } else if myString[i] == substring[1] {\n            myString = myString[i+1:]\n\
    \            i = 0\n        } else {\n            i = 0\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074190
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4tedoev_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString) - 1\n    for start <= end {\n        count += strings.Count(myString[start:end],\
    \ substring)\n        if count > 1 {\n            break\n        }\n        start\
    \ += 1\n        end -= 1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3a6r8zo_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, myChar := range\
    \ myString {\n        if myChar == substring {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjumenykw_test.go:18:22: invalid operation: myChar == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074173
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyayi6vzb_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074170
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end++\n        }\n       \
    \ if end > start {\n            result += end - start\n        }\n        start\
    \ = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpx7x8puba_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpx7x8puba_test.go:40\
    \ +0x3d7\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074172
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) && end < len(myString) {\n        end += len(myString)\
    \ - start\n        if myString[start:end] == substring {\n            count++\n\
    \        }\n        start = end\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpri1ll7kh_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpri1ll7kh_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpri1ll7kh_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        if myString[start]\
    \ == substring[0] {\n            found = true\n            end++\n           \
    \ for start < end {\n                if myString[start] == substring[1] {\n  \
    \                  end++\n                } else {\n                    break\n\
    \                }\n            }\n        }\n        if found {\n           \
    \ result += end - start\n            found = false\n        }\n        start++\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc000192dd0?})\n\t/tmp/tmp85s0nxdz_test.go:29 +0x71\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp85s0nxdz_test.go:53 +0x7b\ntesting.tRunner(0xc00019b1e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring)\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrardqm5_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end > start {\n            found = true\n\
    \            break\n        }\n        if end == len(myString) {\n           \
    \ break\n        }\n        if myString[end] == substring[0] {\n            end++\n\
    \        }\n        if myString[end] == substring[len(substring)-1] {\n      \
    \      end++\n        }\n        if myString[end] == substring[0] && myString[end+1]\
    \ == substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[0] {\n            end++\n        }\n        if myString[end] ==\
    \ substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[0] && myString[end+1] == substring[len(substring)-1] {\n      \
    \      end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if myString[end] == substring[0] {\n\
    \            end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if myString[end] == substring[0] &&\
    \ myString[end+1] == substring[len(substring)-1] {\n            end++\n      \
    \  }\n        if myString[end] == substring[len(substring)-1] {\n            end++\n\
    \        }\n        if myString[end] == substring[0] {\n            end++\n  \
    \      }\n        if myString[end] == substring[len(substring)-1] {\n        \
    \    end++\n        }\n        if myString[end] == substring[0] && myString[end+1]\
    \ == substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[0] {\n            end++\n        }\n        if myString[end] ==\
    \ substring[len(substring)-1] {\n            end++\n        }\n        if myString[end]\
    \ == substring[0] && myString[end+1] == substring[len(substring)-1] {\n      \
    \      end++\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            end++\n        }\n        if myString[end] == substring[0] {\n\
    \            end++\n        }\n        if myString[end] == substring\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpse_f2flk_test.go:96:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074176
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end == -1 {\n            break\n        }\n        result\
    \ += end - start\n        start = end + len(substring)\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu9ts1rk_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074172
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \   }\n        start = end + len(substring)\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeubxs3zq_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074169
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for _, char := range myString\
    \ {\n        if char == substring {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44yfgtx1_test.go:18:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074167
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ len(myString)\n    found := false\n    for start < end {\n        end := start\n\
    \        for end < end && myString[end] == substring[end] {\n            end++\n\
    \        }\n        if end > start {\n            result += end - start\n    \
    \        found = true\n        }\n        start = end\n    }\n    if !found {\n\
    \        return 0\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074191
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) && myString[end] == substring[end] {\n      \
    \      end++\n        }\n        if end == len(myString) {\n            found\
    \ = true\n            break\n        }\n        if myString[start] == substring[start]\
    \ {\n            count++\n            start = end\n        }\n    }\n    if !found\
    \ {\n        return 0\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplm12fi5x_test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplm12fi5x_test.go:48\
    \ +0x4bf\ntesting.tRunner(0xc0001991e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = end\
    \ + 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k0044il_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    start := 0\n    end :=\
    \ len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count += end - start\n     \
    \       start = end + len(substring)\n        } else {\n            start = end\
    \ + 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k0044il_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\
    \ + len(substring)\n        if end > len(myString) {\n            break\n    \
    \    }\n        if myString[start:end] == substring {\n            found = true\n\
    \            result += 1\n        }\n        start = end + 1\n    }\n    if found\
    \ {\n        return result\n    }\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpadrrfae1_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = start\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    } else {\n                        found = false\n\
    \                        break\n                    }\n                } else\
    \ {\n                    found = true\n                    break\n           \
    \     }\n            } else {\n                found = false\n               \
    \ break\n            }\n            end++\n        }\n        if found {\n   \
    \         result += end - start\n            start = end\n            found =\
    \ false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2f90?}, {0x51d187?,\
    \ 0xc0000f8ea0?})\n\t/tmp/tmpdqo7sdyt_test.go:25 +0x4a\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpdqo7sdyt_test.go:59 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
