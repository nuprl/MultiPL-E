language: go_test.go
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    var squareSum float64\n  \
    \  for _, number := range numbers {\n        sum += number\n        squareSum\
    \ += number * number\n    }\n    mean = sum / float64(len(numbers))\n    squareSum\
    \ -= mean * mean\n    return squareSum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmphw4g3ppx_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=1.375)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmphw4g3ppx_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=5.9375)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmphw4g3ppx_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=9.2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppti3dyr7_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    var sum float64\n    for _, number := range\
    \ numbers {\n        sum += (number - mean) * (number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpjbb_47so_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpjbb_47so_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpjbb_47so_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Abs(mean-mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1heqdgm_test.go:17:16: undefined: math

    /tmp/tmph1heqdgm_test.go:19:13: undefined: mean

    /tmp/tmph1heqdgm_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers) / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return math.Sqrt(sum(diff*diff) / float64(len(diff)))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6qszxqmh_test.go:17:16: undefined: math

    /tmp/tmp6qszxqmh_test.go:19:13: undefined: sum

    /tmp/tmp6qszxqmh_test.go:24:12: undefined: math

    /tmp/tmp6qszxqmh_test.go:24:22: undefined: sum

    /tmp/tmp6qszxqmh_test.go:24:26: invalid operation: operator * not defined on diff
    (variable of type []float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6z0ojzu_test.go:19:13: undefined: mean

    /tmp/tmpi6z0ojzu_test.go:20:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprliwglp0_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprliwglp0_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprliwglp0_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / (float64(len(numbers)) -\
    \ 1.0)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmph7ws5ipe_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmph7ws5ipe_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=15.333333333333334)'\n    --- FAIL:\
    \ TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmph7ws5ipe_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=36.5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggb10cw1_test.go:16:13: undefined: mean

    /tmp/tmpggb10cw1_test.go:17:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var squareOfSums\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        squareOfSums += number\n    }\n\
    \    return mean / float64(len(numbers)) - squareOfSums / float64(len(numbers))\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptmle66d0_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=0.75)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptmle66d0_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.875)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptmle66d0_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2.4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ sum(diff) / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcd5o66a_test.go:19:13: undefined: sum

    /tmp/tmpwcd5o66a_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpfyh1ej5a_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Sqrt(float64(1) - math.Pow(mean - float64(numbers[0]), 2))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc47yjj0c_test.go:22:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    var squareSum float64\n  \
    \  for _, number := range numbers {\n        sum += number\n        squareSum\
    \ += number * number\n    }\n    mean = sum / float64(len(numbers))\n    return\
    \ squareSum / (float64(len(numbers)) * mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp2a386uwb_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=1.6666666666666667)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp2a386uwb_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=3)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp2a386uwb_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=3.6666666666666665)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n\n    for _, number := range numbers {\n        mean += number\n  \
    \      sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmp3ivtcyc2_test.go:44: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmp3ivtcyc2_test.go:44:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return sum(absdiff(numbers, mean)) / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s9_x4_t_test.go:19:13: undefined: sum

    /tmp/tmp5s9_x4_t_test.go:20:12: undefined: sum

    /tmp/tmp5s9_x4_t_test.go:20:16: undefined: absdiff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6z0ojzu_test.go:19:13: undefined: mean

    /tmp/tmpi6z0ojzu_test.go:20:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean) * (number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow3q55ix_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return average(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxk2ijxc_test.go:16:13: undefined: mean

    /tmp/tmpmxk2ijxc_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9vzxhsd_test.go:19:13: undefined: mean

    /tmp/tmps9vzxhsd_test.go:20:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ sum(diff) / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9meqs6m_test.go:19:13: undefined: sum

    /tmp/tmpw9meqs6m_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return sum(diff)\
    \ / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdn860ooe_test.go:19:13: undefined: sum

    /tmp/tmpdn860ooe_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1wtffpy_test.go:19:13: undefined: mean

    /tmp/tmph1wtffpy_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppti3dyr7_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Abs(mean - mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptce0vrc6_test.go:22:12: undefined: math

    /tmp/tmptce0vrc6_test.go:22:28: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    return sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=-6.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvdpobupz_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=-92.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=-214)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Sqrt(float64(\n        float64(\n           \
    \ math.Abs(numbers[0])-mean\n        )\n    ))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn2p3nf7c_test.go:22:38: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    mean = mean / float64(len(numbers))\n    return sumOfSquares / float64(len(numbers))\
    \ - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpf43zgctj_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpf43zgctj_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpf43zgctj_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ujgwger_test.go:19:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        deviations[i] = numbers[i] - mean\n   \
    \ }\n    return math.Sqrt(float64(deviations)/float64(len(deviations)))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkcgz5om_test.go:28:12: undefined: math

    /tmp/tmphkcgz5om_test.go:28:30: cannot convert deviations (variable of type []float64)
    to type float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uzmavu1_test.go:19:13: undefined: mean

    /tmp/tmp9uzmavu1_test.go:24:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviation := 0.0\n    for _, number := range numbers\
    \ {\n        deviation += math.Abs(number - mean)\n    }\n    return math.Sqrt(deviation\
    \ / (float64(len(numbers))))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4rry2t4_test.go:26:22: undefined: math

    /tmp/tmpt4rry2t4_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviation := 0.0\n    for _, number := range numbers\
    \ {\n        deviation += math.Abs(number - mean)\n    }\n    return math.Sqrt(deviation\
    \ / float64(len(numbers)))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto0zzbdf_test.go:26:22: undefined: math

    /tmp/tmpto0zzbdf_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ sum(diff) / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcd5o66a_test.go:19:13: undefined: sum

    /tmp/tmpwcd5o66a_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    return sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=-6.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvdpobupz_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=-92.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=-214)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return sum(diff)\
    \ / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdn860ooe_test.go:19:13: undefined: sum

    /tmp/tmpdn860ooe_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ sum(diff) / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9meqs6m_test.go:19:13: undefined: sum

    /tmp/tmpw9meqs6m_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    diff := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return math.Sqrt(mean_absolute_deviation_squaredsum(diff))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41zrtp16_test.go:17:16: undefined: math

    /tmp/tmp41zrtp16_test.go:19:13: undefined: mean

    /tmp/tmp41zrtp16_test.go:24:12: undefined: math

    /tmp/tmp41zrtp16_test.go:24:22: undefined: mean_absolute_deviation_squaredsum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean) * (number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow3q55ix_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpfyh1ej5a_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Sqrt(math.Pow(float64(numbers[0]-mean), 2))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7t14it1_test.go:22:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers) / float64(len(numbers))\n    return math.Sqrt(sum((numbers - mean)*(numbers\
    \ - mean)) / float64(len(numbers)-1))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppv8dfakh_test.go:17:16: undefined: math

    /tmp/tmppv8dfakh_test.go:19:13: undefined: sum

    /tmp/tmppv8dfakh_test.go:20:12: undefined: math

    /tmp/tmppv8dfakh_test.go:20:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] =\
    \ number - mean\n    }\n    return math.Sqrt(math.Abs(deviations).Sum())\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8a8xd1e_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var squareOfSums\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        squareOfSums += number\n    }\n\
    \    return mean / float64(len(numbers)) * math.Sqrt(sumOfSquares / squareOfSums)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvbztk74_test.go:24:43: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return sum(numbers) / float64(len(numbers)) - mean\
    \ * mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx4474r7_test.go:19:13: undefined: sum

    /tmp/tmpkx4474r7_test.go:20:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Sqrt(float64(\n        float64(\n           \
    \ math.Abs(\n                float64(numbers[0]-mean)\n            )\n       \
    \ )\n    )/float64(len(numbers)-1))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3dw4ids5_test.go:23:41: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq9_ug78_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Abs(mean-mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1heqdgm_test.go:17:16: undefined: math

    /tmp/tmph1heqdgm_test.go:19:13: undefined: mean

    /tmp/tmph1heqdgm_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9vzxhsd_test.go:19:13: undefined: mean

    /tmp/tmps9vzxhsd_test.go:20:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers) / float64(len(numbers))\n    return math.Sqrt(math.Abs(mean-mean(numbers)))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyrwsbgpk_test.go:17:16: undefined: math

    /tmp/tmpyrwsbgpk_test.go:19:13: undefined: sum

    /tmp/tmpyrwsbgpk_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    return sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9k7kiiyc_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=2.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9k7kiiyc_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=7.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9k7kiiyc_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean) * (number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow3q55ix_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppti3dyr7_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return sum(absdiff(numbers, mean)) / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphh_qvlhi_test.go:19:13: undefined: sum

    /tmp/tmphh_qvlhi_test.go:20:12: undefined: sum

    /tmp/tmphh_qvlhi_test.go:20:16: undefined: absdiff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return mean(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupryem3m_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1wtffpy_test.go:19:13: undefined: mean

    /tmp/tmph1wtffpy_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptpkdv6q__test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpwm4wtdk1_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpwm4wtdk1_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpwm4wtdk1_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\
    \ - sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp0ip1sqxl_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=-2)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp0ip1sqxl_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=4)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp0ip1sqxl_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=18.2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] =\
    \ number - mean\n    }\n    return math.Sqrt(deviations.reduce(func(prev, current\
    \ float64) float64 {\n        return prev + math.Pow(current, 2)\n    }))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdm0v87ko_test.go:28:12: undefined: math

    /tmp/tmpdm0v87ko_test.go:28:33: deviations.reduce undefined (type []float64 has
    no field or method reduce)

    /tmp/tmpdm0v87ko_test.go:29:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean) * (number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow3q55ix_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ average(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedxk1r73_test.go:16:13: undefined: mean

    /tmp/tmpedxk1r73_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  var mad float64\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp484uxv6k_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / (float64(len(numbers)) -\
    \ 1.0)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmph7ws5ipe_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmph7ws5ipe_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=15.333333333333334)'\n    --- FAIL:\
    \ TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmph7ws5ipe_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=36.5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    mean = mean / float64(len(numbers))\n    return sumOfSquares / float64(len(numbers))\
    \ - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpf43zgctj_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpf43zgctj_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpf43zgctj_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ average(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedxk1r73_test.go:16:13: undefined: mean

    /tmp/tmpedxk1r73_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnuetuanw_test.go:17:16: undefined: math

    /tmp/tmpnuetuanw_test.go:19:13: undefined: mean

    /tmp/tmpnuetuanw_test.go:20:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers) / float64(len(numbers))\n    return math.Abs(mean-mean(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzps62vg_test.go:17:16: undefined: math

    /tmp/tmpzzps62vg_test.go:19:13: undefined: sum

    /tmp/tmpzzps62vg_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Abs(mean - mean_number(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1liqcus9_test.go:22:12: undefined: math

    /tmp/tmp1liqcus9_test.go:22:28: undefined: mean_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppx75x39__test.go:19:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1wtffpy_test.go:19:13: undefined: mean

    /tmp/tmph1wtffpy_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvpmbmo0_test.go:19:13: undefined: mean

    /tmp/tmphvpmbmo0_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] +=\
    \ (number - mean)\n    }\n    deviations /= float64(len(numbers)-1)\n    return\
    \ deviations[len(deviations)-1]\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbg1ud2st_test.go:28:5: invalid operation: deviations /= float64(len(numbers)
    - 1) (mismatched types []float64 and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean)\n    }\n\
    \    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp82gietag_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp82gietag_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp82gietag_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n\n    for _, number := range numbers {\n        mean += number\n  \
    \      sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmp3ivtcyc2_test.go:44: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmp3ivtcyc2_test.go:44:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] =\
    \ number - mean\n    }\n    return math.Sqrt(math.Pow(deviations[len(deviations)-1],\
    \ 2))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ajbw7zo_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptpkdv6q__test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggb10cw1_test.go:16:13: undefined: mean

    /tmp/tmpggb10cw1_test.go:17:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uzmavu1_test.go:19:13: undefined: mean

    /tmp/tmp9uzmavu1_test.go:24:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sum float64\n\
    \    for _, number := range numbers {\n        sum += number\n        sumOfSquares\
    \ += number * number\n    }\n    mean = sum / float64(len(numbers))\n    return\
    \ sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpqal_7xl6_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpqal_7xl6_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpqal_7xl6_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] +=\
    \ (number - mean)\n    }\n    deviations := deviations[:len(deviations)-1]\n \
    \   mean := deviations[len(deviations)-1]\n    return mean / math.Sqrt(float64(len(deviations)-1))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2eqhe5y7_test.go:28:16: no new variables on left side of :=

    /tmp/tmp2eqhe5y7_test.go:29:10: no new variables on left side of :=

    /tmp/tmp2eqhe5y7_test.go:30:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n    }\n\
    \    return sum(diff) / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0n87c6k2_test.go:19:13: undefined: sum

    /tmp/tmp0n87c6k2_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return float64(math.Sqrt(float64(\n        math.Pow(float64(numbers[0]\
    \ - mean), 2) +\n        math.Pow(float64(numbers[1] - mean), 2) +\n        math.Pow(float64(numbers[2]\
    \ - mean), 2) +\n        math.Pow(float64(numbers[3] - mean), 2)\n    )))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4l8ppa3h_test.go:24:48: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    var sum float64\n    for _, number := range\
    \ numbers {\n        sum += (number - mean) * (number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpjbb_47so_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpjbb_47so_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpjbb_47so_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1wtffpy_test.go:19:13: undefined: mean

    /tmp/tmph1wtffpy_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - mean\n\
    \    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppti3dyr7_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    diff := make([]float64, len(numbers))\n    for i := range\
    \ diff {\n        diff[i] = numbers[i] - mean\n    }\n    return math.Sqrt(mean(diff))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamlt_0nq_test.go:17:16: undefined: math

    /tmp/tmpamlt_0nq_test.go:19:13: undefined: mean

    /tmp/tmpamlt_0nq_test.go:24:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    return sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=-6.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvdpobupz_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=-92.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=-214)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean) * (number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow3q55ix_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow3q55ix_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    var sumOfSquares float64\n    for _, number := range numbers {\n        mean\
    \ += number\n        sumOfSquares += (number - mean) * (number - mean)\n    }\n\
    \    return sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmp1hfv0bnp_test.go:43: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmp1hfv0bnp_test.go:43:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviation := 0.0\n    for _, number := range numbers\
    \ {\n        deviation += math.Abs(number - mean)\n    }\n    return math.Sqrt(deviation\
    \ / (float64(len(numbers)) * float64(len(numbers))))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmped3ry3sc_test.go:26:22: undefined: math

    /tmp/tmped3ry3sc_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpfyh1ej5a_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uzmavu1_test.go:19:13: undefined: mean

    /tmp/tmp9uzmavu1_test.go:24:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return mean(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3t8xy15n_test.go:17:16: undefined: math

    /tmp/tmp3t8xy15n_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1wtffpy_test.go:19:13: undefined: mean

    /tmp/tmph1wtffpy_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Abs(mean-mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7g33gay_test.go:17:16: undefined: math

    /tmp/tmps7g33gay_test.go:19:13: undefined: mean

    /tmp/tmps7g33gay_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    return math.Abs(mean-mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1heqdgm_test.go:17:16: undefined: math

    /tmp/tmph1heqdgm_test.go:19:13: undefined: mean

    /tmp/tmph1heqdgm_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfcqlrp3l_test.go:19:13: undefined: mean

    /tmp/tmpfcqlrp3l_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return float64(\n        math.Sqrt(\n            float64(\n             \
    \   float64(len(numbers)) -\n                float64(len(numbers)) -\n       \
    \         float64(len(numbers)) *\n                (float64(len(numbers)-1) -\
    \ float64(len(numbers)-1)*mean)\n            ) /\n            float64(len(numbers)-1)\n\
    \        )\n    )\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwvxwg9v_test.go:26:73: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    diff := 0.0\n    for _, number := range numbers\
    \ {\n        diff += math.Abs(number - mean)\n    }\n    return diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsy9k41qo_test.go:26:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Abs(mean - mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptce0vrc6_test.go:22:12: undefined: math

    /tmp/tmptce0vrc6_test.go:22:28: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ mean(numbers)\n    diff := make([]float64, len(numbers))\n    for i := range\
    \ diff {\n        diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4546onp4_test.go:17:16: undefined: math

    /tmp/tmp4546onp4_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    return average(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixzware6_test.go:19:13: undefined: mean

    /tmp/tmpixzware6_test.go:20:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4062hzvg_test.go:41:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4062hzvg_test.go:41: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ujgwger_test.go:19:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ average(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedxk1r73_test.go:16:13: undefined: mean

    /tmp/tmpedxk1r73_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    var sumOfSquares float64\n    for _, number := range numbers {\n        mean\
    \ += number\n        sumOfSquares += (number - mean) * (number - mean)\n    }\n\
    \    return sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmp1hfv0bnp_test.go:43: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmp1hfv0bnp_test.go:43:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] =\
    \ number - mean\n    }\n    return math.Sqrt(float64(deviations[len(deviations)-1]*deviations[len(deviations)-1]))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5thnni2s_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        deviations[len(deviations)-1] =\
    \ number - mean\n    }\n    return math.Sqrt(deviations.reduce(func(prev, current\
    \ float64) float64 {\n        return prev + math.Pow(current, 2)\n    }))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdm0v87ko_test.go:28:12: undefined: math

    /tmp/tmpdm0v87ko_test.go:28:33: deviations.reduce undefined (type []float64 has
    no field or method reduce)

    /tmp/tmpdm0v87ko_test.go:29:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ average(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedxk1r73_test.go:16:13: undefined: mean

    /tmp/tmpedxk1r73_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpfyh1ej5a_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpfyh1ej5a_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbivniua_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpk4y95ao8_test.go:42: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpk4y95ao8_test.go:42:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074118
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return math.Sqrt(sum\
    \ / float64(len(numbers)))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcumbukfu_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    var sumOfSquareOfDifferenceSquares float64\n    var sumOfSquareOfDifferenceSquareOfDifferences\
    \ float64\n\n    for _, number := range numbers {\n        mean += number\n  \
    \      sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n        sumOfSquareOfDifferenceSquares += (number\
    \ - mean) * (number - mean)\n    }\n\n    return sumOfSquares / float64(len(numbers))\
    \ - sumOfSquareOfDifferences / float64(len(numbers)) - sumOfSquareOfDifferenceSquares\
    \ / float64(len(numbers)) - sumOfSquareOfDifferenceSquareOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpwvod0ur__test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpwvod0ur__test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=-15.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpwvod0ur__test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=-47.4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += (number - mean)\
    \ * (number - mean)\n    }\n    return sumOfSquares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmpr8vi2gge_test.go:40: expected '%!s(float64=1)', got '%!s(float64=11.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpr8vi2gge_test.go:40:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=29.2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += (number - mean)\n    }\n\
    \    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp82gietag_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp82gietag_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp82gietag_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers) / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n  \
    \  return math.Sqrt(sum(diff*diff) / float64(len(diff)))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwffb6zyv_test.go:17:16: undefined: math

    /tmp/tmpwffb6zyv_test.go:19:13: undefined: sum

    /tmp/tmpwffb6zyv_test.go:24:12: undefined: math

    /tmp/tmpwffb6zyv_test.go:24:22: undefined: sum

    /tmp/tmpwffb6zyv_test.go:24:26: invalid operation: operator * not defined on diff
    (variable of type []float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    diff := 0.0\n    for _, number := range numbers\
    \ {\n        diff += math.Abs(number - mean)\n    }\n    return diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsy9k41qo_test.go:26:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n  \
    \  for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc10760e9_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uzmavu1_test.go:19:13: undefined: mean

    /tmp/tmp9uzmavu1_test.go:24:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074119
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        sumOfSquares += (number - mean) * (number - mean)\n\
    \    }\n    return sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpnlg77nc__test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpnlg77nc__test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpnlg77nc__test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0z_8c8u_test.go:19:13: undefined: mean

    /tmp/tmpj0z_8c8u_test.go:24:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return sum(diff)\
    \ / float64(len(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65an3k2n_test.go:19:13: undefined: sum

    /tmp/tmp65an3k2n_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    return sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=-6.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvdpobupz_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=-92.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvdpobupz_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=-214)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return math.Abs(mean-mean(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm8gn4zlm_test.go:19:13: undefined: sum

    /tmp/tmpm8gn4zlm_test.go:20:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    for _, number :=\
    \ range numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \    }\n    mean /= float64(len(numbers))\n    sumOfSquares /= float64(len(numbers))\n\
    \    return sumOfSquares - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp48yapo4h_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp48yapo4h_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp48yapo4h_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074123
