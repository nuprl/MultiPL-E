language: go_test.go
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| a tags=go,algorithm\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3uq8reyh_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptit2hw99_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    odd :=\
    \ 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n\
    \            odd++\n        }\n    }\n    if odd == 0 {\n        return sum\n\
    \    }\n    return sum + solution(lst[odd+1:])\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.solution({0xc00007e590?, 0x5e3ea0?, 0x203000?})\n\
    \t/tmp/tmp4i0rsodo_test.go:28 +0xb4\ncommand-line-arguments_test.TestSolution(0x0?)\n\
    \t/tmp/tmp4i0rsodo_test.go:42 +0x202\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis solution does\
    \ not work if the list is empty. `sum` will be `0` instead of `nil`.\n<|/ c |>\n\
    <| c |>\nI fixed the issue you mentioned\n<|/ c |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp79y1ro3k_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi39ja649_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptit2hw99_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    odds\
    \ := make([]int, len(lst))\n    for i, v := range lst {\n        if i%2 == 0 {\n\
    \            sum += v\n            odds[i] = v\n        }\n    }\n    for _, v\
    \ := range odds {\n        sum += v\n    }\n    return sum\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj8f9jhuz_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos == 0 {\n        return\
    \ sum\n    }\n    for _, v := range lst {\n        if v%2 != 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp076ruc56_test.go:55: expected '%!s(int=12)', got '%!s(int=21)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp076ruc56_test.go:55:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp076ruc56_test.go:55: expected '%!s(int=0)', got '%!s(int=388)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp076ruc56_test.go:55:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp076ruc56_test.go:55: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp076ruc56_test.go:55:\
    \ expected '%!s(int=23)', got '%!s(int=98)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp076ruc56_test.go:55: expected '%!s(int=3)', got '%!s(int=27)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxkbg0t1d_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was about how\
    \ to solve this problem in O(n) time, not how to solve it in O(n^2) time.\n<|/\
    \ c |>\n<| c |>\nThe question was about how to solve this problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to solve this problem in O(n) time, not how to solve it in O(n^2) time.\n\
    <|/ c |>\n<| c |>\nThe question was about how to solve this problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to solve this problem in O(n) time, not how to solve it in O(n^2) time.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe algorithm is pretty simple:\n\nFor each element\
    \ in the list, check if it is even. If it is, add it to the sum.\nIf it is not\
    \ even, add it to the sum.\n\nThe time complexity is O(n).\n<|/ a tags=algorithm,big-o,time-complexity,go\
    \ |>\n<| c |>\nThe question was about how to solve this problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to solve this problem in O(n) time, not how to solve it in O(n^2) time.\n\
    <|/ c |>\n<| c |>\nThe question was about how to solve this problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to solve this problem in O(n) time, not how to solve it in O(n^2) time.\n\
    <|/ c |>\n<| c |>\nThe question was about how to solve this problem in O(n) time,\
    \ not how to solve it in O(n^2) time.\n<|/ c |>\n<| a tags=algorithm,big-o,time-complexity,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6sa9555q_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI like the idea\
    \ of using map to solve this problem. Thanks!\n<|/ c |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkedv4ghd_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int = 0\n \
    \   for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    odd :=\
    \ 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n\
    \            odd++\n        }\n    }\n    return sum - sum%2*odd\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpllfriz_2_test.go:47: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpllfriz_2_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpllfriz_2_test.go:47: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpllfriz_2_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpllfriz_2_test.go:47: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpllfriz_2_test.go:47:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpllfriz_2_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6b0wzikn_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo2lq3rzw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int = 0\n \
    \   for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos == 0 {\n        return\
    \ 0\n    }\n    return sum + solution(lst[evenPos:])\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=12)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=0)', got '%!s(int=78)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=23)', got '%!s(int=126)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=3)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_1342fe_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwizh86vp_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_1342fe_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi39ja649_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            evenPos\
    \ += 1\n        }\n        if evenPos == 2 {\n            sum += v\n         \
    \   evenPos = 0\n        }\n    }\n    return sum\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscdeqe9s_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    odd :=\
    \ 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n\
    \            odd++\n        }\n    }\n    if odd == 0 {\n        return sum\n\
    \    }\n    return sum + solution(lst[odd+1:]) // recurse\n}\n</code>\n<|/ a tags=algorithm,go\
    \ |>\n<| c |>\nThis solution has a time complexity of O(n^2) which is very inefficient.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was \"how do I solve this\
    \ problem efficiently?\" I believe that this is the most efficient solution. Of\
    \ course, there are other ways to solve this problem that may be more efficient.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that this is the most efficient\
    \ solution. Of course, there are other ways to solve this problem that may be\
    \ more efficient.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that this\
    \ is the most efficient solution. Of course, there are other ways to solve this\
    \ problem that may be more efficient.\n<|/ c |>\n<| a tags=algorithm,go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjl82k_k1_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int = 0\n \
    \   for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_1342fe_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859439)\n<|/ c |>\n<| c |>\nI added\
    \ an answer that does provide an answer. Thanks for your feedback.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859439)\n<|/ c |>\n<| c |>\nI added\
    \ an answer that does provide an answer. Thanks for your feedback.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplevj6mai_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. `solution([-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, \nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp23___170_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI like the idea\
    \ of using map to store the sum of the odd elements. But I still don't understand\
    \ why my code doesn't work. Could you please elaborate on that?\n<|/ c |>\n<|\
    \ c |>\nI added a working example to my answer. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for the example. Now I understand why my code doesn't work. Your\
    \ example is very helpful.\n<|/ c |>\n<| a dscore=0 |>\nThe reason your code doesn't\
    \ work is that you are trying to access an element that doesn't exist. \n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiejmki9a_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis solution is\
    \ O(n^2) because you iterate over the list twice. Also you do not need to sort\
    \ the list first.\n<|/ c |>\n<| c |>\nI agree with you. My solution is O(n) because\
    \ I do not sort the list. My solution is O(n^2) because I iterate over the list\
    \ twice. My solution is O(nlogn) because I sort the list. My solution is O(n)\
    \ because I iterate over the list once. My solution is O(n) because I sort the\
    \ list. My solution is O(n) because I sort the list. My solution is O(n) because\
    \ I sort the list. My solution is O(n) because I sort the list. My solution is\
    \ O(n) because I sort the list. My solution is O(n) because I sort the list. My\
    \ solution is O(n) because I sort the list. My solution is O(n) because I sort\
    \ the list. My solution is O(n) because I sort the list. My solution is O(n) because\
    \ I sort the list. My solution is O(n) because I sort the list. My solution is\
    \ O(n) because I sort the list. My solution is O(n) because I sort the list. My\
    \ solution is O(n) because I sort the list. My solution is O(n) because I sort\
    \ the list. My solution is O(n) because I sort the list. My solution is O(n) because\
    \ I sort the list. My solution is O(n) because I sort the list. My solution is\
    \ O(n) because I sort the list. My solution is O(n) because I sort the list. My\
    \ solution is O(n) because I sort the list. My solution is O(n) because I sort\
    \ the list. My solution is O(n) because I sort the list. My solution is O(n) because\
    \ I sort the list. My solution is O(n) because I sort the list. My solution is\
    \ O(n) because I sort the list. My solution is O(n) because I sort the list. My\
    \ solution is O(n) because I sort the list. My solution is O(n) because I sort\
    \ the list. My solution is O(n) because I sort the list. My solution is O(n) because\
    \ I sort the list. \nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxuzr8qz5_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo2lq3rzw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5kh1_41_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            evenPos\
    \ += 1\n        }\n        if evenPos == 2 {\n            sum += v\n         \
    \   evenPos = 0\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpfj3jzg9a_test.go:50: expected '%!s(int=12)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpfj3jzg9a_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpfj3jzg9a_test.go:50: expected '%!s(int=0)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpfj3jzg9a_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpfj3jzg9a_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfj3jzg9a_test.go:50:\
    \ expected '%!s(int=23)', got '%!s(int=32)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpfj3jzg9a_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go,arrays |>\n<| a dscore=0 |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2tbcut36_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos == 0 {\n        return\
    \ sum\n    }\n    return sum + solution(lst[evenPos:])\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpyqwmhtv3_test.go:50: expected '%!s(int=12)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpyqwmhtv3_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpyqwmhtv3_test.go:50: expected '%!s(int=0)', got '%!s(int=78)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpyqwmhtv3_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpyqwmhtv3_test.go:50: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpyqwmhtv3_test.go:50:\
    \ expected '%!s(int=23)', got '%!s(int=126)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpyqwmhtv3_test.go:50: expected '%!s(int=3)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpz6he21o6_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpz6he21o6_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < len(lst) {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n        }\n        i += 2\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpsv1xuq8t_test.go:47: expected '%!s(int=12)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpsv1xuq8t_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpsv1xuq8t_test.go:47: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpsv1xuq8t_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpsv1xuq8t_test.go:47: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpsv1xuq8t_test.go:47:\
    \ expected '%!s(int=23)', got '%!s(int=30)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpsv1xuq8t_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThe question was\
    \ about golang, not python. Your answer is in python\n<|/ c |>\n<| c |>\nThe question\
    \ was about golang, not python. Your answer is in python\n<|/ c |>\n<| c |>\n\
    The question was about golang, not python. Your answer is in python\n<|/ c |>\n\
    <| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvffl_4tf_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos == 0 {\n        return\
    \ 0\n    }\n    return sum + solution(lst[evenPos:])\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=12)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=0)', got '%!s(int=78)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmprojawexl_test.go:50:\
    \ expected '%!s(int=23)', got '%!s(int=126)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmprojawexl_test.go:50: expected '%!s(int=3)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, although\
    \ I wonder if it could be made more efficient by using a map instead of a slice.\
    \ Also, why not just `sum := 0` instead of `sum := 0L`?\n<|/ c |>\n<| c |>\nI\
    \ agree that using a map would be more efficient. Also, `sum := 0L` was a typo.\
    \ Thanks for pointing it out. I've fixed it.\n<|/ c |>\n<| c |>\nI agree that\
    \ using a map would be more efficient. Also, `sum := 0L` was a typo. Thanks for\
    \ pointing it out. I've fixed it.\n<|/ c |>\n<| c |>\nI like your solution, although\
    \ I wonder if it could be made more efficient by using a map instead of a slice.\
    \ Also, why not just `sum := 0` instead of `sum := 0L`?\n<|/ c |>\n<| c |>\nI\
    \ agree that using a map would be more efficient. Also, `sum := 0L` was a typo.\
    \ Thanks for pointing it out. I've fixed it.\n<|/ c |>\n<| a tags=go,algorithm\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0d_zzmfx_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcfqr_avc_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            evenPos++\n\
    \        }\n        if evenPos == 2 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeni1rvtv_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpwdarfhcs_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpwdarfhcs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos > 0 {\n        sum\
    \ += lst[evenPos-1]\n    }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=go,algorithm |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n \
    \    { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgkfd519u_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpojhgwpig_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
