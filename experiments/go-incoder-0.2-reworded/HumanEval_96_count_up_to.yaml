name: HumanEval_96_count_up_to
language: go_test.go
prompt: "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Implement a function that takes an non-negative integer and returns a list of\
  \ the first n\n// integers that are prime numbers and less than n.\n// for example:\n\
  // >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5,\
  \ 7}\n// >>> count_up_to(0)\n// PATCH list\n// >>> count_up_to(20)\n// []int{2,\
  \ 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// PATCH list\n// >>> count_up_to(18)\n\
  // []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n"
tests: "func TestCount_Up_To(t *testing.T) {\n  candidate := count_up_to\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(5), expected: []int{2, 3} },\n     { actual:\
  \ candidate(6), expected: []int{2, 3, 5} },\n     { actual: candidate(7), expected:\
  \ []int{2, 3, 5} },\n     { actual: candidate(10), expected: []int{2, 3, 5, 7} },\n\
  \     { actual: candidate(0), expected: []int{} },\n     { actual: candidate(22),\
  \ expected: []int{2, 3, 5, 7, 11, 13, 17, 19} },\n     { actual: candidate(1), expected:\
  \ []int{} },\n     { actual: candidate(18), expected: []int{2, 3, 5, 7, 11, 13,\
  \ 17} },\n     { actual: candidate(47), expected: []int{2, 3, 5, 7, 11, 13, 17,\
  \ 19, 23, 29, 31, 37, 41, 43} },\n     { actual: candidate(101), expected: []int{2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n   \
    \     for j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n\
    \            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i <= n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n\
    \            }\n        }\n        if j > i {\n            primes[i+1] = i\n \
    \       }\n    }\n    return primes\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for\
    \ i := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if j > i {\n \
    \           prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    prime\
    \ := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    primes\
    \ := make([]int, n)\n    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  primes[i] = i\n        }\n    }\n    return primes\n}\n", "    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 21)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 41)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 47)\n    prime := append(prime, 53)\n    prime\
    \ := append(prime, 59)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 71)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 26", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 21)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 41)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 47)\n    prime := append(prime,\
    \ 53)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 71)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)", "    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n\
    \    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i%j == 0 {\n                break\n            }\n        }\n        if j\
    \ > i {\n            primes[i] = j\n        }\n    }\n    return primes\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            if j > n {\n                break\n            }\n\
    \            prime[i / 2] = true\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n        }\n\
    \        for j := 1; j < i; j++ {\n            if prime[j-1] == 0 {\n        \
    \        prime = append(prime, j)\n                break\n            }\n    \
    \    }\n    }\n    return prime\n}\n", "    if n < 0 {\n        panic(\"count_up_to:\
    \ n must be non-negative\")\n    }\n    result := make([]int, 0, n)\n    i :=\
    \ 2\n    for i <= n {\n        if isprime(i) {\n            result = append(result,\
    \ i)\n        }\n        i++\n    }\n    return result\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    result\
    \ := make([]int, 0, n)\n    i := 2\n    for i < n {\n        if n%i == 0 {\n \
    \           result = append(result, i)\n            n /= i\n        }\n      \
    \  i++\n    }\n    return result\n}\n", "    primes := make([]int, n)\n    primes[0]\
    \ = 2\n    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for j := 2; j\
    \ < i; j++ {\n            if primes[j] == i {\n                primes[j+1] = primes[j]\
    \ + 1\n                break\n            }\n        }\n    }\n    return primes[:n]\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            if j > n {\n                break\n            }\n\
    \            prime[i / 2] = true\n            break\n        }\n    }\n    return\
    \ prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n       \
    \         break\n            }\n        }\n        if i == n {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n\
    \    result := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    result := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        if isPrime(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i*j > n {\n                break\n    \
    \        }\n            if primes[i*j] == 0 {\n                primes[i*j] = i\n\
    \            }\n        }\n    }\n    return primes\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n \
    \           prime = append(prime, i)\n        }\n        for j := 0; j < prime[0]-1;\
    \ j++ {\n            if i%prime[j] == 0 {\n                break\n           \
    \ }\n        }\n        if j == prime[0]-1 {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    result := make([]int, 0,\
    \ n)\n    if n <= 0 {\n        return result\n    }\n    for i := 2; i <= n; i++\
    \ {\n        if isprime(i) {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n", "    prime := make([]int, 0, n)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime :=\
    \ append(prime, 2)\n    for i := 3; i < n; i++ {\n        for _, j := range prime\
    \ {\n            if i%j == 0 {\n                break\n            }\n       \
    \     if j > i {\n                break\n            }\n            prime = append(prime,\
    \ j)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n \
    \           prime = append(prime, i)\n        }\n        for j := 0; j < i; j++\
    \ {\n            if prime[j] == 0 {\n                prime = append(prime, j)\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            prime[j] = true\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[len(prime)-1] < i {\n            prime = append(prime, i)\n        }\n\
    \        for j := len(prime) - 1; j > 0; j-- {\n            if prime[j] == i {\n\
    \                prime = append(prime, prime[j-1])\n                break\n  \
    \          }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n;\
    \ i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n     \
    \   }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   if n < 2 {\n        return []int{}\n    }\n    result := make([]int, 0, n)\n\
    \    i := 2\n    for ; i < n; i++ {\n        if isprime(i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n \
    \           prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n\
    \            }\n        }\n        if i == n {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    result := make([]int, 0)\n\
    \    prime := make([]int, 0)\n    i := 2\n    for i <= n {\n        if i%2 ==\
    \ 0 {\n            prime = append(prime, i)\n        }\n        if i%3 == 0 {\n\
    \            prime = append(prime, i)\n        }\n        if i%5 == 0 {\n    \
    \        prime = append(prime, i)\n        }\n        if i%7 == 0 {\n        \
    \    prime = append(prime, i)\n        }\n        if i%11 == 0 {\n           \
    \ prime = append(prime, i)\n        }\n        if i%13 == 0 {\n            prime\
    \ = append(prime, i)\n        }\n        if i%17 == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        if i%19 == 0 {\n            prime = append(prime, i)\n\
    \        }\n        if i%23 == 0 {\n            prime = append(prime, i)\n   \
    \     }\n        if i%29 == 0 {\n            prime = append(prime, i)\n      \
    \  }\n        if i%31 == 0 {\n            prime = append(prime, i)\n        }\n\
    \        if i%37 == 0 {\n            prime = append(prime, i)\n        }\n   \
    \     if i%41 == 0 {\n            prime = append(prime, i)\n        }\n      \
    \  if i%43 == 0 {\n            prime = append(prime, i)\n        }\n        if\
    \ i%47 == 0 {\n            prime = append(prime, i)\n        }\n        if i%53\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        if i%59 ==\
    \ 0 {\n            prime = append(prime, i)\n        }\n        if i%61 == 0 {\n\
    \            prime = append(prime, i)\n        }\n        if i%67 == 0 {\n   \
    \         prime = append(prime, i)\n        }\n        if i%71 == 0 {\n      \
    \      prime = append(prime, i)\n        }\n        if i%73 == 0 {\n         \
    \   prime = append(prime, i)\n        }\n        if i%79 == 0 {\n            prime\
    \ = append(prime, i)\n        }\n        if i%83 == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        if i%89 == 0 {\n            prime = append(prime, i)\n\
    \        }\n        if i%97 == 0 {\n            prime = append(prime, i)\n   \
    \     }\n        if i%101 == 0 {\n            prime = append(prime, i)\n     \
    \   }\n        if i%103 == 0 {\n            prime = append(prime, i)\n       \
    \ }\n        if i%107 == 0 {\n            prime = append(prime, i)\n        }\n\
    \        if i%111 == 0 {\n            prime = ", "    prime := make([]int, 0,\
    \ n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if primes[j] == i {\n                primes[j+1]\
    \ = primes[j]\n            }\n        }\n    }\n    return primes[:n]\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    if n < 2 {\n        return []int{}\n    }\n    result := make([]int,\
    \ 0, n)\n    prime := make(map[int]bool)\n    for i := 2; i < n; i++ {\n     \
    \   if prime[i] {\n            result = append(result, i)\n        }\n       \
    \ for j := i * i; j < n; j += i {\n            prime[j] = true\n        }\n  \
    \  }\n    return result\n}\n", "    if n < 2 {\n        return []int{}\n    }\n\
    \    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i %\
    \ primes[j] == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            primes[i+1] = i\n        }\n    }\n    return primes[:n]\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime, ",
  "    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n    for i\
    \ := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            primes[i+1] = j\n        }\n    }\n    return primes\n}\n", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[len(prime)-1]\
    \ == i {\n            continue\n        }\n        for j := 2; j < i; j++ {\n\
    \            if i%j == 0 {\n                break\n            }\n        }\n\
    \        if j == i {\n            prime = append(prime, i)\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <\
    \ n; i++ {\n        if prime[i / 2] {\n            continue\n        }\n     \
    \   for j := i * i; j < n; j += i {\n            if j > n {\n                break\n\
    \            }\n            if prime[j] {\n                continue\n        \
    \    }\n            prime = append(prime, j)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for _, j := range prime {\n            if i%j\
    \ == 0 {\n                break\n            }\n            if j == i {\n    \
    \            prime = append(prime, i)\n                break\n            }\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n \
    \   primes[0] = 2\n    primes[1] = 3\n    for i := 2; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if j > i {\n            primes[i+1] = i\n    \
    \    }\n    }\n    return primes\n}\n", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 0; i < n; i++ {\n        if isprime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 59)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 281)\n   \
    \ prime := append(prime, 283)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0] = 2\n   \
    \ primes[1] = 2\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i % j == 0 {\n                break\n            }\n     \
    \   }\n        if j > i {\n            primes[i+1] = i\n        }\n    }\n   \
    \ return primes\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    primes\
    \ := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i\
    \ <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     primes[i+1] = i\n        }\n    }\n    return primes[:n]\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == n {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        if prime[len(prime)-1] != i {\n            prime =\
    \ append(prime, i)\n        }\n    }\n    return prime\n}\n", "    result := make([]int,\
    \ 0, n)\n    if n < 2 {\n        return result\n    }\n    primes := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if primes[i] != 0 {\n         \
    \   continue\n        }\n        for j := 2; j < i; j++ {\n            if i*j\
    \ == n {\n                break\n            }\n            if primes[j] == 0\
    \ {\n                primes = append(primes, j)\n            }\n        }\n  \
    \  }\n    for _, prime := range primes {\n        result = append(result, prime)\n\
    \    }\n    return result\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        if prime[len(prime)-1] < i {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 0; j < len(prime); j++ {\n            if prime[j]\
    \ == i {\n                prime = append(prime[:j], prime[j+1:]...)\n        \
    \        break\n            }\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    result :=\
    \ make([]int, 0)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n   \
    \         result = append(result, i)\n        }\n    }\n    return result\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[i - 2] == 0 {\n            prime[i\
    \ - 2] = 1\n            for j := i * i; j < n; j += i {\n                prime[j]\
    \ = 1\n            }\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[i / 2] {\n\
    \            continue\n        }\n        for j := i * i; j < n; j += i {\n  \
    \          prime[j] = true\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if i == j {\n            prime = append(prime, i)\n      \
    \  }\n    }\n    return prime\n}\n", "    result := make([]int, 0, n)\n    primes\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if primes[i%primes[0]]\
    \ == 0 {\n            primes = append(primes, i)\n        }\n    }\n    for _,\
    \ prime := range primes {\n        if n%prime == 0 {\n            result = append(result,\
    \ prime)\n            n /= prime\n        }\n    }\n    if n > 1 {\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 0; i < n;\
    \ i++ {\n        prime := append(prime, i)\n    }\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if isPrime(i) {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    if n < 0 {\n        return []int{}\n    }\n\
    \    result := make([]int, 0, n)\n    i := 2\n    for i < n {\n        if isPrime(i)\
    \ {\n            result = append(result, i)\n        }\n        i += 2\n    }\n\
    \    return result\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <\
    \ n; i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n   \
    \ for i := 2; i < n; i++ {\n        if prime[i / 2] {\n            continue\n\
    \        }\n        for j := i * i; j < n; j += i {\n            prime[j] = true\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i - 2] == 0 {\n            prime[i - 2] = 1\n            for j := i -\
    \ 3; j > 0; j-- {\n                if prime[j] == 0 {\n                    prime[j]\
    \ = 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 243)\n    prime := append(prime, 247)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[i / 2] {\n\
    \            continue\n        }\n        for j := i * i; j < n; j += i {\n  \
    \          prime[j] = true\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n       \
    \         break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[len(prime)-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i <= n; i++ {\n        for _, j := range prime {\n            if i%j == 0\
    \ {\n                break\n            }\n            if j > i {\n          \
    \      break\n            }\n            prime = append(prime, j)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   result := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isprime(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n\
    \    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            primes[i] = j\n        }\n    }\n    return primes\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3;\
    \ i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n       \
    \ if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if isPrime(i) {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    primes := make([]int, n)\n    primes[0] = 2\n\
    \    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if primes[j] == i {\n                primes[j+1] = primes[j]\n\
    \            }\n        }\n    }\n    return primes\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3;\
    \ i < n; i++ {\n        if prime[i] == 0 {\n            prime = append(prime,\
    \ i)\n            for j := i * i; j < n; j += i {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[i / 2] {\n           \
    \ continue\n        }\n        for j := i * i; j < n; j += i {\n            if\
    \ j > n {\n                break\n            }\n            if prime[j] {\n \
    \               continue\n            }\n            prime = append(prime, j)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ n {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    result := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n      \
    \  if isPrime(i) {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ n {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[i / 2] {\n            continue\n\
    \        }\n        for j := i * i; j < n; j += i {\n            if j > n {\n\
    \                break\n            }\n            if prime[j] {\n           \
    \     continue\n            }\n            prime = append(prime, j)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j ==\
    \ 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    if n < 0 {\n        return nil\n  \
    \  }\n    if n == 0 {\n        return prime\n    }\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    if\
    \ n < 5 {\n        return prime\n    }\n    if n < 7 {\n        prime := append(prime,\
    \ 2)\n        prime := append(prime, 3)\n        prime := append(prime, 5)\n \
    \       prime := append(prime, 7)\n        prime := append(prime, 11)\n      \
    \  prime := append(prime, 13)\n        prime := append(prime, 17)\n        prime\
    \ := append(prime, 19)\n        return prime\n    }\n    if n < 11 {\n       \
    \ prime := append(prime, 2)\n        prime := append(prime, 3)\n        prime\
    \ := append(prime, 5)\n        prime := append(prime, 7)\n        prime := append(prime,\
    \ 11)\n        prime := append(prime, 13)\n        prime := append(prime, 17)\n\
    \        prime := append(prime, 19)\n        return prime\n    }\n    if n < 13\
    \ {\n        prime := append(prime, 2)\n        prime := append(prime, 3)\n  \
    \      prime := append(prime, 5)\n        prime := append(prime, 7)\n        prime\
    \ := append(prime, 11)\n        prime := append(prime, 13)\n        prime := append(prime,\
    \ 17)\n        prime := append(prime, 19)\n        return prime\n    }\n    if\
    \ n < 17 {\n        prime := append(prime, 2)\n        prime := append(prime,\
    \ 3)\n        prime := append(prime, 5)\n        prime := append(prime, 7)\n \
    \       prime := append(prime, 11)\n        prime := append(prime, 13)\n     \
    \   prime := append(prime, 17)\n        prime := append(prime, 19)\n        return\
    \ prime\n    }\n    if n < 19 {\n        prime := append(prime, 2)\n        prime\
    \ := append(prime, 3)\n        prime := append(prime, 5)\n        prime := append(prime,\
    \ 7)\n        prime := append(prime, 11)\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[i / 2] {\n            continue\n\
    \        }\n        for j := i * i; j < n; j += i {\n            if j > n {\n\
    \                break\n            }\n            prime[i / 2] = (j == n)\n \
    \       }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    result := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0]\
    \ = 2\n    primes[1] = 2\n    for i := 2; i <= n; i++ {\n        for j := 2; j\
    \ < i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j > i {\n            primes[i] = i\n        }\n    }\n\
    \    return primes\n}\n", "    result := make([]int, 0, n)\n    prime := make([]int,\
    \ 0, n)\n    prime[0] = true\n    prime[1] = true\n    prime[2] = true\n    prime[3]\
    \ = true\n    prime[4] = true\n    prime[5] = true\n    prime[6] = true\n    prime[7]\
    \ = true\n    prime[8] = true\n    prime[9] = true\n    prime[10] = true\n   \
    \ prime[11] = true\n    prime[12] = true\n    prime[13] = true\n    prime[14]\
    \ = true\n    prime[15] = true\n    prime[16] = true\n    prime[17] = true\n \
    \   prime[18] = true\n    prime[19] = true\n    prime[20] = true\n    prime[21]\
    \ = true\n    prime[22] = true\n    prime[23] = true\n    prime[24] = true\n \
    \   prime[25] = true\n    prime[26] = true\n    prime[27] = true\n    prime[28]\
    \ = true\n    prime[29] = true\n    prime[30] = true\n    prime[31] = true\n \
    \   prime[32] = true\n    prime[33] = true\n    prime[34] = true\n    prime[35]\
    \ = true\n    prime[36] = true\n    prime[37] = true\n    prime[38] = true\n \
    \   prime[39] = true\n    prime[40] = true\n    prime[41] = true\n    prime[42]\
    \ = true\n    prime[43] = true\n    prime[44] = true\n    prime[45] = true\n \
    \   prime[46] = true\n    prime[47] = true\n    prime[48] = true\n    prime[49]\
    \ = true\n    prime[50] = true\n    prime[51] = true\n    prime[52] = true\n \
    \   prime[53] = true\n    prime[54] = true\n    prime[55] = true\n    prime[56]\
    \ = true\n    prime[57] = true\n    prime[58] = true\n    prime[59] = true\n \
    \   prime[60] = true\n    prime[61] = true\n    prime[62] = true\n    prime[63]\
    \ = true\n    prime[64] = true\n    prime[65] = true\n    prime[66] = true\n \
    \   prime[67] = true\n    prime[68] = true\n    prime[69] = true\n    prime[70]\
    \ = true\n    prime[71] = true\n    prime[72] = true\n    prime[73] = true\n \
    \   ", "    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n      \
    \  if isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n \
    \   return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[len(prime)-1] < i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime :=\
    \ append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i % j == 0 {\n                break\n            }\n     \
    \   }\n        if j > i {\n            prime = append(prime, i)\n        }\n \
    \   }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2;\
    \ i <= n; i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 0; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    primes := make([]int, n)\n    primes[0] = 2\n    primes[1] = 2\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if primes[j]\
    \ == i {\n                primes[j] = primes[j+1]\n            } else {\n    \
    \            break\n            }\n        }\n    }\n    return primes\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            if j > n {\n                break\n            }\n\
    \            if prime[j] {\n                continue\n            }\n        \
    \    prime = append(prime, j)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    primes := make([]int, n)\n\
    \    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if primes[j] == i {\n                primes[j+1]\
    \ = primes[j]\n            }\n        }\n    }\n    return primes\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i < n; i++ {\n        for j := 0; j < len(prime); j++ {\n\
    \            if prime[j] == i {\n                prime = append(prime, i)\n  \
    \              break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <= n;\
    \ i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n     \
    \   }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        if prime[len(prime)-1] < i {\n            prime\
    \ = append(prime, i)\n        }\n        for j := 0; j < len(prime); j++ {\n \
    \           if prime[j] == i {\n                prime = append(prime[:j], prime[j+1:]...)\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if isprime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < prime[0]-1; j++ {\n            if i%prime[j] == 0 {\n                break\n\
    \            }\n        }\n        if j == prime[0]-1 {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[i / 2] {\n            continue\n\
    \        }\n        for j := i * i; j < n; j += i {\n            if j > n {\n\
    \                break\n            }\n            if prime[j] {\n           \
    \     continue\n            }\n            prime = append(prime, j)\n        }\n\
    \    }\n    return prime\n}\n", "    primes := make([]int, n)\n    primes[0] =\
    \ 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] =\
    \ 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\n    for i\
    \ := 6; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if primes[j]\
    \ == i {\n                primes[j] = primes[j+1]\n            }\n        }\n\
    \    }\n    return primes\n}\n", "    primes := make([]int, n)\n    primes[0]\
    \ = 2\n    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if j > i {\n            primes[i] = j\n        }\n    }\n    return primes\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return\
    \ []int{}\n    }\n    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n\
    \    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i%j == 0 {\n                break\n            }\n        }\n        if i\
    \ == j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 243)\n   \
    \ prime := append(prime, 247)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 27", "    prime := make([]int, 0, n)\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n     \
    \   for j := 3; j < i; j++ {\n            if i%j == 0 {\n                break\n\
    \            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    result := make([]int, 0,\
    \ n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n           \
    \     break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    if n < 2\
    \ {\n        return []int{}\n    }\n    primes := make([]int, n+1)\n    primes[0]\
    \ = 2\n    primes[1] = 3\n    for i := 2; i <= n; i++ {\n        for j := 2; j\
    \ < i; j++ {\n            if i % j == 0 {\n                break\n           \
    \ }\n        }\n        if j > i {\n            primes[i+1] = i\n        }\n \
    \   }\n    return primes[:n]\n}\n", "    prime := make([]int, 0)\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i != j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[len(prime)-1] < i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime :=\
    \ append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i%j == 0 {\n                break\n            }\n       \
    \ }\n        if i == j {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2;\
    \ i < n; i++ {\n        if prime[i / 2] {\n            continue\n        }\n \
    \       for j := i * i; j < n; j += i {\n            if j > n {\n            \
    \    break\n            }\n            if prime[j] {\n                continue\n\
    \            }\n            prime = append(prime, j)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[len(prime)-1] < i {\n            prime = append(prime, i)\n\
    \        }\n        for j := len(prime) - 1; j > 0; j-- {\n            if prime[j]\
    \ == i {\n                prime = append(prime, prime[j-1])\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n\
    \            }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return\
    \ []int{}\n    }\n    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1]\
    \ = 3\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n     \
    \       if i % j == 0 {\n                break\n            }\n        }\n   \
    \     if j > i {\n            primes[i+1] = i\n        }\n    }\n    return primes[:n]\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if isPrime(i) {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n       \
    \ if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[i / 2] {\n            continue\n        }\n        for j :=\
    \ i * i; j < n; j += i {\n            prime[j] = true\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] == i {\n\
    \            prime = append(prime, i)\n        } else {\n            prime = append(prime,\
    \ i)\n            prime = append(prime, prime[len(prime)-1]+1)\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 21)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 41)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 47)\n    prime := append(prime,\
    \ 53)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 71)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)", "    if n < 2 {\n        return []int{}\n    }\n    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 23)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 49)\n    prime := append(prime,\
    \ 57)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 21)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 41)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 47)\n    prime := append(prime, 53)\n    prime := append(prime,\
    \ 59)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 71)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)", "    result :=\
    \ make([]int, 0, n)\n    i := 2\n    for i <= n {\n        if isprime(i) {\n \
    \           result = append(result, i)\n            i += 2\n        }\n    }\n\
    \    return result\n}\n", "    if n < 2 {\n        return []int{}\n    }\n   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    primes :=\
    \ make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i <=\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i*j > n {\n     \
    \           break\n            }\n            if primes[i*j] == 0 {\n        \
    \        primes[i*j] = i\n            }\n        }\n    }\n    return primes[:n]\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    primes := make([]int,\
    \ n+1)\n    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i <= n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i % j == 0 {\n             \
    \   break\n            }\n        }\n        if j > i {\n            primes[i+1]\
    \ = i\n        }\n    }\n    return primes[:n]\n}\n", "    result := make([]int,\
    \ 0, n)\n    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)\n        }\n    }\n    for i := 5; i <= n;\
    \ i++ {\n        if prime[i] == 0 {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    for i := 5; i <= n; i++ {\n        if prime[i] == 0 {\n \
    \           prime = append(prime, i)", "    prime := make([]int, 0, n)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n     \
    \   }\n    }\n    return prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
