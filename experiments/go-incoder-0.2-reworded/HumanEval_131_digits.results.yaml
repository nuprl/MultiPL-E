language: go_test.go
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return n%10\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpya4oytyt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := n\n    d /=\
    \ 10\n    for d > 0 {\n        d /= 10\n    }\n    return d\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpfs0bdsht_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpfs0bdsht_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpfs0bdsht_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n    \
    \    if n%2 == 0 {\n            product *= i\n        }\n        n /= 2\n    }\n\
    \    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpu1880tr1_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpu1880tr1_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpu1880tr1_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpu1880tr1_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=237600)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmpu1880tr1_test.go:50: expected '%!s(int=2625)', got '%!s(int=17867850)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo6_9xpe7_test.go:104:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d *= 2\n          \
    \  n /= 2\n        } else {\n            d += n%2\n            n /= 2\n      \
    \  }\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp38wd5l1g_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp38wd5l1g_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp38wd5l1g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp38wd5l1g_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp38wd5l1g_test.go:50: expected '%!s(int=315)', got '%!s(int=304)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp38wd5l1g_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=819)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp38wd5l1g_test.go:50: expected '%!s(int=0)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    i := 0\n    product := 1\n    for ; n > 0; n-- {\n\
    \        if n%2 == 0 {\n            product *= i\n        }\n        i++\n   \
    \ }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpode4jard_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpode4jard_test.go:51: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpode4jard_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpode4jard_test.go:51: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpode4jard_test.go:51: expected '%!s(int=315)', got '%!s(int=-8313764254916623141)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpode4jard_test.go:51:\
    \ expected '%!s(int=2625)', got '%!s(int=-8388446308071098817)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \     n /= 10\n        } else {\n            d += n%10\n        }\n    }\n   \
    \ return d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpt9vh50ja_test.go:49: expected '%!s(int=5)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpt9vh50ja_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=24)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpt9vh50ja_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpt9vh50ja_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=504)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpt9vh50ja_test.go:49: expected '%!s(int=315)', got '%!s(int=493825)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpt9vh50ja_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=16729629)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpt9vh50ja_test.go:49: expected '%!s(int=0)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n < 0 {\n        n *= -1\n    }\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    return n\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp9n4h6hol_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp9n4h6hol_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp9n4h6hol_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp9n4h6hol_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=98)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp9n4h6hol_test.go:47: expected '%!s(int=2625)', got '%!s(int=5576)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp9n4h6hol_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= (n % 10) % 2\n        n /= 10\n\
    \    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpuvqnm78w_test.go:45: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpuvqnm78w_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpuvqnm78w_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpuvqnm78w_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpuvqnm78w_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpuvqnm78w_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return n%10\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpya4oytyt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return (n/10) * digits(n/10)\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:17 +0x8b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6eb\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6ce\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6ce\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6ce\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6ce\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6ce\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpqpu2glly_test.go:19 +0x6e\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6ce\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpqpu2glly_test.go:19 +0x6e fp=0xc0201e0528 sp=0xc0201e0508 pc=0x4ef6ce\n\
    command-line-ar"
  timestamp: 1660074614
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := n\n    d /=\
    \ 10\n    for d > 0 {\n        d /= 10\n    }\n    return d\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpfs0bdsht_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpfs0bdsht_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpfs0bdsht_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpfs0bdsht_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_4fa7anv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \ }\n        n /= 10\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp0nq5a6fv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp0nq5a6fv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp0nq5a6fv_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp0nq5a6fv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp0nq5a6fv_test.go:47: expected '%!s(int=315)', got '%!s(int=14)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp0nq5a6fv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=10)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp0nq5a6fv_test.go:47: expected '%!s(int=0)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmplq_kwril_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    i := 0\n    product := 1\n    for ; n > 0; n-- {\n\
    \        if n%2 == 0 {\n            product *= 10\n            product += n%10\n\
    \        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpif80y3th_test.go:21:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= (n % 10 + 1) * 2\n        n\
    \ /= 10\n    }\n    if n == 0 {\n        return 0\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpr24u_7aa_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpr24u_7aa_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpr24u_7aa_test.go:48: expected '%!s(int=1)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpr24u_7aa_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpr24u_7aa_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpr24u_7aa_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=2580480)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpr24u_7aa_test.go:48: expected '%!s(int=0)', got '%!s(int=2520)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_4fa7anv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n\
    \    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n\
    \ % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n <\
    \ 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbnsjmxi_test.go:147:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            product *= i\n        }\n        n /= 2\n    }\n\
    \    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpp0hswq0b_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return n *\
    \ digits(n-1)\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp4d3e30m8_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=11808)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            digits += int(n%10)\n        }\n        n = n /\
    \ 10\n    }\n    return digits\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpfgp9su5l_test.go:50: expected '%!s(int=5)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpfgp9su5l_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpfgp9su5l_test.go:50: expected '%!s(int=5)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpfgp9su5l_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=14)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpfgp9su5l_test.go:50: expected '%!s(int=2625)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpfgp9su5l_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=18)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    i := 0\n    for {\n        if n%2 ==\
    \ 0 {\n            i += n\n        }\n        n /= 2\n        if n == 0 {\n  \
    \          break\n        }\n    }\n    return i\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpyk57xybn_test.go:54: expected '%!s(int=5)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpyk57xybn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=18)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpyk57xybn_test.go:54: expected '%!s(int=5)', got '%!s(int=312)'\n \
    \   --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpyk57xybn_test.go:54:\
    \ expected '%!s(int=315)', got '%!s(int=16554)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmpyk57xybn_test.go:54: expected '%!s(int=2625)', got '%!s(int=652388)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpyk57xybn_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=276)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= 2\n          \
    \  n /= 2\n        } else {\n            p += 1\n            n /= 10\n       \
    \ }\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp0jeqkz8l_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp0jeqkz8l_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp0jeqkz8l_test.go:50: expected '%!s(int=5)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp0jeqkz8l_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=22)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp0jeqkz8l_test.go:50: expected '%!s(int=2625)', got '%!s(int=16)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp0jeqkz8l_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    n /= 10\n    product := 0\n    for i := 0; i < n;\
    \ i++ {\n        product *= 2\n        product += n % 10\n        n /= 10\n  \
    \  }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp0tok87ld_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp0tok87ld_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp0tok87ld_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp0tok87ld_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=101)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp0tok87ld_test.go:50: expected '%!s(int=2625)', got '%!s(int=147)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp0tok87ld_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    if\
    \ n < 2 {\n        return 0\n    }\n    product := 0\n    for i := 0; i < n; i++\
    \ {\n        product *= 2\n        product += n%10\n        n /= 10\n    }\n \
    \   return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpfioaudec_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpfioaudec_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpfioaudec_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpfioaudec_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=101)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpfioaudec_test.go:50: expected '%!s(int=2625)', got '%!s(int=147)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpfioaudec_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074614
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= 2\n          \
    \  n /= 2\n        } else {\n            p += 1\n            n -= 1\n        }\n\
    \    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp8f2dddjs_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp8f2dddjs_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=12)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp8f2dddjs_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp8f2dddjs_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=422)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp8f2dddjs_test.go:50: expected '%!s(int=315)', got '%!s(int=11488)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp8f2dddjs_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=513860)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp8f2dddjs_test.go:50: expected '%!s(int=0)', got '%!s(int=74)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \     n /= 10\n        } else {\n            d += n%10\n            n /= 10\n\
    \        }\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpm1322xlc_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpm1322xlc_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=35)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=2625)', got '%!s(int=30)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpm1322xlc_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=18)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    return digits(n%10) * 10 + digits(n/10)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp5lhagi85_test.go:44: expected '%!s(int=315)', got '%!s(int=9)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5lhagi85_test.go:44:\
    \ expected '%!s(int=2625)', got '%!s(int=5)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp5lhagi85_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    i := 0\n    product := 1\n    for ; n > 0; n-- {\n\
    \        product *= int(n%10)\n        i ++\n    }\n    if i == 0 {\n        return\
    \ 0\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpu7skso21_test.go:52: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpu7skso21_test.go:52: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpu7skso21_test.go:52: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpu7skso21_test.go:52: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpu7skso21_test.go:52: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return n *\
    \ digits(n-1)\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp4d3e30m8_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=11808)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    i := 0\n    product := 1\n    for ; n > 0; n-- {\n\
    \        product *= n % 10\n        i++\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpmxbelk61_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpmxbelk61_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpmxbelk61_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpmxbelk61_test.go:49: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpmxbelk61_test.go:49: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    return n\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp03aexs61_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp03aexs61_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=98)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=2625)', got '%!s(int=5576)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp03aexs61_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            digits *= 2\n        }\n        n /= 10\n    }\n\
    \    return digits\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp9cucps2t_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp9cucps2t_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp9cucps2t_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp9cucps2t_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp9cucps2t_test.go:50: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    for i := 0; i < n; i++ {\n        if\
    \ n%2 == 0 {\n            return i * 2\n        }\n        n /= 2\n    }\n   \
    \ return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp3rdr6nvi_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp3rdr6nvi_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp3rdr6nvi_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp3rdr6nvi_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp3rdr6nvi_test.go:50: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp3rdr6nvi_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjcr2zywr_test.go:165:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074614
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return (n/10) * digits(n%10)\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.digits(0x0?)\n\t\
    /tmp/tmpsya8kfkm_test.go:17 +0x9b fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6fb\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160428 sp=0xc020160408 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160468 sp=0xc020160448 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160528 sp=0xc020160508 pc=0x4ef6de\n\
    command-line-arg"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    i\
    \ := 0\n    for ; n > 0; n-- {\n        if n%2 == 0 {\n            i += int(n/2)\n\
    \        }\n        n /= 10\n    }\n    return i\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvq89j4zs_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvq89j4zs_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvq89j4zs_test.go:48: expected '%!s(int=1)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvq89j4zs_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvq89j4zs_test.go:48: expected '%!s(int=315)', got '%!s(int=5435)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvq89j4zs_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=307016)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpvq89j4zs_test.go:48: expected '%!s(int=0)', got '%!s(int=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            digits *= 2\n            n /= 2\n        } else\
    \ {\n            digits += 1\n            n /= 10\n        }\n    }\n    return\
    \ digits\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp2fh02av__test.go:53: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp2fh02av__test.go:53: expected\
    \ '%!s(int=5)', got '%!s(int=12)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp2fh02av__test.go:53: expected '%!s(int=315)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp2fh02av__test.go:53:\
    \ expected '%!s(int=2625)', got '%!s(int=16)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp2fh02av__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    return digits(n) * 10 + n % 10\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpbwygc8yq_test.go:47: expected '%!s(int=5)', got '%!s(int=55)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpbwygc8yq_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpbwygc8yq_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpbwygc8yq_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpbwygc8yq_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ if n%2 == 0 {\n        return n * digits(n/10)\n    }\n    return 0\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:17 +0xa5 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef705\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6d8\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6d8\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6d8\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6d8\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6d8\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpey5lrr78_test.go:20 +0x78\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6d8\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpey5lrr78_test.go:20 +0x78 fp=0xc020160528 sp=0xc020160508 pc=0x4ef6d8\n\
    command-line-ar"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= 2\n          \
    \  n /= 2\n        } else {\n            p++\n        }\n    }\n    return p\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp5pgi8y7f_test.go:49: expected '%!s(int=5)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp5pgi8y7f_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp5pgi8y7f_test.go:49: expected '%!s(int=5)', got '%!s(int=2506)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp5pgi8y7f_test.go:49:\
    \ expected '%!s(int=315)', got '%!s(int=98765)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmp5pgi8y7f_test.go:49: expected '%!s(int=2625)', got '%!s(int=5576543)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp5pgi8y7f_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=615)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    product *= 2\n        if n%2 == 0 {\n            product += n%10\n      \
    \  }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=32)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=64)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=2625)', got '%!s(int=88)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmphz0_8o4j_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=48)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    product\
    \ := 0\n    for i := 0; i < n; i++ {\n        product *= i\n        if product\
    \ % 2 == 1 {\n            return 0\n        }\n    }\n    return product\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp1zzs6dml_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp1zzs6dml_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp1zzs6dml_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp1zzs6dml_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp1zzs6dml_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp1zzs6dml_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            product *= i\n        }\n        n /= 2\n    }\n\
    \    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpp0hswq0b_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    x\
    \ := n%10\n    if x%2 == 0 {\n        return 0\n    }\n    return x*digits(n-1)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmprw43pzqz_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmprw43pzqz_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmprw43pzqz_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmprw43pzqz_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmprw43pzqz_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmprw43pzqz_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n    \
    \    if n%2 == 0 {\n            product *= 2\n        }\n        product *= n%10\n\
    \        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp68zrwgs__test.go:51: expected '%!s(int=5)', got '%!s(int=40)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp68zrwgs__test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp68zrwgs__test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp68zrwgs__test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=60480)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp68zrwgs__test.go:51: expected '%!s(int=2625)', got '%!s(int=50400)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp68zrwgs__test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1536)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ if n%2 == 0 {\n        return n\n    }\n    return 0\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpugoirt7f_test.go:44: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpugoirt7f_test.go:44: expected\
    \ '%!s(int=5)', got '%!s(int=50)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpugoirt7f_test.go:44: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpugoirt7f_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=5010)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmpugoirt7f_test.go:44: expected '%!s(int=315)', got '%!s(int=98760)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpugoirt7f_test.go:44:\
    \ expected '%!s(int=2625)', got '%!s(int=5576540)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpugoirt7f_test.go:44: expected '%!s(int=0)', got '%!s(int=2460)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo6_9xpe7_test.go:104:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n = int(n/10)\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp7_7aqdt7_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp7_7aqdt7_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp7_7aqdt7_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp7_7aqdt7_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp7_7aqdt7_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp7_7aqdt7_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp7_7aqdt7_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    s := 0\n    for i := 0; i < n; i++ {\n        if\
    \ n%2 == 0 {\n            s += n%10\n        }\n        n = n/10\n    }\n    return\
    \ s\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpguvv9v09_test.go:50: expected '%!s(int=5)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpguvv9v09_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpguvv9v09_test.go:50: expected '%!s(int=5)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpguvv9v09_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=14)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpguvv9v09_test.go:50: expected '%!s(int=2625)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpguvv9v09_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=18)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: null
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    x\
    \ := n\n    y := 0\n    for {\n        if x%2 == 0 {\n            y *= 10\n  \
    \          y += x%10\n        }\n        x /= 10\n    }\n    if y == 0 {\n   \
    \     return 0\n    }\n    return y\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074629
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= (n % 10) + 1 // odd digit\n\
    \        n /= 10\n    }\n    if n == 0 {\n        return 0\n    }\n    return\
    \ product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp9g21t8u6_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp9g21t8u6_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp9g21t8u6_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp9g21t8u6_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp9g21t8u6_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp9g21t8u6_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=40320)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp9g21t8u6_test.go:48: expected '%!s(int=0)', got '%!s(int=315)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n    \
    \    return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n\
    \    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n\
    \    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n\
    \ /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n\
    \    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n\
    \ -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n\
    \ % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n    \
    \    return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n\
    \    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n\
    \    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n\
    \ /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n\
    \    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n\
    \ -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n\
    \ % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppp9p1t7n_test.go:153:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            digits *= 2\n        }\n        n /= 2\n    }\n\
    \    return digits\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpygdysbah_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpygdysbah_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpygdysbah_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpygdysbah_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpygdysbah_test.go:50: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n     \
    \   if n%2 == 0 {\n            product *= i\n        }\n        n /= 2\n    }\n\
    \    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpp0hswq0b_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpp0hswq0b_test.go:50: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpp0hswq0b_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \     n /= 10\n        }\n    }\n    if n > 0 {\n        d += n%10\n    }\n  \
    \  return d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmphyp5cdjb_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmphyp5cdjb_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmphyp5cdjb_test.go:50: expected '%!s(int=315)', got '%!s(int=5)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmphyp5cdjb_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=3)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmphyp5cdjb_test.go:50: expected '%!s(int=0)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \ }\n        n = n/10\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4031bqjq_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4031bqjq_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=315)', got '%!s(int=14)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4031bqjq_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=10)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp4031bqjq_test.go:47: expected '%!s(int=0)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    return digits(n%10) * 10 + digits(n/10)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp5lhagi85_test.go:44: expected '%!s(int=315)', got '%!s(int=9)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5lhagi85_test.go:44:\
    \ expected '%!s(int=2625)', got '%!s(int=5)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp5lhagi85_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    x\
    \ := 0\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            x +=\
    \ n%10\n        }\n        n /= 10\n    }\n    return x\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmptas_em3h_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmptas_em3h_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmptas_em3h_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmptas_em3h_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmptas_em3h_test.go:48: expected '%!s(int=315)', got '%!s(int=14)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmptas_em3h_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=10)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmptas_em3h_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmppmjag7bv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmppmjag7bv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmppmjag7bv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return 0\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n   \
    \     product *= int(n%10)\n        n /= 10\n    }\n    return product\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvf08qk1z_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvf08qk1z_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvf08qk1z_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvf08qk1z_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvf08qk1z_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvf08qk1z_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmplq_kwril_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    i\
    \ := 0\n    for n > 0 {\n        i += n%10\n        n /= 10\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    return i\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp52aeul9d_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp52aeul9d_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp52aeul9d_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp52aeul9d_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp52aeul9d_test.go:49: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp52aeul9d_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjcr2zywr_test.go:165:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074614
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    x\
    \ := 0\n    for i := 0; i < n; i++ {\n        x += (n % 10) * int(math.Pow(float64(i),\
    \ float64(2)))\n        n /= 10\n    }\n    return x\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4lrdnuy_test.go:21:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits := 0\n    for i := 0; i < n; i++ {\n     \
    \   digits *= 10\n        digits += n%10\n        n = n / 10\n    }\n    return\
    \ digits\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp71tifvxs_test.go:49: expected '%!s(int=5)', got '%!s(int=45)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp71tifvxs_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp71tifvxs_test.go:49: expected '%!s(int=5)', got '%!s(int=4105)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp71tifvxs_test.go:49:\
    \ expected '%!s(int=315)', got '%!s(int=56789)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmp71tifvxs_test.go:49: expected '%!s(int=2625)', got '%!s(int=345675)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp71tifvxs_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=864)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    return n * digits(n%10)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp5y0_ka2l_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp5y0_ka2l_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp5y0_ka2l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp5y0_ka2l_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp5y0_ka2l_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5y0_ka2l_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 1 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpyekxl6p3_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpyekxl6p3_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpyekxl6p3_test.go:47: expected '%!s(int=1)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpyekxl6p3_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=448)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpyekxl6p3_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpyekxl6p3_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpyekxl6p3_test.go:47: expected '%!s(int=0)', got '%!s(int=560)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    i\
    \ := 0\n    for ; n > 0; n-- {\n        if n%2 == 1 {\n            i += int(n/2)\n\
    \        }\n        n /= 10\n    }\n    return i\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp7bpmi9mz_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp7bpmi9mz_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp7bpmi9mz_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp7bpmi9mz_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=275)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp7bpmi9mz_test.go:48: expected '%!s(int=315)', got '%!s(int=48)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp7bpmi9mz_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=2787)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp7bpmi9mz_test.go:48: expected '%!s(int=0)', got '%!s(int=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n\
    \    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n\
    \ % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n <\
    \ 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbnsjmxi_test.go:147:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    if n%2 == 0 {\n            product *= 2\n        }\n        product += n%10\n\
    \        n = n/10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpbugol0ve_test.go:51: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpbugol0ve_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpbugol0ve_test.go:51: expected '%!s(int=5)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpbugol0ve_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=63)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpbugol0ve_test.go:51: expected '%!s(int=2625)', got '%!s(int=48)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpbugol0ve_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=48)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjcr2zywr_test.go:165:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074614
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n      \
    \  return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n  \
    \  }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n \
    \   n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /=\
    \ 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n \
    \   n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -=\
    \ n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0\
    \ {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n  \
    \      return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n  \
    \  }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n \
    \   n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /=\
    \ 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n \
    \   n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -=\
    \ n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0\
    \ {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n  \
    \      return 0\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi30ly8lh_test.go:146:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n    \
    \    return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n\
    \    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n\
    \    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n\
    \ /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n\
    \    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n\
    \ -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n\
    \ % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n    \
    \    return 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n\
    \    }\n    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n\
    \    n /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n\
    \ /= 10\n    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n\
    \    n -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n\
    \ -= n % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n\
    \ % 10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n % 10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppp9p1t7n_test.go:153:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \ }\n        n = n/10\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4031bqjq_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4031bqjq_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4031bqjq_test.go:47: expected '%!s(int=315)', got '%!s(int=14)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4031bqjq_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=10)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp4031bqjq_test.go:47: expected '%!s(int=0)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= 2\n\
    \            n /= 2\n        } else {\n            product *= 10\n           \
    \ n /= 10\n        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp696uxhb0_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp696uxhb0_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp696uxhb0_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp696uxhb0_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp696uxhb0_test.go:50: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp696uxhb0_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return digits(n)\
    \ * 10\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpmx4_4s4j_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpmx4_4s4j_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpmx4_4s4j_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    digits_ := make([]int, 10)\n    for i := 0; i < 10;\
    \ i++ {\n        digits_[i] = n%10\n        n = n/10\n    }\n    result := 0\n\
    \    for _, digit := range digits_ {\n        if digit % 2 == 1 {\n          \
    \  result*=10\n            result+=digit\n        }\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpx6w1nliu_test.go:55: expected '%!s(int=5)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpx6w1nliu_test.go:55: expected\
    \ '%!s(int=315)', got '%!s(int=579)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpx6w1nliu_test.go:55: expected '%!s(int=2625)', got '%!s(int=35755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074618
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return n\n    }\n    x := n%10\n    y := n%10\n    return x*10 + y\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpq_vsurgk_test.go:45: expected '%!s(int=5)', got '%!s(int=55)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpq_vsurgk_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=54)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpq_vsurgk_test.go:45: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpq_vsurgk_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=5014)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmpq_vsurgk_test.go:45: expected '%!s(int=315)', got '%!s(int=55)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpq_vsurgk_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=33)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpq_vsurgk_test.go:45: expected '%!s(int=0)', got '%!s(int=2468)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074618
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    x := n%10\n    y := n/10\n    if y >\
    \ 0 {\n        return y*digits(x)\n    }\n    return 0\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpstxwqj3v_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpstxwqj3v_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpstxwqj3v_test.go:49: expected '%!s(int=5)', got '%!s(int=50)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpstxwqj3v_test.go:49: expected\
    \ '%!s(int=315)', got '%!s(int=5922)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpstxwqj3v_test.go:49: expected '%!s(int=2625)', got '%!s(int=223060)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpstxwqj3v_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074618
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return n%10\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpya4oytyt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return n\n    }\n    product := 1\n    for i := 3; i <= n; i += 2 {\n\
    \        product *= i\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp8xexheur_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp8xexheur_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=54)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp8xexheur_test.go:47: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp8xexheur_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=5014)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmp8xexheur_test.go:47: expected '%!s(int=315)', got '%!s(int=-7454427880722989473)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp8xexheur_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=-5092695962663335327)'\n    --- FAIL:\
    \ TestDigits/test_num__6 (0.00s)\n        tmp8xexheur_test.go:47: expected '%!s(int=0)',\
    \ got '%!s(int=2468)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074618
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ if n == 0 {\n        return 0\n    }\n    return n%10*digits(n/10)\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxdw2p0eh_test.go:44: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxdw2p0eh_test.go:44: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxdw2p0eh_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxdw2p0eh_test.go:44: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxdw2p0eh_test.go:44: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxdw2p0eh_test.go:44:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    product *= 2\n        if n%2 == 0 {\n            product += n%10\n      \
    \  }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=32)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=64)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=2625)', got '%!s(int=88)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmphz0_8o4j_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=48)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmplq_kwril_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmplq_kwril_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmplq_kwril_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 1\n    i := 0\n    for ; n > 0; n-- {\n\
    \        product *= n % 10\n        i++\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpan1g8ni1_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpan1g8ni1_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpan1g8ni1_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpan1g8ni1_test.go:49: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpan1g8ni1_test.go:49: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return (n/10) * digits(n%10)\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.digits(0x0?)\n\t\
    /tmp/tmpsya8kfkm_test.go:17 +0x9b fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6fb\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160428 sp=0xc020160408 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160468 sp=0xc020160448 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6de\n\
    command-line-arguments_test.digits(0x0?)\n\t/tmp/tmpsya8kfkm_test.go:19 +0x7e\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6de\ncommand-line-arguments_test.digits(0x0?)\n\
    \t/tmp/tmpsya8kfkm_test.go:19 +0x7e fp=0xc020160528 sp=0xc020160508 pc=0x4ef6de\n\
    command-line-arg"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmppmjag7bv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmppmjag7bv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmppmjag7bv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmppmjag7bv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    return n * digits(n)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpai_3vm4s_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpai_3vm4s_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpai_3vm4s_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpai_3vm4s_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpai_3vm4s_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpai_3vm4s_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    i := 0\n    for ; i < n; i++ {\n\
    \        if n%10%2 == 0 {\n            product *= n%10\n        }\n        n /=\
    \ 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp478k_48p_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp478k_48p_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp478k_48p_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp478k_48p_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp478k_48p_test.go:51: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_4fa7anv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n ==\
    \ 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n      \
    \  return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n  \
    \  }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n \
    \   n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /=\
    \ 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n \
    \   n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -=\
    \ n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0\
    \ {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n  \
    \      return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return\
    \ 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n  \
    \  }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n \
    \   n /= 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /=\
    \ 10\n    n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n \
    \   n -= n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -=\
    \ n%10\n    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n\
    \    if n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if\
    \ n == 0 {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0\
    \ {\n        return 0\n    }\n    n /= 10\n    n -= n%10\n    if n == 0 {\n  \
    \      return 0\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi30ly8lh_test.go:146:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074616
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    product *= int(n%10)\n        n /= 10\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpccw4gvhg_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpccw4gvhg_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpccw4gvhg_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpccw4gvhg_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpccw4gvhg_test.go:51: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return n\n    }\n    n /= 2\n    for i := 0; i < n; i++ {\n        if\
    \ n%2 == 0 {\n            return n*10 + i\n        }\n        n /= 2\n    }\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpanyxhv5i_test.go:50: expected '%!s(int=5)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpanyxhv5i_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=54)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpanyxhv5i_test.go:50: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpanyxhv5i_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=5014)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmpanyxhv5i_test.go:50: expected '%!s(int=315)', got '%!s(int=493820)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpanyxhv5i_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=1742664)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpanyxhv5i_test.go:50: expected '%!s(int=0)', got '%!s(int=2468)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 1\n    for i := 0; i < n; i++ {\n    \
    \    if n%2 == 0 {\n            product *= i\n        }\n        n /= 10\n   \
    \ }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpsu06uhbz_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpsu06uhbz_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpsu06uhbz_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpsu06uhbz_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=3)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpsu06uhbz_test.go:50: expected '%!s(int=2625)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= (n % 10) + 1\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp7a5abrjl_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp7a5abrjl_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp7a5abrjl_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp7a5abrjl_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp7a5abrjl_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp7a5abrjl_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=40320)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmp7a5abrjl_test.go:48: expected '%!s(int=0)', got '%!s(int=315)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := n\n    d /=\
    \ 10\n    d /= 10\n    d /= 10\n    return d\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpkidmhl0l_test.go:44: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpkidmhl0l_test.go:44: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpkidmhl0l_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpkidmhl0l_test.go:44: expected\
    \ '%!s(int=315)', got '%!s(int=98)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpkidmhl0l_test.go:44: expected '%!s(int=2625)', got '%!s(int=5576)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpkidmhl0l_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: null
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    x\
    \ := n\n    y := 0\n    for {\n        if x % 2 == 0 {\n            y *= 10\n\
    \            y += x\n        }\n        x /= 10\n    }\n    if y == 0 {\n    \
    \    return 0\n    }\n    return y\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074632
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpnpxku8j9_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpnpxku8j9_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpnpxku8j9_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    digits := make([]int, len(strconv.Itoa(n)))\n   \
    \ for i, d := range strconv.Itoa(n) {\n        if d % 2 == 1 {\n            digits[i]\
    \ = d\n        }\n    }\n    return prod(digits)\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpou4_niu1_test.go:21:31: undefined: strconv

    /tmp/tmpou4_niu1_test.go:22:23: undefined: strconv

    /tmp/tmpou4_niu1_test.go:27:12: undefined: prod

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    i := 0\n    product := 1\n    for {\n        i++\n\
    \        if n%10 == 0 {\n            product *= i\n        }\n        n /= 10\n\
    \        if n == 0 {\n            break\n        }\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpxs4dsvf0_test.go:55: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxs4dsvf0_test.go:55: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxs4dsvf0_test.go:55: expected '%!s(int=315)', got '%!s(int=1)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxs4dsvf0_test.go:55:\
    \ expected '%!s(int=2625)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpxs4dsvf0_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: null
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    n /= 10\n    x := n\n    y := 0\n    for {\n     \
    \   if x % 2 == 0 {\n            y *= 10\n            y += x%10\n        }\n \
    \       x /= 10\n    }\n    return y\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074632
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    return digits(n%10) * 10 + digits(n%10)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpio91uv5r_test.go:44: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpio91uv5r_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpio91uv5r_test.go:44: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpio91uv5r_test.go:44: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpio91uv5r_test.go:44: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    n /= 10\n    n /= 10\n    return n\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpavuhieqv_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpavuhieqv_test.go:46: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpavuhieqv_test.go:46: expected '%!s(int=315)', got '%!s(int=98)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpavuhieqv_test.go:46:\
    \ expected '%!s(int=2625)', got '%!s(int=5576)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpavuhieqv_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n /= 10\n    sum\
    \ := 0\n    for i := 0; i < n; i++ {\n        sum += int(n%10%2)\n        n /=\
    \ 10\n    }\n    return sum\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpmkpk9ksa_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpmkpk9ksa_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpmkpk9ksa_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpmkpk9ksa_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpmkpk9ksa_test.go:46: expected '%!s(int=315)', got '%!s(int=2)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpmkpk9ksa_test.go:46:\
    \ expected '%!s(int=2625)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n % 10\n \
    \   if n == 0 {\n        return 0\n    }\n    n /= 10\n    n /= 10\n    n /= 10\n\
    \    return n\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp03aexs61_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp03aexs61_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=98)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp03aexs61_test.go:47: expected '%!s(int=2625)', got '%!s(int=5576)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp03aexs61_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= 2\n          \
    \  n /= 2\n        } else {\n            p++\n        }\n    }\n    return p\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp5pgi8y7f_test.go:49: expected '%!s(int=5)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp5pgi8y7f_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp5pgi8y7f_test.go:49: expected '%!s(int=5)', got '%!s(int=2506)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp5pgi8y7f_test.go:49:\
    \ expected '%!s(int=315)', got '%!s(int=98765)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmp5pgi8y7f_test.go:49: expected '%!s(int=2625)', got '%!s(int=5576543)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp5pgi8y7f_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=615)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    d := n%10\n    if d > 5 {\n        return 0\n   \
    \ }\n    d *= 10\n    return digits(n//10) * d + d\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyh75onck_test.go:26:20: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074618
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    product *= 2\n        if n % 2 == 1 {\n            product += 1\n       \
    \ }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpypkf0uk0_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpypkf0uk0_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpypkf0uk0_test.go:51: expected '%!s(int=315)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpypkf0uk0_test.go:51:\
    \ expected '%!s(int=2625)', got '%!s(int=43)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    for n > 0 {\n        if n%2 == 1 {\n\
    \            return n*10 + int(n/2)\n        }\n        n /= 2\n    }\n    return\
    \ 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp102lw498_test.go:50: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp102lw498_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp102lw498_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp102lw498_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp102lw498_test.go:50: expected '%!s(int=315)', got '%!s(int=259255)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp102lw498_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=29276845)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        product *= int(n%10)\n        n /= 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpa113tb76_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpa113tb76_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpa113tb76_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=12600)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpa113tb76_test.go:48: expected '%!s(int=0)', got '%!s(int=192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n\
    \    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n\
    \ % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n <\
    \ 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n    if n\
    \ < 10 {\n        return n\n    }\n    n -= n % 10\n    if n < 10 {\n        return\
    \ n\n    }\n    n -= n % 10\n    if n < 10 {\n        return n\n    }\n    n -=\
    \ n % 10\n    if n < 10 {\n        return n\n    }\n    n -= n % 10\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbnsjmxi_test.go:147:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    d := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            d += n%10\n       \
    \     n /= 10\n        } else {\n            d += n%10\n            n /= 10\n\
    \        }\n    }\n    return d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpm1322xlc_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpm1322xlc_test.go:50: expected\
    \ '%!s(int=315)', got '%!s(int=35)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpm1322xlc_test.go:50: expected '%!s(int=2625)', got '%!s(int=30)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpm1322xlc_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=18)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return n\n    }\n    n /= 2\n    for i := 0; i < n; i++ {\n        if\
    \ n%2 == 0 {\n            return n*10 + i\n        }\n        n /= 2\n    }\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpanyxhv5i_test.go:50: expected '%!s(int=5)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpanyxhv5i_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=54)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpanyxhv5i_test.go:50: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpanyxhv5i_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=5014)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmpanyxhv5i_test.go:50: expected '%!s(int=315)', got '%!s(int=493820)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpanyxhv5i_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=1742664)'\n    --- FAIL: TestDigits/test_num__6\
    \ (0.00s)\n        tmpanyxhv5i_test.go:50: expected '%!s(int=0)', got '%!s(int=2468)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return n%10\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpya4oytyt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 == 0 {\n            p *= i\n        }\n\
    \        n /= 2\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_4fa7anv_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_4fa7anv_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_4fa7anv_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    d := n\n    n /= 10\n    for n > 0 {\n        if\
    \ n%2 == 1 {\n            d *= 10\n        }\n        n /= 10\n    }\n    return\
    \ d\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpnk44e4hf_test.go:51: expected '%!s(int=5)', got '%!s(int=540)'\n \
    \   --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpnk44e4hf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=1200)'\n    --- FAIL: TestDigits/test_num__3\
    \ (0.00s)\n        tmpnk44e4hf_test.go:51: expected '%!s(int=5)', got '%!s(int=501400)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpnk44e4hf_test.go:51:\
    \ expected '%!s(int=315)', got '%!s(int=9876500)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmpnk44e4hf_test.go:51: expected '%!s(int=2625)', got '%!s(int=55765430000)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpnk44e4hf_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=2468)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 0\n    for i := 0; i < n; i++ {\n    \
    \    product *= 2\n        if n%2 == 0 {\n            product += n%10\n      \
    \  }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=5)', got '%!s(int=32)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmphz0_8o4j_test.go:51: expected\
    \ '%!s(int=315)', got '%!s(int=64)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmphz0_8o4j_test.go:51: expected '%!s(int=2625)', got '%!s(int=88)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmphz0_8o4j_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=48)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074615
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return n *\
    \ digits(n-1)\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp4d3e30m8_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp4d3e30m8_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp4d3e30m8_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=11808)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_iwq0lq6_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_iwq0lq6_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_iwq0lq6_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n\
    \    }\n    n /= 2\n    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n\
    \    if n % 2 == 0 {\n        return 0\n    }\n    n /= 2\n    if n % 2 == 0 {\n\
    \        return 0\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjcr2zywr_test.go:165:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074614
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n\
    \ /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n\
    \    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -=\
    \ n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n    n -= n%10\n    n /= 10\n\
    \    n -= n%10\n    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo6_9xpe7_test.go:104:6: expected ''('', found TestDigits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074612
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            product *= i\n\
    \        }\n        n /= 2\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpxqb9xd5h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpxqb9xd5h_test.go:47: expected '%!s(int=315)', got '%!s(int=237600)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpxqb9xd5h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=17867850)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    n /= 10\n    if n % 2 == 0 {\n        return digits(n)\
    \ * 10\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpmx4_4s4j_test.go:47: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpmx4_4s4j_test.go:47: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpmx4_4s4j_test.go:47: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpmx4_4s4j_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074617
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n%2 == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    product := 1\n    for i := 0; i < n;\
    \ i++ {\n        product *= i\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.01s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpz7ihk83q_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpz7ihk83q_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpz7ihk83q_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpz7ihk83q_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpz7ihk83q_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpz7ihk83q_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.011s\nFAIL\n"
  timestamp: 1660074619
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n -= n%10\n   \
    \ return n%10\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpya4oytyt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpya4oytyt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpya4oytyt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074613
