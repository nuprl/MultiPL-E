language: go_test.go
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] != arr[min-i] {\n            min++\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpsmrejfrc_test.go:21\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpsmrejfrc_test.go:35\
    \ +0x925\ntesting.tRunner(0xc000103520, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] < arr[i+1] {\n            min = i\n     \
    \       break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp56c_gjb9_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp56c_gjb9_test.go:51\
    \ +0x97f\ntesting.tRunner(0xc000199040, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp6wc9ew5x_test.go:26 +0x175\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp6wc9ew5x_test.go:46 +0xd5\ntesting.tRunner(0xc0001991e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] > arr[n-i] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwg2u184j_test.go:22\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwg2u184j_test.go:43\
    \ +0x7c5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    for i := 0; i < length; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        for j := i; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n\
    \                min = min(min, j-i)\n                break\n            }\n \
    \       }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa28gmjij_test.go:23:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n\
    \            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk52t0_c8_test.go:26:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    max := length - 1\n    min += smallest_change(arr[:min])\n\
    \    max += smallest_change(arr[max+1:])\n    return min + max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdww37w0w_test.go:50: expected '%!s(int=4)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdww37w0w_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdww37w0w_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdww37w0w_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdww37w0w_test.go:50: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdww37w0w_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdww37w0w_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxkwvxlp0_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxkwvxlp0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpxkwvxlp0_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpxkwvxlp0_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpxkwvxlp0_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxkwvxlp0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[len(arr)-i-1] {\n            min = i\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuhgr2eh4_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuhgr2eh4_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuhgr2eh4_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuhgr2eh4_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpuhgr2eh4_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpuhgr2eh4_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuhgr2eh4_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n - 1; i > min; i-- {\n        if arr[i] > arr[i-1] {\n           \
    \ max = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0001d2528?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp_0_iv9jc_test.go:26 +0xb3\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp_0_iv9jc_test.go:54 +0x37f\ntesting.tRunner(0xc000199040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpm0fkve_h_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpm0fkve_h_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpm0fkve_h_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpm0fkve_h_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpm0fkve_h_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpm0fkve_h_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpm0fkve_h_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr)\n    for i := 0; i < min/2; i++ {\n      \
    \  if arr[i] != arr[min-i-1] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr47xsozg_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr47xsozg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr47xsozg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr47xsozg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr47xsozg_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr47xsozg_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr47xsozg_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr47xsozg_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdde7xhmx_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdde7xhmx_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] != arr[n - i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk15wr9oo_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk15wr9oo_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk15wr9oo_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk15wr9oo_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpk15wr9oo_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpk15wr9oo_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpk15wr9oo_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpk15wr9oo_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpl6opahvy_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpl6opahvy_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min]\
    \ {\n            min = i\n        }\n    }\n\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk36bamp1_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk36bamp1_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk36bamp1_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk36bamp1_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpk36bamp1_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpk36bamp1_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpk36bamp1_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpk36bamp1_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpj_0qe8dx_test.go:26 +0x17b\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpj_0qe8dx_test.go:46 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n - 1\n    max := 0\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[i+1] {\n            min = i + 1\n            break\n        }\n\
    \    }\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n       \
    \     max = i\n            break\n        }\n    }\n    if min == max {\n    \
    \    return 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0001d25f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpo1zxt44z_test.go:26 +0x166\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpo1zxt44z_test.go:50 +0xd5\ntesting.tRunner(0xc00019b040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45e0, 0x0?, 0x2})\n\
    \t/tmp/tmp7g0eje0f_test.go:32 +0x107\ncommand-line-arguments_test.smallest_change({0xc0000c45d8,\
    \ 0x3b?, 0x3})\n\t/tmp/tmp7g0eje0f_test.go:32 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45d0,\
    \ 0x0?, 0x4})\n\t/tmp/tmp7g0eje0f_test.go:32 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45b8,\
    \ 0x5e3ea0?, 0x7})\n\t/tmp/tmp7g0eje0f_test.go:32 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp7g0eje0f_test.go:43 +0x172\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    max := len(arr) - 1\n    i := 0\n\
    \    for i < max {\n        if arr[i] > arr[i+1] {\n            min = i\n    \
    \        max = i\n        } else {\n            max = i\n        }\n        i++\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_x7qgesj_test.go:54: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_x7qgesj_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_x7qgesj_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_x7qgesj_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_x7qgesj_test.go:54: expected '%!s(int=0)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    return max -\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp2d9t0knv_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp2d9t0knv_test.go:43\
    \ +0x9d9\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppd9xvy3q_test.go:59: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppd9xvy3q_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppd9xvy3q_test.go:59: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppd9xvy3q_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppd9xvy3q_test.go:59: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppd9xvy3q_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmppd9xvy3q_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := i\n \
    \       for j := i; j < n; j++ {\n            if arr[j] < arr[max] {\n       \
    \         max = j\n            }\n        }\n        if max != i {\n         \
    \   min = max\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78r36hnk_test.go:24:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    if arr[max] == arr[min]\
    \ {\n        return min + 1\n    }\n    return smallest_change(arr[:max]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpcnnnxcsp_test.go:55: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpcnnnxcsp_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpcnnnxcsp_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpcnnnxcsp_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpcnnnxcsp_test.go:55: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpcnnnxcsp_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpcnnnxcsp_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpcnnnxcsp_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp14nif07l_test.go:98: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp14nif07l_test.go:98:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp14nif07l_test.go:98: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp14nif07l_test.go:98:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp14nif07l_test.go:98: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    max := 0\n\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[max] {\n            max = i\n        }\n    }\n\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] < arr[min] {\n            min = i\n \
    \       }\n    }\n\n    if min == max {\n        return min + 1\n    }\n\n   \
    \ return smallest_change(arr[:min]) + 1 + smallest_change(arr[min+1:])\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqf0jew37_test.go:65: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqf0jew37_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqf0jew37_test.go:65: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqf0jew37_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqf0jew37_test.go:65: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqf0jew37_test.go:65:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpqf0jew37_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpqf0jew37_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[i+1] {\n            min = i\n            max = i+1\n\
    \        }\n    }\n    if min > max {\n        return length\n    }\n    return\
    \ smallest_change(arr[:min]) + smallest_change(arr[max:])\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.smallest_change({0xc04015fdf0?,\
    \ 0x3?, 0x8?})\n\t/tmp/tmprnjeg3dv_test.go:18 +0x150 fp=0xc020160398 sp=0xc020160390\
    \ pc=0x4ef7b0\ncommand-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc0201603d0 sp=0xc020160398 pc=0x4ef70a\n\
    command-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34\
    \ +0xaa fp=0xc020160408 sp=0xc0201603d0 pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc020160440 sp=0xc020160408\
    \ pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc020160478 sp=0xc020160440 pc=0x4ef70a\n\
    command-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34\
    \ +0xaa fp=0xc0201604b0 sp=0xc020160478 pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc0201604e8 sp=0xc0201604b0\
    \ pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc020160520 sp=0xc0201604e8 pc=0x4ef70a\n\
    command-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34\
    \ +0xaa fp=0xc020160558 sp=0xc020160520 pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmprnjeg3dv_test.go:34 +0xaa fp=0xc020160590 sp=0xc020160558\
    \ pc=0x4ef70a\ncommand-line-arguments_test.smallest_change({0xc04015fdf0, 0x0?,\
    \ 0x8})\n\t/"
  timestamp: 1660075267
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return n\n\
    \    }\n    return min + smallest_change(arr[:max]) + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:9] with capacity 8 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:9] with capacity 8\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c35f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpr1prhj7h_test.go:36 +0x119\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpr1prhj7h_test.go:46 +0xd5\ntesting.tRunner(0xc000003d40, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz7jz3lel_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz7jz3lel_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpz7jz3lel_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz7jz3lel_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return 0\n\
    \    }\n    min += 1\n    max -= 1\n    min += n\n    max -= n\n    min += n\n\
    \    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min\
    \ += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n\
    \    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max\
    \ -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n\
    \    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min\
    \ += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n\
    \    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max\
    \ -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n\
    \    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min\
    \ += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n\
    \    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max\
    \ -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n\
    \    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n    min\
    \ += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max -= n\n\
    \    min += n\n    max -= n\n    min += n\n    max -= n\n    min += n\n    max\
    \ -= n\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp77j70_yk_test.go:125:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxpkuo09w_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxpkuo09w_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxpkuo09w_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxpkuo09w_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxpkuo09w_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxpkuo09w_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpxpkuo09w_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] < arr[i+1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpcwva7c7a_test.go:26 +0xb7\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpcwva7c7a_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpoe2wwmj7_test.go:32\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpoe2wwmj7_test.go:52\
    \ +0x845\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n - 1\n    max := 0\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  i := 0\n    for j := min; j < max; j++ {\n        if arr[j] != arr[j+1] {\n\
    \            i++\n            break\n        }\n    }\n    return i - min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp_gjvpt1f_test.go:26 +0xf0\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp_gjvpt1f_test.go:53 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i] != arr[min]\
    \ {\n            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpq41bczsx_test.go:52: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpq41bczsx_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpq41bczsx_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpq41bczsx_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpq41bczsx_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpq41bczsx_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpq41bczsx_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    if length\
    \ < 2 {\n        return 0\n    }\n    min := length\n    for i := 0; i < length/2;\
    \ i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i\n \
    \           break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbtrpknes_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpbtrpknes_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpbtrpknes_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpbtrpknes_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpbtrpknes_test.go:54: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpbtrpknes_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpbtrpknes_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[len(arr)-i-1] {\n            min = i\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_ptn4zyn_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp_ptn4zyn_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpx3vkto1t_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpx3vkto1t_test.go:47\
    \ +0x986\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n\
    \            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n   \
    \             break\n            }\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8eanvz7_test.go:26:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0l1b4hm7_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp0l1b4hm7_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpb3ixg7xy_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpb3ixg7xy_test.go:47\
    \ +0x754\ntesting.tRunner(0xc0001a0000, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n - 1\n    for i := n - 2; i >= 0; i-- {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i\n            break\n        }\n    }\n    if min == 0\
    \ {\n        return 0\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5ev5two9_test.go:56: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5ev5two9_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5ev5two9_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5ev5two9_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp5ev5two9_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp5ev5two9_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr)-min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0u9lhjfz_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0u9lhjfz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0u9lhjfz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0u9lhjfz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0u9lhjfz_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0u9lhjfz_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp0u9lhjfz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    \        }\n    }\n    if min == max {\n        return min\n    }\n    min +=\
    \ min\n    max -= max\n    for i := min; i <= max; i++ {\n        if arr[i] >\
    \ arr[i+1] {\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            min\
    \ += i\n            max -= i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4528?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmppr0swjw4_test.go:26 +0xdb\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmppr0swjw4_test.go:61 +0x37f\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    min += min + 1\n    max += min + 1\n    for i := min; i <= max; i++\
    \ {\n        if arr[i] != arr[max-i] {\n            return i\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmprjidj7ux_test.go:26 +0xfb\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmprjidj7ux_test.go:53 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4908b9dr_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4908b9dr_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4908b9dr_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4908b9dr_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4908b9dr_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4908b9dr_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4908b9dr_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    for i := max; i >= min; i-- {\n   \
    \     if arr[i] != arr[n-i-1] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmplb13b_i2_test.go:26 +0xb2\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmplb13b_i2_test.go:48 +0xd5\ntesting.tRunner(0xc000103380, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min =\
    \ i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5qrci90o_test.go:49: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5qrci90o_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5qrci90o_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5qrci90o_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n - 1\n    for i := n - 2; i >= 0; i-- {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_j2at13u_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_j2at13u_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp_j2at13u_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp_j2at13u_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[max] {\n            max = i\n        }\n    }\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] != arr[max] {\n            min = min\n\
    \            for j := i; j < n; j++ {\n                if arr[j] != arr[max] {\n\
    \                    min = min\n                    break\n                }\n\
    \            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpd523lkz7_test.go:27 +0x30\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpd523lkz7_test.go:52 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbu9tnjn6_test.go:49: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpbu9tnjn6_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpbu9tnjn6_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpbu9tnjn6_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpbu9tnjn6_test.go:49: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpbu9tnjn6_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpbu9tnjn6_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpbu9tnjn6_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpsv0jegox_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpsv0jegox_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpsv0jegox_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpsv0jegox_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpsv0jegox_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpsv0jegox_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpltw5fh34_test.go:51: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpltw5fh34_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpltw5fh34_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpltw5fh34_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpltw5fh34_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpltw5fh34_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[i+1] {\n            min = i\n            max = i\n        } else\
    \ {\n            max = i\n        }\n    }\n    if min > max {\n        min =\
    \ 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpqxz7opc5_test.go:25 +0x130\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpqxz7opc5_test.go:45 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    max := length - 1\n    min += smallest_change(arr[:min])\n   \
    \ max += smallest_change(arr[max+1:])\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpf5fh3akw_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpf5fh3akw_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpf5fh3akw_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpf5fh3akw_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpf5fh3akw_test.go:53: expected '%!s(int=0)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    max := length - 1\n    for i := 0; i < min;\
    \ i++ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n    }\n\
    \    for i := min; i <= max; i++ {\n        if arr[i] > arr[max] {\n         \
    \   max = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp931eyfmt_test.go:58: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp931eyfmt_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp931eyfmt_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp931eyfmt_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp931eyfmt_test.go:58: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp931eyfmt_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp931eyfmt_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    max := n\n    for i := 0;\
    \ i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjys7a0ms_test.go:132:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpt8loma6v_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpt8loma6v_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpt8loma6v_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpt8loma6v_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpt8loma6v_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpt8loma6v_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpt8loma6v_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpt8loma6v_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp3fvcnkhe_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp3fvcnkhe_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    max := len(arr) - 1\n    i := 0\n\
    \    for i < max && arr[i] == arr[len(arr)-i-1] {\n        i++\n    }\n    for\
    \ i < max && arr[i] > arr[len(arr)-i-1] {\n        i++\n    }\n    for i < min\
    \ && arr[i] == arr[len(arr)-i-1] {\n        i--\n    }\n    for i < min && arr[i]\
    \ < arr[len(arr)-i-1] {\n        i--\n    }\n    return i\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpg5zr7n69_test.go:31 +0x12a\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpg5zr7n69_test.go:44 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // base case\n    if len(arr) <= 1 {\n        return 0\n \
    \   }\n\n    // recursive case\n    min := smallest_change(arr[1:])\n    max :=\
    \ smallest_change(arr[:len(arr)-1])\n\n    // base case\n    if min == max {\n\
    \        return min\n    }\n\n    // recursive case\n    if arr[0] != arr[max]\
    \ {\n        return min + 1\n    }\n\n    // recursive case\n    if arr[0] !=\
    \ arr[min] {\n        return min + 1\n    }\n\n    // recursive case\n    if arr[0]\
    \ != arr[min] && arr[0] != arr[max] {\n        return min + 1\n    }\n\n    //\
    \ recursive case\n    if arr[0] != arr[min] && arr[0] != arr[max] && arr[0] !=\
    \ arr[min] && arr[0] != arr[max] {\n        return min + 1\n    }\n\n    // recursive\
    \ case\n    if arr[0] != arr[min] && arr[0] != arr[max] && arr[0] != arr[min]\
    \ && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] {\n      \
    \  return min + 1\n    }\n\n    // recursive case\n    if arr[0] != arr[min] &&\
    \ arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] && arr[0] !=\
    \ arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] {\n\
    \        return min + 1\n    }\n\n    // recursive case\n    if arr[0] != arr[min]\
    \ && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] && arr[0]\
    \ != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max]\
    \ && arr[0] != arr[min] && arr[0] != arr[max] {\n        return min + 1\n    }\n\
    \n    // recursive case\n    if arr[0] != arr[min] && arr[0] != arr[max] && arr[0]\
    \ != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max]\
    \ && arr[0] != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0]\
    \ != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] {\n        return min\
    \ + 1\n    }\n\n    // recursive case\n    if arr[0] != arr[min] && arr[0] !=\
    \ arr[max] && arr[0] != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] &&\
    \ arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] && arr[0] !=\
    \ arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] {\n\
    \        return min + 1\n    }\n\n    // recursive case\n    if arr[0] != arr[min]\
    \ && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max] && arr[0]\
    \ != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0] != arr[max]\
    \ && arr[0] != arr[min] && arr[0] != arr[max] && arr[0] != arr[min] && arr[0]\
    \ != arr[max] {\n        return min + 1\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprsjipvco_test.go:81:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ / 2\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min-i] {\n   \
    \         min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpj8vmam1t_test.go:51: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpj8vmam1t_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpj8vmam1t_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min == max {\n        return 0\n\
    \    }\n    max += min\n    min -= max\n    if min < 0 {\n        min = 0\n  \
    \  }\n    if max > n {\n        max = n\n    }\n    i := 0\n    for i < max {\n\
    \        if arr[i] != arr[max-i] {\n            i++\n            continue\n  \
    \      }\n        if arr[i] != arr[n-i+1] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i-1] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n            i++\n            continue\n\
    \        }\n        if arr[i] != arr[n-i] {\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplqljiauo_test.go:144:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpqvjindox_test.go:26 +0xb5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpqvjindox_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    max := len(arr) - 1\n    i := 0\n    j := 0\n\n    for i <\
    \ max && j < min {\n        if arr[i] > arr[j] {\n            i++\n        } else\
    \ {\n            j++\n        }\n    }\n\n    if i == min {\n        return j\
    \ - i\n    }\n\n    return j - i + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqoxo4rdg_test.go:63: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqoxo4rdg_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqoxo4rdg_test.go:63: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqoxo4rdg_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqoxo4rdg_test.go:63: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqoxo4rdg_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqoxo4rdg_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 1; i < n; i++ {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n        if arr[i] < arr[min] {\n\
    \            min = i\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp6198z0iq_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp6198z0iq_test.go:46\
    \ +0xa19\ntesting.tRunner(0xc0001964e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[n-i-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp3dq87dax_test.go:26 +0x170\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp3dq87dax_test.go:50 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpf07cisaq_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpf07cisaq_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ 0\n    max := length\n    min += max\n    max -= min\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n       \
    \     break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmptfkqx5_7_test.go:54: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmptfkqx5_7_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmptfkqx5_7_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmptfkqx5_7_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmptfkqx5_7_test.go:54: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmptfkqx5_7_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmptfkqx5_7_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmptfkqx5_7_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx5p2u2vw_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 1; i < n; i++ {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n        if arr[i] < arr[min] {\n\
    \            min = i\n        }\n    }\n    if min == max {\n        return n\n\
    \    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpg823eem9_test.go:26 +0x170\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpg823eem9_test.go:46 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] != arr[max] {\n            arr[i] = arr[max]\n            arr[max] =\
    \ arr[i]\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpwgt8xyzr_test.go:26 +0xa9\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpwgt8xyzr_test.go:49 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpudyl3y18_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpudyl3y18_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    max := len(arr)\
    \ - 1\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[i+1] {\n      \
    \      min = i\n            break\n        }\n    }\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] < arr[i+1] {\n            max = i\n            break\n\
    \        }\n    }\n    if min == max {\n        return 0\n    }\n    if min >\
    \ max {\n        min, max = max, min\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:])\n}\n</code>\n<|/ a tags=algorithm,arrays,go |>\n\
    <| a tags=algorithm,arrays,go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"sort\"\n)\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpakpu2ack_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075271
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    max := arr[len(arr)-1]\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuipgfbgu_test.go:57: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuipgfbgu_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuipgfbgu_test.go:57: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuipgfbgu_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpuipgfbgu_test.go:57: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpuipgfbgu_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075271
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr)\n    for i := 0; i < min/2; i++ {\n      \
    \  if arr[i] > arr[min-i-1] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpob0_l1ce_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpob0_l1ce_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpob0_l1ce_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpob0_l1ce_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpob0_l1ce_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpob0_l1ce_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpob0_l1ce_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpob0_l1ce_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := arr[0]\n\
    \    max := arr[len(arr)-1]\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n        if arr[i] > max {\n  \
    \          max = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp63hn4113_test.go:55: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp63hn4113_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp63hn4113_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp63hn4113_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp63hn4113_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp63hn4113_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\n\
    \    max := len(arr)\n    min += min / 2\n    max -= max / 2\n    min += min /\
    \ 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min += min\
    \ / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min +=\
    \ min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min\
    \ += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n   \
    \ min += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n\
    \    min += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max /\
    \ 2\n    min += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max\
    \ / 2\n    min += min / 2\n    max -= max / 2\n    min += min / 2\n    max -=\
    \ max / 2\n    min += min / 2\n    max -= max / 2\n    min += min / 2\n    max\
    \ -= max / 2\n    min += min / 2\n    max -= max / 2\n    min += min / 2\n   \
    \ max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min += min / 2\n\
    \    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min += min /\
    \ 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min += min\
    \ / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min +=\
    \ min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n    min\
    \ += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n   \
    \ min += min / 2\n    max -= max / 2\n    min += min / 2\n    max -= max / 2\n\
    \    min += min / 2\n    max -= max / 2\n    \nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ahxigiw_test.go:95:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min == max {\n        return 0\n\
    \    }\n    if min > max {\n        min, max = max, min\n    }\n    min += 1\n\
    \    max -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] < min {\n            min =\
    \ arr[i]\n        }\n    }\n    if min == max {\n        return 0\n    }\n   \
    \ if min > max {\n        min, max = max, min\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    if min == max {\n        return 0\n    }\n    if min > max\
    \ {\n        min, max = max, min\n    }\n    min += 1\n    max -= 1\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    if min == max {\n        return 0\n    }\n    if min > max {\n      \
    \  min, max = max, min\n    }\n    min += 1\n    max -= 1\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min == max {\n        return 0\n    }\n    if min > max {\n        min, max\
    \ = max, min\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    if min == max {\n \
    \       return 0\n    }\n    if min > max {\n        min, max = max, min\n   \
    \ }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    if min == max {\n        return\
    \ 0\n    }\n    if min > max {\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptpu87qlt_test.go:134:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpofsn2j7y_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpofsn2j7y_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpofsn2j7y_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpofsn2j7y_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpofsn2j7y_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpofsn2j7y_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpofsn2j7y_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpofsn2j7y_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075271
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz7jz3lel_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz7jz3lel_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpz7jz3lel_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz7jz3lel_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    min += min / 2\n    max -= max / 2\n    if min > max {\n        return\
    \ min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp23kqd28__test.go:64: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp23kqd28__test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp23kqd28__test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp23kqd28__test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp23kqd28__test.go:64: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp23kqd28__test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075271
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[max] {\n            max = i\n        }\n        if arr[i]\
    \ < arr[min] {\n            min = i\n        }\n    }\n    if min == max {\n \
    \       return 0\n    }\n    min += 1\n    max -= 1\n    i := 0\n    for i < min\
    \ {\n        arr[i] = arr[min]\n        i++\n    }\n    for i < max {\n      \
    \  arr[i] = arr[max]\n        i++\n    }\n    return i\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpy453an78_test.go:27 +0x30\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpy453an78_test.go:58 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpl6opahvy_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpl6opahvy_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpl6opahvy_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6sjbks5o_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6sjbks5o_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ / 2\n    max := len(arr) - 1\n    for i := 0; i < min; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n        }\n    }\n    for i := min; i <=\
    \ max; i++ {\n        if arr[i] > arr[i-1] {\n            max = i\n        }\n\
    \    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpkunngy53_test.go:30\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpkunngy53_test.go:49\
    \ +0xa0c\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmplz4ffq8__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmplz4ffq8__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    max := len(arr) - 1\n\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > max {\n            max = i\n        }\n        if arr[i]\
    \ < min {\n            min = i\n        }\n    }\n\n    return max - min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpavr4ygok_test.go:58: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpavr4ygok_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpavr4ygok_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpavr4ygok_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpavr4ygok_test.go:58: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpavr4ygok_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ / 2\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min-i] {\n   \
    \         min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_24l7ag9_test.go:51: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp_24l7ag9_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp_24l7ag9_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = min + 1\n\
    \    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqf8cz2rw_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqf8cz2rw_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqf8cz2rw_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqf8cz2rw_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqf8cz2rw_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqf8cz2rw_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqf8cz2rw_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    max := arr[n-1]\n    for i := 1; i < n; i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] <\
    \ min {\n            min = arr[i]\n        }\n    }\n    return n - min + max\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfiset5o7_test.go:56: expected '%!s(int=4)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfiset5o7_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfiset5o7_test.go:56: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfiset5o7_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpfiset5o7_test.go:56: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpfiset5o7_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfiset5o7_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n\
    \    for _, v := range arr[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return len(arr) - 1 - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_bgtr7d6_test.go:51: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_bgtr7d6_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp_bgtr7d6_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp_bgtr7d6_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp_bgtr7d6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp_bgtr7d6_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    for i := 0; i < length; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqjag3ko0_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqjag3ko0_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpvng7qwf2_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpvng7qwf2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpvng7qwf2_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpvng7qwf2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpvng7qwf2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpvng7qwf2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpvng7qwf2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphj9cl4eo_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphj9cl4eo_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min =\
    \ i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpp_uszzqw_test.go:49: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpp_uszzqw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpp_uszzqw_test.go:49: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpp_uszzqw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpp_uszzqw_test.go:49: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpp_uszzqw_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpp_uszzqw_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpp_uszzqw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = min\n            break\n        }\n    }\n    return max - min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp83gy_wgr_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp83gy_wgr_test.go:47\
    \ +0x9b9\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\n\
    \    max := len(arr)\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[max-1]\
    \ {\n            max = i\n        }\n    }\n    for i := 0; i < min; i++ {\n \
    \       if arr[i] < arr[min-1] {\n            min = i\n        }\n    }\n    return\
    \ max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpadwq57nl_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpadwq57nl_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpadwq57nl_test.go:57: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpadwq57nl_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpadwq57nl_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := 0; i < n; i++ {\n\
    \        for j := n - 1; j >= i; j-- {\n            if arr[j] != arr[j+1] {\n\
    \                min = i\n                break\n            }\n        }\n  \
    \  }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp2oile_zv_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp2oile_zv_test.go:39\
    \ +0x9f7\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = min + 1\n\
    \    }\n    max := length - 1\n    if length%2 == 0 {\n        max = max - 1\n\
    \    }\n    for i := 0; i < min; i++ {\n        arr[i] = arr[max]\n        arr[max]\
    \ = arr[i]\n    }\n    min += smallest_change(arr[:min])\n    max -= smallest_change(arr[max+1:])\n\
    \    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?,\
    \ 0x2?, 0x8?})\n\t/tmp/tmpitmiqjbd_test.go:18 +0x154 fp=0xc0201e0370 sp=0xc0201e0368\
    \ pc=0x4ef7b4\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e03b0 sp=0xc0201e0370 pc=0x4ef707\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35\
    \ +0xa7 fp=0xc0201e03f0 sp=0xc0201e03b0 pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e0430 sp=0xc0201e03f0\
    \ pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e0470 sp=0xc0201e0430 pc=0x4ef707\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35\
    \ +0xa7 fp=0xc0201e04b0 sp=0xc0201e0470 pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e04f0 sp=0xc0201e04b0\
    \ pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e0530 sp=0xc0201e04f0 pc=0x4ef707\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35\
    \ +0xa7 fp=0xc0201e0570 sp=0xc0201e0530 pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpitmiqjbd_test.go:35 +0xa7 fp=0xc0201e05b0 sp=0xc0201e0570\
    \ pc=0x4ef707\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxo0krzov_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxo0krzov_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpuvsu1a4i_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpuvsu1a4i_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075271
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpqq5ulcz2_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpqq5ulcz2_test.go:47\
    \ +0x986\ntesting.tRunner(0xc000198ea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    max := length\n    for i := 0; i < max; i++\
    \ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n           \
    \ break\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr_i75r_r_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpr_i75r_r_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpr_i75r_r_test.go:54: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpr_i75r_r_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpm1j02j80_test.go:32\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpm1j02j80_test.go:52\
    \ +0x845\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n\n    // The\
    \ first element is the smallest\n    smallest := arr[0]\n    smallest += smallest_change(arr[1:])\n\
    \n    // The second element is the largest\n    largest := arr[0]\n    largest\
    \ -= largest\n    largest *= largest\n\n    // The third element is the middle\
    \ element\n    middle := arr[0]\n    for i := 1; i < len(arr); i++ {\n       \
    \ middle += arr[i]\n        middle -= arr[i]\n        middle *= middle\n    }\n\
    \n    // The fourth element is the middle element\n    middle += arr[len(arr)-1]\n\
    \    middle -= arr[len(arr)-1]\n    middle *= middle\n\n    // The fifth element\
    \ is the middle element\n    middle += arr[len(arr)-2]\n    middle -= arr[len(arr)-2]\n\
    \    middle *= middle\n\n    // The sixth element is the middle element\n    middle\
    \ += arr[len(arr)-3]\n    middle -= arr[len(arr)-3]\n    middle *= middle\n\n\
    \    // The seventh element is the middle element\n    middle += arr[len(arr)-4]\n\
    \    middle -= arr[len(arr)-4]\n    middle *= middle\n\n    // The eighth element\
    \ is the middle element\n    middle += arr[len(arr)-5]\n    middle -= arr[len(arr)-5]\n\
    \    middle *= middle\n\n    // The ninth element is the middle element\n    middle\
    \ += arr[len(arr)-6]\n    middle -= arr[len(arr)-6]\n    middle *= middle\n\n\
    \    // The tenth element is the middle element\n    middle += arr[len(arr)-7]\n\
    \    middle -= arr[len(arr)-7]\n    middle *= middle\n\n    // The eleventh element\
    \ is the middle element\n    middle += arr[len(arr)-8]\n    middle -= arr[len(arr)-8]\n\
    \    middle *= middle\n\n    // The twelfth element is the middle element\n  \
    \  middle += arr[len(arr)-9]\n    middle -= arr[len(arr)-9]\n    middle *= middle\n\
    \n    // The thirteenth element is the middle element\n    middle += arr[len(arr)-10]\n\
    \    middle -= arr[len(arr)-10]\n    middle *= middle\n\n    // The fourteenth\
    \ element is the middle element\n    middle += arr[len(arr)-11]\n    middle -=\
    \ arr[len(arr)-11]\n    middle *= middle\n\n    // The fifteenth element is the\
    \ middle element\n    middle += arr[len(arr)-12]\n    middle -= arr[len(arr)-12]\n\
    \    middle *= middle\n\n    // The sixteenth element is the middle element\n\
    \    middle += arr[len(arr)-13]\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjr28177k_test.go:103:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp3fvcnkhe_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp3fvcnkhe_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzs18zjah_test.go:48: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzs18zjah_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpzs18zjah_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpzs18zjah_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpzs18zjah_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpzs18zjah_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpzs18zjah_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpzs18zjah_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    return min + smallest_change(arr[min+1:max])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmps5rerdot_test.go:26 +0x130\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmps5rerdot_test.go:46 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    max := len(arr)\
    \ - 1\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[i+1] {\n      \
    \      min = i\n            break\n        }\n    }\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] < arr[i+1] {\n            max = i\n            break\n\
    \        }\n    }\n    if min == max {\n        return 0\n    }\n    if min >\
    \ max {\n        min, max = max, min\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x0?, 0x44e628?})\n\
    \t/tmp/tmphz4eerv__test.go:40 +0x147\ncommand-line-arguments_test.smallest_change({0xc0000d3df0,\
    \ 0x8, 0x8})\n\t/tmp/tmphz4eerv__test.go:40 +0xbe\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmphz4eerv__test.go:50 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i-1\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpcjzs1j5a_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpcjzs1j5a_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpcjzs1j5a_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpcjzs1j5a_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpcjzs1j5a_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpcjzs1j5a_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpcjzs1j5a_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // base case\n    if len(arr) == 0 {\n        return 0\n \
    \   }\n\n    // recursive case\n    smallest := len(arr) - 1\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] != arr[smallest] {\n            smallest\
    \ = i\n        }\n    }\n\n    return smallest + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqolj3fa6_test.go:55: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqolj3fa6_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqolj3fa6_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqolj3fa6_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqolj3fa6_test.go:55: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqolj3fa6_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpqolj3fa6_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpqolj3fa6_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 1; i < n; i++ {\n        if arr[i] >\
    \ arr[i-1] {\n            min = i\n        } else {\n            max = i\n   \
    \     }\n    }\n    if min == max {\n        return min + 1\n    }\n    min +=\
    \ 2\n    max -= 2\n    count := 0\n    for i := min; i <= max; i++ {\n       \
    \ if arr[i] != arr[n-1-i] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5owhrhw8_test.go:66: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5owhrhw8_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5owhrhw8_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5owhrhw8_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp5owhrhw8_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n - i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqadp9u3m_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqadp9u3m_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqadp9u3m_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqadp9u3m_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqadp9u3m_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqadp9u3m_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpqadp9u3m_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpdbi9rhkv_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpdbi9rhkv_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here.\n    length := len(arr)\n    min\
    \ := length\n    for i := 0; i < length; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9v4um72j_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9v4um72j_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9v4um72j_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9v4um72j_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp9v4um72j_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp9v4um72j_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp9v4um72j_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp9v4um72j_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] > arr[i+1] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwkcwt8_6_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwkcwt8_6_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpwkcwt8_6_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpwkcwt8_6_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps9fzs1bb_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps9fzs1bb_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075273
- exit_code: null
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    max := len(arr) - 1\n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    m := 0\n\n    for i < max && j < min {\n        if arr[i] > arr[j]\
    \ {\n            k = j\n            j = i\n            i = k\n        }\n\n  \
    \      if arr[i] < arr[j] {\n            l = j\n            m = i\n          \
    \  i = l\n            j = m\n        }\n    }\n\n    if arr[i] == arr[j] {\n \
    \       return i - j\n    }\n\n    return smallest_change(arr[i:]) + smallest_change(arr[j:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075287
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Base case\n    if len(arr) == 0 {\n        return 0\n \
    \   }\n\n    // Find the middle element\n    middle := len(arr) / 2\n\n    //\
    \ Find the minimum number of elements needed to make the list palindromic\n  \
    \  min := smallest_change(arr[:middle])\n\n    // If the middle element is the\
    \ same as its reverse, return min\n    if arr[middle] == arr[middle] {\n     \
    \   return min\n    }\n\n    // If the middle element is not the same as the reverse,\
    \ return min\n    if arr[middle] > arr[middle] {\n        return min\n    }\n\n\
    \    // If the middle element is not the same as the reverse, return min\n   \
    \ if arr[middle] < arr[middle] {\n        return min\n    }\n\n    // If the middle\
    \ element is the same as the reverse, return min + 1\n    return min + 1\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxkncdcdf_test.go:69: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxkncdcdf_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxkncdcdf_test.go:69: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxkncdcdf_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpxkncdcdf_test.go:69: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        for j := i; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n \
    \               min = i\n                break\n            }\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpynpl8ibh_test.go:51: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpynpl8ibh_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpynpl8ibh_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpynpl8ibh_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpfx13zbpo_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpfx13zbpo_test.go:38\
    \ +0x7f3\ntesting.tRunner(0xc0001124e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz5wd18sc_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpz5wd18sc_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpn99zwmln_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpn99zwmln_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 1; i < n; i++ {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n        if arr[i] < arr[min] {\n\
    \            min = i\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp_yxvbgd7_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp_yxvbgd7_test.go:46\
    \ +0x9ec\ntesting.tRunner(0xc000103520, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2h6v6_8__test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min++\n    }\n\
    \    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1] {\n    \
    \        min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp_9juwpkr_test.go:28\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp_9juwpkr_test.go:42\
    \ +0x8e5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min++\n    }\n\
    \    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1] {\n    \
    \        return i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnbrejh83_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnbrejh83_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnbrejh83_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnbrejh83_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnbrejh83_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnbrejh83_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnbrejh83_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp0_cdwony_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0_cdwony_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp564hwini_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp564hwini_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n\
    \            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n   \
    \         }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6_3785m_test.go:26:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpondwppm9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpondwppm9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min == max {\n        return 0\n\
    \    }\n    max -= min\n    for i := 0; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n        if arr[i] < min {\n        \
    \    min = arr[i]\n        }\n    }\n    if min == max {\n        return 0\n \
    \   }\n    min += max\n    return min - max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpa13lh8py_test.go:72: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpa13lh8py_test.go:72:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpa13lh8py_test.go:72: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpa13lh8py_test.go:72:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // base case\n    if len(arr) == 0 {\n        return 0\n \
    \   }\n\n    // base case\n    if len(arr) == 1 {\n        return len(arr)\n \
    \   }\n\n    // base case\n    if arr[0] != arr[len(arr)-1] {\n        return\
    \ len(arr)\n    }\n\n    // base case\n    if arr[0] == arr[len(arr)-1] {\n  \
    \      return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] == arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(arr)-1]\
    \ {\n        return len(arr)\n    }\n\n    // base case\n    if arr[0] != arr[len(\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppoijpete_test.go:156:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] < arr[i+1] {\n            min = i\n     \
    \       break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmps7x2ctxg_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmps7x2ctxg_test.go:52\
    \ +0x8c5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            max = i\n        } else {\n\
    \            max = i\n        }\n    }\n    return min + smallest_change(arr[:max])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk06l3tx4_test.go:56: expected '%!s(int=4)', got '%!s(int=28)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk06l3tx4_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=20)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk06l3tx4_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk06l3tx4_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpk06l3tx4_test.go:56: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpk06l3tx4_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    max := len(arr) - 1\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = i\n   \
    \     }\n        if arr[i] < min {\n            min = i\n        }\n    }\n  \
    \  return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpljhguob4_test.go:52: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpljhguob4_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpljhguob4_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpljhguob4_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpljhguob4_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpljhguob4_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n       \
    \     min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpfdejkxf6_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpfdejkxf6_test.go:38\
    \ +0x893\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    // The first element must be the smallest\n    smallest := arr[0]\n\
    \    smallest += smallest_change(arr[1:])\n\n    // The second element must be\
    \ the smallest\n    smallest += smallest_change(arr[:length-1])\n\n    return\
    \ smallest\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpydom_8ej_test.go:54: expected '%!s(int=4)', got '%!s(int=1080)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpydom_8ej_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=373)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpydom_8ej_test.go:54: expected '%!s(int=1)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpydom_8ej_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=46)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpydom_8ej_test.go:54: expected '%!s(int=0)', got '%!s(int=66)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpydom_8ej_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=25)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpydom_8ej_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    if arr[min] > arr[max] {\n        return\
    \ smallest_change(arr[:min]) + min\n    }\n    return smallest_change(arr[min:])\
    \ + min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpw_lkaera_test.go:26 +0x154\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpw_lkaera_test.go:49 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8rppym36_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8rppym36_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min + 1\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp33mai_m2_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp33mai_m2_test.go:45\
    \ +0x7c5\ntesting.tRunner(0xc00011a4e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[i+1] {\n            min = i\n            max = i\n        } else\
    \ {\n            max = i\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return smallest_change(arr[:min]) + smallest_change(arr[max+1:])\
    \ - 2\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp_8wa4t7e_test.go:25 +0x127\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp_8wa4t7e_test.go:45 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp44emthep_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44emthep_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075266
