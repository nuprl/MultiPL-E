name: HumanEval_10_make_palindrome
language: go_test.go
prompt: "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString\
  \ string) string {\n"
tests: "func TestMake_Palindrome(t *testing.T) {\n  candidate := make_palindrome\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     {\
  \ actual: candidate(\"x\"), expected: \"x\" },\n     { actual: candidate(\"xyz\"\
  ), expected: \"xyzyx\" },\n     { actual: candidate(\"xyx\"), expected: \"xyx\"\
  \ },\n     { actual: candidate(\"jerry\"), expected: \"jerryrrej\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen -= len(myString)\n    longestPalindrome += myString[0\
    \ : longestPalindromeLen]\n    return longestPalindrome\n}\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        longestPalindromeLen := len(longestPalindrome)\n\
    \        longestPalindrome = longestPalindrome + suffix\n        if longestPalindromeLen\
    \ > len(prefix) {\n            longestPalindrome = longestPalindrome + prefix\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    var myPalindrome string\
    \ = \"\"\n    var myPalindromeLen int = 0\n    var myPalindromeLen int = len(myString)\n\
    \    var myPalindromePrefix string = \"\"\n    var myPalindromeSuffix string =\
    \ \"\"\n    var myPalindromeSuffixLen int = 0\n    var myPalindromeSuffixLen int\
    \ = len(myPalindromeSuffix)\n\n    for myPalindromeSuffixLen = myPalindromeLen\
    \ - 1; myPalindromeSuffixLen >= 0; myPalindromeSuffixLen-- {\n        myPalindromeSuffix\
    \ = myString[myPalindromeSuffixLen]\n        myPalindromePrefix = myString[0:myPalindromeSuffixLen]\n\
    \        myPalindrome = myPalindromePrefix + myPalindromeSuffix + myPalindrome\n\
    \        myPalindromeLen = len(myPalindrome)\n    }\n\n    return myPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLength = 0\n    \
    \    for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j]\
    \ {\n                longestPalindromeLength++\n            }\n        }\n   \
    \     if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = myString\n            longestPalindromeLength = longestPalindromeLength\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Initialize result\
    \ with empty string\n    var result string = \"\"\n\n    // Initialize a variable\
    \ to hold longest postfix of supplied string\n    var longestPostfix string =\
    \ \"\"\n\n    // Initialize a variable to hold a character from the supplied string\n\
    \    var currentChar string = \"\"\n\n    // Initialize a variable to hold a character\
    \ from the longest postfix of supplied string\n    var longestChar = \"\"\n\n\
    \    // Initialize a variable to hold a character from the longest postfix of\
    \ supplied string\n    var longestCharPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffix string = \"\"\n\n    // Initialize a variable to hold\
    \ a character from the longest postfix of supplied string\n    var longestCharSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffix string = \"\"\n\n\
    \    // Initialize a variable to hold a character from the longest postfix of\
    \ supplied string\n    var longestCharSuffixSuffixPrefix string = \"\"\n\n   \
    \ // Initialize a variable to hold a character from the longest postfix of supplied\
    \ string\n    var longestCharSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixSuffixPrefix string = \"\"\n\n   \
    \ // Initialize a variable to hold a character from the longest postfix of supplied\
    \ string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffix string = \"\"\
    \n\n    // Initialize a variable to hold a character from the longest postfix\
    \ of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of ", "    // Find the longest postfix of supplied string that is a\
    \ palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find longest postfix of myString\
    \ that is a palindrome\n    longestPalindrome := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    longestPalindromeLen\
    \ := len(longestPalindrome)\n\n    // Append reverse of string prefix that comes\
    \ before the palindromic suffix\n    prefix := myString[:longestPalindromeLen]\n\
    \    reversedPrefix := make([]rune, len(prefix))\n    for i := 0; i < len(prefix);\
    \ i++ {\n        reversedPrefix[i] = prefix[len(prefix)-1-i]\n    }\n    reversedSuffix\
    \ := make([]rune, longestPalindromeLen)\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        reversedSuffix[i] = longestPalindrome[len(longestPalindrome)-1-i]\n\
    \    }\n\n    // Append the reversed prefix and suffix\n    return prefix + reversedPrefix\
    \ + reversedSuffix\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        postfix := myString[i:]\n        postfix += strings.Reverse(prefix)\n\
    \        longestPalindromeLen := len(postfix)\n        if longestPalindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = postfix\n        }\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    postfix := myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+1]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+2]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+3]\n        postfix += \"-\"\n        postfix += myString[:i+4]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+5]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+6]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+7]\n        postfix += \"-\"\n        postfix += myString[:i+8]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+9]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+10]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+11]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+12]\n        postfix += \"-\"\n        postfix += myString[:i+13]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+14]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+15]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+16]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+17]\n        postfix += \"-\"\n        postfix += myString[:i+18]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+19]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+20]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+21]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+22]\n        postfix += \"-\"\n        postfix += myString[:i+23]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+24]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+25]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+26]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+27]\n        postfix += \"-\"\n        post", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := reverseString(prefix)\n        if postfix != suffix {\n            longestPalindrome\
    \ = prefix + postfix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\
    \ + reverseString(myString[:longestPalindromeLen])\n    }\n    return myString\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLength := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[:i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ my", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringPalindrome\
    \ string\n    var myStringPalindromeLen int\n\n    // Find longest postfix of\
    \ myString that is a palindrome\n    for i := 0; i < myStringLen; i++ {\n    \
    \    myStringPrefix = myString[0:i]\n        myStringSuffix = myString[i:]\n \
    \       myStringPalindrome = myStringPrefix + reverse(myStringSuffix) + myStringSuffix\n\
    \        myStringPalindromeLen = len(myStringPalindrome)\n        if myStringPalindromeLen\
    \ > myStringLen {\n            myStringLen = myStringPalindromeLen\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    myStringPalindrome = myString[0:myStringLen]\
    \ + reverse(myString[myStringLen:]) + myString[myStringLen:]\n\n    return myStringPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // If\
    \ no such postfix exists, return myString unchanged.\n    longestPalindrome :=\
    \ \"\"\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    longestPalindromeLen := len(longestPalindrome)\n   \
    \ longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen /=\
    \ 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    ", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longestPalindrome\
    \ string = \"\"\n    var longestPalindromeLen int = 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLen += 1 // Increment the length of the longest\
    \ palindrome so far.\n        longestPalindrome += myString[i]\n        if myString[len(myString)-i-1]\
    \ == myString[len(myString)-i] {\n            longestPalindromeLen += 1 // Increment\
    \ the length of the longest palindrome so far.\n        }\n    }\n    \n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // Algorithm idea is simple:\n    // - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longestPalindromeReverse string = \"\"\n    var longestPalindromeReverseLen\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeReverseLen\
    \ += 1 // Increment the length of the longest palindrome reverse.\n        longestPalindromeReverse\
    \ += myString[len(myString)-i-1]\n        if myString[len(myString)-i-1] == myString[len(myString)-i]\
    \ {\n            longestPalindromeReverseLen += 1 // Increment the length of the\
    \ longest palindrome reverse.\n        }\n    }\n    \n    // Return the concatenation\
    \ of both strings.\n    return longest", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is found by reversing a prefix\
    \ of myString that comes before a palindromic suffix.\n    // The prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the longest\
    \ prefix of myString that is a palindrome.\n    // The longest prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the longest\
    \ prefix of myString that is a palindrome.\n    // The longest prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the ", "   \
    \ // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     longestPalindromeLen += len(myString) - i\n        longestPalindrome +=\
    \ myString[:i+1]\n        longestPalindrome += myString[len(myString) - i:]\n\
    \    }\n    longestPalindrome += myString[:longestPalindromeLen]\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        postfix\
    \ := myString[i:]\n        prefix := myString[:i]\n        reversedPostfix :=\
    \ append([]rune(postfix)[:len(postfix)-1], []rune(postfix)[len(postfix)-1:]...)\n\
    \        if longestPalindromeLen > len(reversedPostfix) {\n            longestPalindromeLen\
    \ = len(reversedPostfix)\n            longestPalindrome = prefix\n        }\n\
    \        if longestPalindromeLen > len(postfix) {\n            longestPalindromeLen\
    \ = len(postfix)\n            longestPalindrome = postfix\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLength++\n\
    \        longestPalindrome += myString[i]\n    }\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[len(myString)-1-i]\n    }\n   \
    \ return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        longestPalindromeLen := len(longestPalindrome)\n\
    \        longestPalindrome = longestPalindrome + suffix\n        if longestPalindromeLen\
    \ > len(prefix) {\n            longestPalindrome = longestPalindrome + prefix[len(prefix):]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // If string is empty,\
    \ return empty string\n    if len(myString) == 0 {\n        return \"\"\n    }\n\
    \n    // Find longest postfix of string that is a palindrome\n    longestPalindrome\
    \ := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n        // If character\
    \ is not a palindrome, skip it\n        if myString[i] != myString[len(myString)-i-1]\
    \ {\n            continue\n        }\n\n        // If palindrome is longer than\
    \ the longest palindrome, update longest palindrome\n        if len(longestPalindrome)\
    \ > len(myString) {\n            longestPalindrome = myString\n        }\n   \
    \ }\n\n    // Append reverse of longest postfix to end of string\n    return myString\
    \ + strings.Reverse(longestPalindrome)\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := make_palindrome_test(suffix)\n        if postfix != \"\" {\n            longestPalindrome\
    \ = prefix + postfix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\n\
    \    }\n    return \"\"\n}\n", "    // Find longest postfix of myString that is\
    \ a palindrome.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest postfix.\n\
    \    // The longest postfix is found by reversing all characters in myString that\
    \ come before the longest postfix.\n    // The longest postfix is found by reversing\
    \ all characters in myString that come before the longest postfix.\n    // The\
    \ longest postfix is found by reversing all characters in myString that come before\
    \ the longest postfix.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest postfix.\n\
    \    // The longest postfix is found by reversing all characters in myString that\
    \ come before the longest postfix.\n    // The longest postfix is found by reversing\
    \ all characters in myString that come before the longest postfix.\n    // The\
    \ longest postfix is found by reversing all characters in myString that come before\
    \ the longest postfix.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest postfix.\n\
    \    // The longest postfix is found by reversing all characters in myString that\
    \ come before the longest postfix.\n    // The longest postfix is found by reversing\
    \ all characters in myString that come before the longest ", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n    \n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome += myString[len(myString)-len(longestPalindrome):]\n\
    \    \n    // Return the palindrome string.\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString);\
    \ i >= 0; i-- {\n        prefix := myString[:i]\n        suffix := myString[i:]\n\
    \        postfix := reverse(prefix)\n        if postfix != suffix {\n        \
    \    longestPalindrome = append(longestPalindrome, postfix)\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    if longestPalindromeLen > 0\
    \ {\n        return append(myString[:longestPalindromeLen], longestPalindrome...)\n\
    \    }\n    return \"\"\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        postfix := append(prefix, suffix)\n \
    \       postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix = append(postfix,\
    \ prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])\n        postfix =\
    \ append(postfix, prefix[:len(prefix)-1])\n        postfix = append(postfix, suffix[:len(suffix)-1])\n\
    \        postfix = append(postfix, suffix[len(suffix)-1:])", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n      \
    \  postfix := make_palindrome_test(prefix, suffix)\n        if postfix != \"\"\
    \ {\n            longestPalindrome = append(longestPalindrome, postfix)\n    \
    \        longestPalindromeLen = len(postfix)\n        }\n    }\n    if longestPalindromeLen\
    \ > 0 {\n        return append(myString[:longestPalindromeLen], longestPalindrome...)\n\
    \    }\n    return \"\"\n}\n", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = longestPalindrome\
    \ + postfix\n            longestPalindromeLen = len(longestPalindrome)\n     \
    \   }\n    }\n\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    prefix := myString[:longestPalindromeLen]\n\
    \    return prefix + longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     longestPalindromeLen := 0\n        longestPalindrome += myString[i]\n  \
    \      for j := 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString\n        }\n    }\n    return longestPalindrome\n}\n", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // If string is empty or contains\
    \ only letters, return empty string\n    if len(myString) == 0 || myString[0]\
    \ == 'a' || myString[0] == 'A' {\n        return \"\"\n    }\n\n    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-1]\n\
    \        postfix += myString[len(myString)-len(postfix)-1:len(myString)]\n   \
    \     postfix += myString[:len(myString)-len(postfix)-2]\n        postfix += myString[len(myString)-len(postfix)-2:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-3]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-3:len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-4]\n\
    \        postfix += myString[len(myString)-len(postfix)-4:len(myString)]\n   \
    \     postfix += myString[:len(myString)-len(postfix)-5]\n        postfix += myString[len(myString)-len(postfix)-5:len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)-6]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-6:len(myString)]\n        postfix += myString[:len(myString)-len(postfix)-7]\n\
    \        postfix += ", "    var myStringLen int = len(myString)\n    var myStringPrefix\
    \ string\n    var myStringSuffix string\n    var myStringReverseSuffix string\n\
    \    var myStringReversePrefix string\n    var myStringReversedSuffix string\n\
    \    var myStringReversedPrefix string\n    var myStringReversedReversedSuffix\
    \ string\n    var myStringReversedReversedPrefix string\n    var myStringReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myString", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        prefix := myString[:i]\n        postfix, prefix := reverseString(postfix),\
    \ reverseString(prefix)\n        if postfix != prefix {\n            longestPalindrome\
    \ = myString[:longestPalindromeLen]\n            longestPalindromeLen += len(postfix)\n\
    \            break\n        }\n    }\n    return longestPalindrome\n}\n", "  \
    \  longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen += len(myString) - i\n\
    \        longestPalindrome += myString[len(myString)-i:] + myString[:len(myString)-i]\n\
    \    }\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ -= i\n        longestPalindrome += myString[len(myString)-i:] + myString[:len(myString)-i]\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    longestPalindromeLen := 0\n        for j := 0; j < i; j++ {\n           \
    \ if myString[j] != myString[j+i] {\n                longestPalindromeLen++\n\
    \            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString[:i]\n            longestPalindromeLen\
    \ = i\n        }\n    }\n    return longestPalindrome + myString[len(longestPalindrome):]\n\
    }\n", "    var myStringLen int = len(myString)\n    var myStringPrefix string\
    \ = \"\"\n    var myStringSuffix string = \"\"\n    var myStringPalindrome string\
    \ = \"\"\n    var myStringPalindromeLen int = 0\n    var myStringPalindromePrefix\
    \ string = \"\"\n    var myStringPalindromeSuffix string = \"\"\n    var myStringPalindromePalindrome\
    \ string = \"\"\n    var myStringPalindromePalindromeLen int = 0\n    var myStringPalindromePalindromePrefix\
    \ string = \"\"\n    var myStringPalindromePalindromeSuffix string = \"\"\n  \
    \  var myStringPalindromePalindromePalindrome string = \"\"\n    var myStringPalindromePalindromePalindromeLen\
    \ int = 0\n    var myStringPalindromePalindromePalindromePrefix string = \"\"\n\
    \    var myStringPalindromePalindromePalindromeSuffix string = \"\"\n    var myStringPalindromePalindromePalindromePalindrome\
    \ string = \"\"\n    var myStringPalindromePalindromePalindromePalindromeLen int\
    \ = 0\n    var myStringPalindromePalindromePalindromePalindromePrefix string =\
    \ \"\"\n    var myStringPalindromePalindromePalindromePalindromeSuffix string\
    \ = \"\"\n    var myStringPalindromePalindromePalindromePalindromePalindrome string\
    \ = \"\"\n    var myStringPalindromePalindromePalindromePalindromePalindromeLen\
    \ int = 0\n    var myStringPalindromePalindromePalindromePalindromePalindromePrefix\
    \ string = \"\"\n    var myStringPalindromePalindromePalindromePalindromePalindromeSuffix\
    \ string = \"\"\n    var myStringPalindromePalindromePalindromePalindromePalindromePalindrome\
    \ string = \"\"\n    var myStringPalindromePalindromePalindromePalindromePalindromePalindromeLen\
    \ int = 0\n    var myStringPalindromePalindromePalindromePalindromePalindromePalindromePrefix\
    \ string = \"\"\n    var myStringPalindromePalin", "    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        longestPalindromeLen := 0\n        for j := 0; j < i; j++ {\n       \
    \     if myString[j] != myString[j+i] {\n                longestPalindromeLen\
    \ += 1\n            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome += myString[i]\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    longestPalindromeReverse := \"\
    \"\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeReverse\
    \ += myString[len(myString)-i-1]\n    }\n    \n    // Return the palindrome that\
    \ begins with the supplied string.\n    return longestPalindrome + longestPalindromeReverse\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n        postfix\
    \ := myString[i:]\n        postfix += make_palindrome(postfix)\n        if postfix\
    \ != prefix {\n            longestPalindrome = prefix\n            longestPalindromeLength\
    \ = i\n        }\n    }\n    return longestPalindrome + myString[longestPalindromeLength:]\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n        for\
    \ j := 0; j < i; j++ {\n            if myString[j] != myString[len(myString)-j-1]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[:i+longestPalindromeLen]\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += 1 // add one\
    \ to length for every letter\n        longestPalindrome += myString[i]\n    }\n\
    \    longestPalindromeLen -= 1 // remove one from length for every letter\n  \
    \  for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome += myString[len(myString)-i]\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    longestPalindromeLen += len(myString) - i\n        longestPalindrome += myString[:i+1]\n\
    \        longestPalindrome += myString[len(myString)-i:len(myString)]\n    }\n\
    \    longestPalindrome += myString[len(myString)-longestPalindromeLen:]\n    return\
    \ longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        for j := 0; j < i; j++ {\n            if myString[j] != myString[j+i]\
    \ {\n                longestPalindromeLen += 1\n            }\n        }\n   \
    \     if longestPalindromeLen > longestPalindromeLen {\n            longestPalindrome\
    \ = myString[:i+longestPalindromeLen]\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n      \
    \  suffix := myString[i+1:]\n        if isPalindrome(prefix, suffix) {\n     \
    \       longestPalindrome = prefix + suffix\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen += len(myString) - i\n\
    \        longestPalindrome += myString[:i]\n        longestPalindrome += myString[len(myString)-i:len(myString)]\n\
    \    }\n    longestPalindrome += myString[len(myString)-longestPalindromeLen:]\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString); i >= 0; i-- {\n        prefix := myString[:i]\n\
    \        suffix := myString[i+1:]\n        postfix := reverseString(prefix)\n\
    \        if postfix != suffix {\n            longestPalindrome = prefix + postfix\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    if longestPalindromeLen > 0 {\n        return longestPalindrome + reverseString(myString[:longestPalindromeLen])\n\
    \    }\n    return \"\"\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix += \"-\"\n        postfix += myString[:i]\n        postfix +=\
    \ \"-\"\n        postfix += myString[:i+1]\n        postfix += \"-\"\n       \
    \ postfix += myString[:i+2]\n        postfix += \"-\"\n        postfix += myString[:i+3]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+4]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+5]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+6]\n        postfix += \"-\"\n        postfix += myString[:i+7]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+8]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+9]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+10]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+11]\n        postfix += \"-\"\n        postfix += myString[:i+12]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+13]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+14]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+15]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+16]\n        postfix += \"-\"\n        postfix += myString[:i+17]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+18]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+19]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+20]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+21]\n        postfix += \"-\"\n        postfix += myString[:i+22]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+23]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+24]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+25]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+26]\n        postfix += \"-\"\n        postfix += myString[:i+27]\n\
    \        postfix += \"-\"\n        post", "    longestPalindrome := \"\"\n   \
    \ longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n      \
    \  longestPalindromeLen := longestPalindromeLen + 1\n        longestPalindrome\
    \ += myString[i]\n    }\n    longestPalindromeLen -= 1 // remove last char\n \
    \   for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome +=\
    \ myString[len(myString)-i]\n    }\n    return longestPalindrome\n}\n", "    //\
    \ Find longest postfix of myString that is a palindrome.\n    // The longest postfix\
    \ is found by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a ", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix, ",
  "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromeLength\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLength; i++ {\n     \
    \   longestPalindrome += myString[i]\n    }\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        if myString[i] != myString[len(myString)-(i+1)] {\n         \
    \   longestPalindrome += myString[len(myString)-(i+1)]\n        }\n    }\n   \
    \ return longestPalindrome\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find longest postfix of myString that is a palindrome.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a ", "    var myStringLen\
    \ int = len(myString)\n    var myStringPrefix string = \"\"\n    var myStringSuffix\
    \ string = \"\"\n    var myStringReversedSuffix string = \"\"\n    var myStringReversedPrefix\
    \ string = \"\"\n    var myStringReversedSuffix string = \"\"\n\n    for i :=\
    \ 0; i < myStringLen; i++ {\n        myStringPrefix = myStringPrefix + myString[i]\n\
    \        myStringSuffix = myStringSuffix + myString[i]\n        myStringReversedSuffix\
    \ = myStringReversedSuffix + myString[i]\n        myStringReversedPrefix = myStringReversedPrefix\
    \ + myString[i]\n    }\n\n    if myStringLen > 0 {\n        myStringReversedPrefix\
    \ = myStringReversedPrefix + myString[myStringLen-1]\n    }\n\n    if myStringLen\
    \ > 1 {\n        myStringReversedSuffix = myStringReversedSuffix + myString[myStringLen-2]\n\
    \    }\n\n    if myStringLen > 2 {\n        myStringReversedSuffix = myStringReversedSuffix\
    \ + myString[myStringLen-3]\n    }\n\n    if myStringLen > 3 {\n        myStringReversedSuffix\
    \ = myStringReversedSuffix + myString[myStringLen-4]\n    }\n\n    if myStringLen\
    \ > 4 {\n        myStringReversedSuffix = myStringReversedSuffix + myString[myStringLen-5]\n\
    \    }\n\n    if myStringLen > 5 {\n        myStringReversedSuffix = myStringReversedSuffix\
    \ + myString[myStringLen-6]\n    }\n\n    if myStringLen > 6 {\n        myStringReversedSuffix\
    \ = myStringReversedSuffix + myString[myStringLen-7]\n    }\n\n    if myStringLen\
    \ > 7 {\n        myStringReversedSuffix = myStringReversedSuffix + myString[myStringLen-8]\n\
    \    }\n\n    if myStringLen > 8 {\n        myStringReversedSuffix = myStringReversedSuffix\
    \ + myString[myStringLen-9]\n    }\n\n    if myStringLen > 9 {\n        myStringReversedSuffix\
    \ = myStringReversedSuffix + myString[myStringLen-10]\n    }\n\n    if myStringLen\
    \ > 10 {\n        myStringReversedSuffix = myStringReversedSuffix + myString[myStringLen-11]\n\
    \    }\n\n    if myStringLen > 11 {\n        myStringReversedSuffix = myStringReversedSuffix\
    \ + myString[myStringLen-12]\n    }\n\n    if myStringLen > 12 {\n        myStringReversedSuffix\
    \ = myStringReversedSuffix + myString", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        postfix := myString[:i+1]\n        postfix += string(myString[len(myString)-i-1:])\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    return longestPalindrome + string(myString[:longestPalindromeLen])\n}\n",
  "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromeLength\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLength; i++ {\n     \
    \   longestPalindrome += myString[i]\n    }\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome += myString[longestPalindromeLength - i - 1]\n\
    \    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    longestPalindrome := \"\"\n    for\
    \ i := len(myString) - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n\
    \    }\n    longestPalindrome += myString[len(myString)-1:]\n\n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := \"\"\n    for i := len(longestPalindrome) - 1; i >= 0;\
    \ i-- {\n        prefix += longestPalindrome[i]\n    }\n    prefix += longestPalindrome[len(longestPalindrome)-1:]\n\
    \n    return prefix\n}\n", "    // Find longest postfix of myString that is a\
    \ palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n\
    \    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[len(myString)-i:len(myString)])\n        if\
    \ postfix != reverse(postfix) {\n            continue\n        }\n        if longestPalindromeLen\
    \ < len(postfix) {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    return longestPalindrome\n}\n", "    var\
    \ myStringLen int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix\
    \ string\n    var myStringReverseSuffix string\n    var myStringReversePrefix\
    \ string\n    var myStringReverseReverseSuffix string\n    var myStringReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverseReversePrefix\
    \ string\n    var myStringReverseReverseReverseSuffix string\n    var myStringReverseReverse",
  "    var myStringLen int = len(myString)\n    var myStringPrefix string\n    var\
    \ myStringSuffix string\n    var myStringReverse string\n    var myStringPalindrome\
    \ string\n\n    for i := 0; i < myStringLen; i++ {\n        myStringPrefix = myString[:i]\n\
    \        myStringSuffix = myString[i:]\n        myStringReverse = reverse(myStringPrefix)\n\
    \        myStringPalindrome = myStringPrefix + myStringReverse\n        if myStringPalindrome\
    \ == myString {\n            return myStringPalindrome\n        }\n    }\n   \
    \ return \"\"\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        for j := 0; j < i; j++ {\n            if myString[j] != myString[j+i]\
    \ {\n                longestPalindromeLen = i\n                break\n       \
    \     }\n        }\n        if longestPalindromeLen > longestPalindromeLen {\n\
    \            longestPalindrome = myString[:longestPalindromeLen]\n        }\n\
    \    }\n    return longestPalindrome + make_palindrome(myString[len(longestPalindrome):])\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := len(myString) - 1; i >= 0; i-- {\n        prefix := myString[:i]\n      \
    \  postfix := myString[i:]\n        postfix += strings.Reverse(prefix)\n     \
    \   longestPalindrome = longestPalindrome[:0]\n        longestPalindromeLen =\
    \ 0\n        for j := len(postfix) - 1; j >= 0; j-- {\n            longestPalindrome\
    \ = longestPalindrome + postfix[j]\n            longestPalindromeLen++\n     \
    \       if longestPalindromeLen > longestPalindromeLen {\n                longestPalindrome\
    \ = longestPalindrome[:0]\n                longestPalindromeLen = 0\n        \
    \    }\n        }\n        if longestPalindromeLen > longestPalindromeLen {\n\
    \            longestPalindrome = longestPalindrome[:0]\n            longestPalindromeLen\
    \ = 0\n        }\n    }\n    return longestPalindrome\n}\n", "    // Find longest\
    \ postfix of myString that is a palindrome.\n    // The longest postfix is found\
    \ by reversing myString and finding the first character that does not match it.\n\
    \    // The longest postfix is found by reversing myString and finding the first\
    \ character that does not match it.\n    // >>> make_palindrome(\"cat\")\n   \
    \ // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        char := myString[i]\n        if char != myString[len(myString)-(i+1)]\
    \ {\n            longestPalindrome = myString[:len(myString)-(i+1)] + longestPalindrome\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    // Append the reverse of the longest postfix to the end of the string.\n\
    \    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    return longestPalindrome + myString[len(myString)-longestPalindromeLen:]\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    longestPalindromeLength\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLength; i++ {\n     \
    \   longestPalindrome = longestPalindrome + myString[len(myString)-i-1]\n    }\n\
    \    for i := 0; i < len(myString); i++ {\n        if myString[i] != longestPalindrome[len(longestPalindrome)-i-1]\
    \ {\n            longestPalindrome = longestPalindrome + myString[len(myString)-i-1]\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeLen := 0\n        for j := 0; j < i; j++ {\n   \
    \         if myString[j] != myString[len(myString)-1-j] {\n                longestPalindromeLen\
    \ += 1\n            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        postfix := myString[:i+1]\n        if isPalindrome(postfix) {\n     \
    \       longestPalindrome = postfix\n            break\n        }\n    }\n\n \
    \   // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    prefix := myString[:len(longestPalindrome)]\n \
    \   return prefix + longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLength := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        prefix := myString[:i]\n        suffix := myString[i+1:]\n        postfix\
    \ := reverse(prefix)\n        if suffix == postfix {\n            longestPalindrome\
    \ = append(longestPalindrome, prefix)\n            longestPalindromeLength = i\
    \ + 1\n        }\n    }\n    if longestPalindromeLength < len(myString) {\n  \
    \      return \"\"\n    }\n    return longestPalindrome\n}\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    longestPalindromePrefix := \"\"\n    longestPalindromeSuffix := \"\
    \"\n    longestPalindromePostfix := \"\"\n    longestPalindromePostfixLength :=\
    \ 0\n    longestPalindromePostfixPrefix := \"\"\n    longestPalindromePostfixSuffix\
    \ := \"\"\n    longestPalindromePostfixPostfix := \"\"\n    longestPalindromePostfixPostfixLength\
    \ := 0\n    longestPalindromePostfixPostfixPrefix := \"\"\n    longestPalindromePostfixPostfixSuffix\
    \ := \"\"\n    longestPalindromePostfixPostfixPostfix := \"\"\n\n    for i :=\
    \ 0; i < len(myString); i++ {\n        char := myString[i]\n        longestPalindromeLength\
    \ += 1\n        longestPalindromePrefix = longestPalindromePrefix + char\n   \
    \     longestPalindromeSuffix = longestPalindromeSuffix + char\n        longestPalindromePostfix\
    \ = longestPalindromePostfix + char\n        longestPalindromePostfixLength +=\
    \ 1\n        longestPalindromePostfixPrefix = longestPalindromePostfixPrefix +\
    \ char\n        longestPalindromePostfixSuffix = longestPalindromePostfixSuffix\
    \ + char\n        longestPalindromePostfixPostfix = longestPalindromePostfixPostfix\
    \ + char\n        longestPalindromePostfixPostfixLength += 1\n        longestPalindromePostfixPostfixPrefix\
    \ = longestPalindromePostfixPostfixPrefix + char\n        longestPalindromePostfixPostfixSuffix\
    \ = longestPalindromePostfixPostfixSuffix + char\n        longestPalindromePostfixPostfixPostfix\
    \ = longestPalindromePostfixPostfixPostfix + char\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromePostfixLength {\n        longestPalindrome = longestPalindromePostfix\n\
    \    } else {\n        longestPalindrome = longestPalindromePrefix\n    }\n\n\
    \    for i := 0; i < longestPalindromeLength; i++ {\n        char := myString[longestPalindromeLength\
    \ - i - 1]\n        longestPalindrome = longestPalindrome + char\n    }\n\n",
  "    // Find longest postfix of myString that is a palindrome.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverse(suffix)\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    // Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // The longest postfix is defined as the longest prefix of\
    \ myString that is a palindrome.\n    // The longest prefix is defined as the\
    \ longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is defined as the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is defined as the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix of myString that is a palindrome is defined as the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix of myString that\
    \ is a palindrome is defined as the longest prefix of myString that is a palindrome.\n\
    \    // The longest prefix of myString that is a palindrome is defined as the\
    \ longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is defined as the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is defined as the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix of myString that is a palindrome is defined as the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix of myString that\
    \ is a palindrome is defined as the longest prefix of myString that is a palindrome.\n\
    \    // The longest prefix of myString that is a palindrome is defined as the\
    \ longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ of myString that is a palindrome is defined as the longest prefix of myString\
    \ that is a palindrome.\n    // The longest prefix of myString that is a palindrome\
    \ is defined as the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix of myString that is a palindrome is defined as the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix of myString that\
    \ is a palindrome is defined as the longest prefix of myString that is a palindrome.\n\
    \    // The longest prefix of myString that is a palindrome is defined as the\
    \ longest prefix of myString that is a palindrome.\n    // The lon", "    // Find\
    \ longest postfix of myString that is a palindrome\n    longestPalindrome := \"\
    \"\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome += myString[i]\n\
    \    }\n    longestPalindrome = longestPalindrome[:len(longestPalindrome)-1]\n\
    \    longestPalindrome = longestPalindrome + make_palindrome(longestPalindrome)\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        prefix := myString[:i]\n        postfix += reverseString(prefix)\n  \
    \      if postfix != prefix {\n            longestPalindrome = postfix\n     \
    \       longestPalindromeLen = len(postfix)\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // If string is empty, return empty string\n    if len(myString) ==\
    \ 0 {\n        return \"\"\n    }\n\n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // The longest postfix is defined as the longest\
    \ postfix of myString that is a palindrome.\n    // The longest postfix of myString\
    \ that is a palindrome is defined as the longest postfix of myString that is a\
    \ palindrome + the reverse of myString that comes before it.\n    // For example,\
    \ the longest postfix of \"cata\" is \"tac\", and the reverse of \"tac\" is \"\
    atc\".\n    // The longest postfix of \"cat\" is \"tac\", and the reverse of \"\
    tac\" is \"atc\".\n    // The longest postfix of \"cat\" is \"tac\", and the reverse\
    \ of \"tac\" is \"atc\".\n    // The longest postfix of \"cat\" is \"tac\", and\
    \ the reverse of \"tac\" is \"atc\".\n    // The longest postfix of \"cat\" is\
    \ \"tac\", and the reverse of \"tac\" is \"atc\".\n    // The longest postfix\
    \ of \"cat\" is \"tac\", and the reverse of \"tac\" is \"atc\".\n    // The longest\
    \ postfix of \"cat\" is \"tac\", and the reverse of \"tac\" is \"atc\".\n    //\
    \ The longest postfix of \"cat\" is \"tac\", and the reverse of \"tac\" is \"\
    atc\".\n    // The longest postfix of \"cat\" is \"tac\", and the reverse of \"\
    tac\" is \"atc\".\n    // The longest postfix of \"cat\" is \"tac\", and the reverse\
    \ of \"tac\" is \"atc\".\n    // The longest postfix of \"cat\" is \"tac\", and\
    \ the reverse of \"tac\" is \"atc\".\n    // The longest postfix of \"cat\" is\
    \ \"tac\", and the reverse of \"tac\" is \"atc\".\n    // The longest postfix\
    \ of \"cat\" is \"tac\", and the reverse of \"tac\" is \"atc\".\n    // The longest\
    \ postfix of \"cat\" is \"tac\", and the reverse of \"tac\" is \"atc\".\n    //\
    \ The longest postfix of \"cat\" is \"tac\", and the reverse of \"tac\" is \"\
    atc\".\n    // The longest postfix of \"cat\" is \"tac\", and the reverse of \"\
    tac", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n        postfix += string(myString[len(myString)-i-1:])\n\
    \        if postfix != make_palindrome(postfix) {\n            longestPalindrome\
    \ = postfix\n            longestPalindromeLen = len(postfix)\n        }\n    }\n\
    \n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    prefix := myString[:longestPalindromeLen]\n\
    \    suffix := myString[longestPalindromeLen:]\n    return prefix + string([]rune(suffix))\
    \ + suffix\n}\n", "    // Find the longest postfix of supplied string that is\
    \ a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString) - 1;\
    \ i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n    longestPalindrome\
    \ += myString[len(myString)-1]\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ += myString[:len(myString)-len(longestPalindrome)]\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    longestPalindrome := \"\"\n  \
    \  longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        postfix := myString[:i+1]\n        postfix += string(myString[len(myString)-i-1:])\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    prefix += string(myString[longestPalindromeLen-1:])\n\
    \    return prefix + longestPalindrome\n}\n", "    // Find longest postfix of\
    \ myString that is a palindrome.\n    // The longest postfix is found by reversing\
    \ all prefixes of myString that come before myString.\n    // The longest postfix\
    \ is found by reversing all prefixes of myString that come before myString.\n\
    \    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPostfix := \"\"\n    longestPostfixLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n\
    \        postfix += myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)-i]\n        postfix += myString[len(myString)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-i]\n   \
    \     postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-i]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix)-len(postfix)-len(postfix)-len(postfix)-",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix) {\n \
    \           longestPalindrome = postfix\n            longestPalindromeLen = len(postfix)\n\
    \        }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    prefix := myString[:longestPalindromeLen]\n\
    \    return prefix + longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := reverse(prefix)\n        postfix += suffix\n        postfix += prefix\n \
    \       postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        postfix += suffix\n\
    \        postfix += prefix\n        postfix += suffix\n        postfix += prefix\n\
    \        postfix += suffix\n        postfix += prefix\n        post", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n\
    \        if suffix == reverseString(prefix) {\n            longestPalindrome =\
    \ prefix + longestPalindrome\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\n\
    \    } else {\n        return myString\n    }\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix) {\n \
    \           longestPalindrome = longestPalindrome + postfix\n            longestPalindromeLen\
    \ = len(longestPalindrome)\n        }\n    }\n\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    prefix := myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverse(suffix)\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += string(myString[len(myString)-i-1:])\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLength\
    \ = i + 1\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen := len(myString)\n\
    \    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    longestPalindrome += myString[longestPalindromeLen-1:]\n\
    \    longestPalindromeLen += len(myString) - longestPalindromeLen + 1\n    for\
    \ i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome += myString[len(myString)-(i+1)]\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    longestPalindromeLen += len(myString) - i\n        longestPalindrome += myString[i\
    \ : i+longestPalindromeLen]\n    }\n    longestPalindromeLen += len(myString)\
    \ - longestPalindromeLen\n    longestPalindrome += myString[longestPalindromeLen\
    \ : len(myString)]\n    return longestPalindrome\n}\n", "    // Find longest postfix\
    \ of string that is a palindrome\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, my", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[0:i]\n\
    \        postfix += myString[len(myString)-i:]\n        postfix += myString[len(myString)-i-1:]\n\
    \        postfix += myString[len(myString)-i-2:]\n        postfix += myString[len(myString)-i-3:]\n\
    \        postfix += myString[len(myString)-i-4:]\n        postfix += myString[len(myString)-i-5:]\n\
    \        postfix += myString[len(myString)-i-6:]\n        postfix += myString[len(myString)-i-7:]\n\
    \        postfix += myString[len(myString)-i-8:]\n        postfix += myString[len(myString)-i-9:]\n\
    \        postfix += myString[len(myString)-i-10:]\n        postfix += myString[len(myString)-i-11:]\n\
    \        postfix += myString[len(myString)-i-12:]\n        postfix += myString[len(myString)-i-13:]\n\
    \        postfix += myString[len(myString)-i-14:]\n        postfix += myString[len(myString)-i-15:]\n\
    \        postfix += myString[len(myString)-i-16:]\n        postfix += myString[len(myString)-i-17:]\n\
    \        postfix += myString[len(myString)-i-18:]\n        postfix += myString[len(myString)-i-19:]\n\
    \        postfix += myString[len(myString)-i-20:]\n        postfix += myString[len(myString)-i-21:]\n\
    \        postfix += myString[len(myString)-i-22:]\n        postfix += myString[len(myString)-i-23:]\n\
    \        postfix += myString[len(myString)-i-24:]\n        postfix += myString[len(myString)-i-25:]\n\
    \        postfix += myString[len(myString)-i-26:]", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome += string(myString[i:len(myString)-i])\
    \ + string(myString[len(myString)-i:])\n    }\n    longestPalindromeLen -= len(myString)\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    longestPalindrome += string(myString[len(myString)-longestPalindromeLen:])\n\
    \    return longestPalindrome\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n    longestPalindrome\
    \ += myString[len(myString)-1:]\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:len(myString)-1]\n    suffix := myString[len(myString)-1:]\n    suffix\
    \ += reverseString(prefix)\n    longestPalindrome += suffix\n\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n        reverse\
    \ := myString[i+1:]\n        postfix += reverse\n        longestPalindromeLen\
    \ := len(postfix)\n        if longestPalindromeLen > longestPalindromeLen {\n\
    \            longestPalindrome = postfix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    var myStringLen int = len(myString)\n    var myStringPrefix string\n\
    \    var myStringSuffix string\n    var myStringPrefixLen int\n    var myStringSuffixLen\
    \ int\n    var myStringReversedLen int\n    var myStringReversedPrefix string\n\
    \    var myStringReversedSuffix string\n    var myStringReversedPrefixLen int\n\
    \    var myStringReversedSuffixLen int\n    var myStringReversedReversedLen int\n\
    \    var myStringReversedReversedPrefix string\n    var myStringReversedReversedSuffix\
    \ string\n    var myStringReversedReversedPrefixLen int\n    var myStringReversedReversedSuffixLen\
    \ int\n    var myStringReversedReversedReversedLen int\n    var myStringReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedPrefixLen\
    \ int\n    var myStringReversedReversedReversedSuffixLen int\n    var myStringReversedReversedReversedReversedLen\
    \ int\n    var myStringReversedReversedReversedReversedPrefix string\n    var\
    \ myStringReversedReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedReversedPrefixLen\
    \ int\n    var myStringReversedReversedReversedReversedSuffixLen int\n    var\
    \ myStringReversedReversedReversedReversedReversedLen int\n    var myStringReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedSuffix string\n\
    \    var myStringReversedReversedReversedReversedReversedPrefixLen int\n    var\
    \ myStringReversedReversedReversedReversedReversedSuffixLen int\n    var myStringReversedReversedReversedReversedReversedReversedLen\
    \ int\n    var myStringReversedReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedReversedPrefixLen\
    \ int\n    var myStringReversedReversedReversedReversedReversedReversedSuffixLen\
    \ int\n    var myStringReversedReversedReversedReversedReversedReversedReversedLen\
    \ int\n    var myStringReversedReversedReversedReversedReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedReversedReversedReversedSuffix\
    \ string", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[:i]\n        revPostfix := myString[len(postfix):]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = append(longestPalindrome,\
    \ postfix)\n            longestPalindromeLen = len(postfix)\n        }\n     \
    \   longestPalindrome = append(longestPalindrome, revPostfix)\n        longestPalindromeLen\
    \ = len(longestPalindrome)\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    return append(longestPalindrome,\
    \ myString[longestPalindromeLen:])\n}\n", "    longestPalindrome := \"\"\n   \
    \ longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n      \
    \  postfix := myString[i:]\n        postfix += myString[:i]\n        postfix +=\
    \ myString[:len(myString)-i]\n        postfix += myString[len(myString)-1-i:]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-1:]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += my", "    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            longestPalindromeLen = len(postfix)\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    suffix := myString[longestPalindromeLen:]\n\
    \    return prefix + reverseString(suffix) + longestPalindrome\n}\n", "    //\
    \ Find longest postfix of myString that is a palindrome.\n    // This will be\
    \ the length of the palindrome plus one.\n    longestPalindrome := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindrome = longestPalindrome\
    \ + 1\n        if myString[len(myString)-i-1] != myString[len(myString)-i-longestPalindrome]\
    \ {\n            break\n        }\n    }\n\n    // Append the reverse of the string\
    \ prefix that comes before the\n    // palindromic suffix.\n    result := myString\n\
    \    for i := 0; i < longestPalindrome; i++ {\n        result = result + myString[len(myString)-i]\n\
    \    }\n\n    return result\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[len(myString)-i-1:]\n        if myString[len(myString)-i-1:]\
    \ == reverse(postfix) {\n            longestPalindrome = postfix\n           \
    \ longestPalindromeLen = len(postfix)\n        }\n    }\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    prefix := myString[:longestPalindromeLen]\n    return prefix +\
    \ reverse(longestPalindrome)\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    longestPalindrome := \"\"\n    for i := 0;\
    \ i < len(myString); i++ {\n        longestPalindrome += myString[i]\n    }\n\
    \    longestPalindrome += myString[len(myString)-1:]\n    longestPalindrome =\
    \ reverse(longestPalindrome)\n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ += myString[:len(myString)-len(longestPalindrome)]\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[i:]\n        postfix := append(postfix, myString[:i]...)\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := ", "    longestPalindrome := \"\"\n   \
    \ longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n      \
    \  prefix := myString[:i]\n        suffix := myString[i+1:]\n        longestPalindromeLen\
    \ := len(longestPalindrome)\n        longestPalindrome = longestPalindrome + suffix\n\
    \        if longestPalindromeLen > len(prefix) {\n            longestPalindrome\
    \ = longestPalindrome + prefix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        prefix := myString[:i]\n        postfix := myString[i:]\n\
    \        if isPalindrome(prefix, postfix) {\n            longestPalindrome = prefix\
    \ + longestPalindrome\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n\
    \    for i := 0; i < len(myString); i++ {\n        prefix := myString[0:i]\n \
    \       suffix := myString[i:]\n        postfix := reversePostfix(prefix)\n  \
    \      postfix += suffix\n        postfix += reversePostfix(suffix)\n        if\
    \ postfix != \"\" {\n            longestPalindromeLen += len(postfix)\n      \
    \      if longestPalindromeLen > longestPalindromeLen {\n                longestPalindrome\
    \ = postfix\n                longestPalindromeLen = len(postfix)\n           \
    \ }\n        }\n    }\n    return longestPalindrome\n}\n", "    // Find longest\
    \ postfix of myString that is a palindrome\n    longestPalindrome := \"\"\n  \
    \  longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n     \
    \   postfix := myString[0:i]\n        postfix += string(myString[len(myString)-i:][:len(myString)-i])\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[len(myString)-i:len(myString)]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += my", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := i + 1; j <\
    \ len(myString); j++ {\n            if myString[j] != myString[j] {\n        \
    \        longestPalindromeLen += 1\n                if longestPalindromeLen >\
    \ longestPalindromeLen {\n                    longestPalindrome = myString[:j]\n\
    \                    longestPalindromeLen = longestPalindromeLen - 1\n       \
    \         }\n                break\n            }\n        }\n    }\n    return\
    \ longestPalindrome + myString[len(longestPalindrome):]\n}\n", "    var myStringLen\
    \ int = len(myString)\n    var myStringPrefix string\n    var myStringSuffix string\n\
    \    var myStringReverseSuffix string\n    var myStringReversePrefix string\n\
    \    var myStringReversedSuffix string\n    var myStringReversedPrefix string\n\
    \    var myStringReversedReversedSuffix string\n    var myStringReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedSuffix string\n    var myStringReversedReversedReversedPrefix\
    \ string\n    var myStringReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myStringReversedReversedReversedReversedReversedSuffix string\n    var\
    \ myStringReversedReversedReversedReversedReversedPrefix string\n    var myStringReversedReversedReversedReversedReversedSuffix\
    \ string\n    var myStringReversedReversedReversedReversedReversedPrefix string\n\
    \    var myString", "    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        if isPalindrome(prefix, suffix) {\n \
    \           longestPalindrome = prefix + reverseString(suffix) + longestPalindrome\n\
    \            longestPalindromeLen = len(longestPalindrome)\n        }\n    }\n\
    \    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    longestPalindromeLen := len(myString)\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    for i := 0; i <\
    \ longestPalindromeLen; i++ {\n        longestPalindrome += myString[len(myString)-1-i]\n\
    \    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    // Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        longestPalindrome += myString[i]\n    }\n    \n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    longestPalindromeReverse := \"\"\n    for i := 0; i < len(myString); i++\
    \ {\n        longestPalindromeReverse += myString[len(myString)-1-i]\n    }\n\
    \    \n    // Return the string that is the palindrome of the supplied string.\n\
    \    return longestPalindrome + longestPalindromeReverse\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[:i]\n        reverse := myString[i+1:]\n    \
    \    if isPalindrome(postfix) {\n            longestPalindrome = longestPalindrome\
    \ + reverse + postfix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    longestPalindrome := \"\"\n    longestPalindromeLen :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen +=\
    \ len(myString) - i\n        longestPalindrome += myString[len(myString)-i:len(myString)]\n\
    \    }\n    for i := 0; i < len(myString); i++ {\n        if myString[len(myString)-i:len(myString)]\
    \ != longestPalindrome[len(longestPalindrome)-i:len(longestPalindrome)] {\n  \
    \          longestPalindrome = longestPalindrome[:len(longestPalindrome)-i]\n\
    \            break\n        }\n    }\n    return longestPalindrome\n}\n", "  \
    \  var myStringLen int = len(myString)\n    var myStringPrefix string\n    var\
    \ myStringSuffix string\n    var myStringReversedPrefix string\n    var myStringReversedSuffix\
    \ string\n    var myStringReversedSuffixLen int\n    var myStringReversedSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixLen int\n    var myStringReversedSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixLen int\n    var\
    \ myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixLen int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\
    \ int\n    var myStringReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffix", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        prefix :=\
    \ myString[:i]\n        suffix := myString[i:]\n        postfix := append(prefix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := ", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    longestPalindrome := \"\"\n    for i := 0;\
    \ i < len(myString); i++ {\n        longestPalindrome += myString[i]\n    }\n\
    \    longestPalindromeLen := len(longestPalindrome)\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    prefix := \"\"\n    for i := 0; i < longestPalindromeLen; i++ {\n       \
    \ prefix += myString[len(myString)-(i+1)]\n    }\n    return prefix + longestPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // Assume\
    \ that myString is at least 1 character long.\n    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     prefix := myString[:i]\n        postfix := myString[i:]\n        postfix\
    \ += strings.Reverse(prefix)\n        postfix += longestPalindrome\n        longestPalindromeLen\
    \ = len(postfix)\n        if longestPalindromeLen > len(longestPalindrome) {\n\
    \            longestPalindrome = postfix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        postfix := myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[i+1:]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += ", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[i:]\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[len(myString)-i:]...)\n        postfix := append(postfix, myString[len(myString)-i:]...)\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        post", "    // Find\
    \ longest postfix of myString that is a palindrome.\n    // The longest postfix\
    \ is always one character longer than the original string.\n    // The longest\
    \ postfix is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest postfix is always a palindrome.\n\
    \    // The longest postfix is always a palindrome.\n    // The longest postfix\
    \ is always a palindrome.\n    // The longest ", "    longestPalindrome := \"\"\
    \n    longestPalindromeLength := 0\n    longestPalindromeLength := len(myString)\n\
    \    for i := 0; i < longestPalindromeLength; i++ {\n        prefix := myString[0:i]\n\
    \        suffix := myString[i+1:]\n        postfix := reversePostfix(prefix)\n\
    \        if suffix == postfix {\n            longestPalindrome = prefix + postfix\n\
    \            longestPalindromeLength = len(longestPalindrome)\n        }\n   \
    \ }\n    return longestPalindrome\n}\n", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is found by reversing all\
    \ characters in myString that come before the longest postfix.\n    // The longest\
    \ postfix is found by reversing all characters in myString that come before the\
    \ longest postfix.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest postfix.\n\
    \    // The longest postfix is found by reversing all characters in myString that\
    \ come before the longest postfix.\n    // The longest postfix is found by reversing\
    \ all characters in myString that come before the longest postfix.\n    // The\
    \ longest postfix is found by reversing all characters in myString that come before\
    \ the longest postfix.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest postfix.\n\
    \    // The longest postfix is found by reversing all characters in myString that\
    \ come before the longest postfix.\n    // The longest postfix is found by reversing\
    \ all characters in myString that come before the longest postfix.\n    // The\
    \ longest postfix is found by reversing all characters in myString that come before\
    \ the longest postfix.\n    // The longest postfix is found by reversing all characters\
    \ in myString that come before the longest postfix.\n    // The longest postfix\
    \ is found by reversing all characters in myString that come before the longest\
    \ postfix.\n    // The longest postfix is found by reversing all characters in\
    \ myString that come before the longest postfix.\n    // The longest postfix is\
    \ found by reversing all characters in myString that come before the longest ",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        postfix\
    \ := myString[i:]\n        reverse := myString[:i]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindromeLen += len(postfix)\n            longestPalindrome\
    \ = longestPalindrome + reverse + postfix\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    // Find longest postfix of myString that is a palindrome.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a palindromic\
    \ suffix.\n    // The longest postfix is found by reversing a prefix of myString\
    \ that comes before a palindromic suffix.\n    // The longest postfix is found\
    \ by reversing a prefix of myString that comes before a palindromic suffix.\n\
    \    // The longest postfix is found by reversing a prefix of myString that comes\
    \ before a palindromic suffix.\n    // The longest postfix is found by reversing\
    \ a prefix of myString that comes before a palindromic suffix.\n    // The longest\
    \ postfix is found by reversing a prefix of myString that comes before a ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[i:]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i]\n        postfix += \"-\"\n        postfix += myString[:i+1]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+2]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+3]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+4]\n        postfix += \"-\"\n        postfix += myString[:i+5]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+6]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+7]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+8]\n        postfix += \"-\"\n        postfix += myString[:i+9]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+10]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+11]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+12]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+13]\n        postfix += \"-\"\n        postfix += myString[:i+14]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+15]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+16]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+17]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+18]\n        postfix += \"-\"\n        postfix += myString[:i+19]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+20]\n        postfix\
    \ += \"-\"\n        postfix += myString[:", "    // Initialize result to empty\
    \ string\n    var result string = \"\"\n    // Initialize longest postfix to empty\
    \ string\n    var longest string = \"\"\n    // Initialize longest postfix length\
    \ to 0\n    var longestLength int = 0\n    // Initialize longest postfix to empty\
    \ string\n    var longestPostfix string = \"\"\n    // Initialize longest postfix\
    \ length to 0\n    var longestPostfixLength int = 0\n    // Initialize longest\
    \ postfix to empty string\n    var longestPostfix2 string = \"\"\n    // Initialize\
    \ longest postfix length to 0\n    var longestPostfix2Length int = 0\n    // Initialize\
    \ longest postfix to empty string\n    var longestPostfix3 string = \"\"\n   \
    \ // Initialize longest postfix length to 0\n    var longestPostfix3Length int\
    \ = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix4\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix4Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix5\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix5Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix6\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix6Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix7\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix7Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix8\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix8Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix9\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix9Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix10\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix10Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix11\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix11Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPostfix12\
    \ string = \"\"\n    // Initialize longest postfix length to 0\n    var longestPostfix12Length\
    \ int = 0\n    // Initialize longest postfix to empty string\n    var longestPost",
  "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        longestPalindromeLen := 0\n        longestPalindrome\
    \ += myString[i]\n        for j := 0; j < i; j++ {\n            if myString[j]\
    \ != myString[j+i] {\n                longestPalindromeLen += 1\n            \
    \    break\n            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[:i]\n        longestPalindrome +=\
    \ myString[len(myString)-i:len(myString)]\n    }\n    longestPalindromeLen -=\
    \ len(myString)\n    longestPalindrome += myString\n    longestPalindrome += myString[len(myString)-longestPalindromeLen:]\n\
    \    return longestPalindrome\n}\n", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringReversedSuffix\
    \ string\n    var myStringReversedPrefix string\n\n    for i := 0; i < myStringLen;\
    \ i++ {\n        myStringPrefix = myString[0:i]\n        myStringSuffix = myString[i:]\n\
    \        myStringReversedSuffix = myStringSuffix[0:myStringLen-i-1]\n        myStringReversedPrefix\
    \ = myStringPrefix[0:myStringLen-i-1]\n        if myStringSuffix == myStringReversedSuffix\
    \ {\n            return myStringPrefix + myStringReversedPrefix\n        }\n \
    \   }\n    return \"\"\n}\n", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find longest postfix of myString that is a palindrome.\n    // This will\
    \ be the longest palindrome prefix.\n    var longestPalindromePrefix string\n\
    \    for i := 0; i < len(myString); i++ {\n        // Find longest palindrome\
    \ suffix that ends with myString[i].\n        // This will be the longest palindrome\
    \ suffix.\n        var longestPalindromeSuffix string\n        for j := len(myString)\
    \ - 1; j >= i; j-- {\n            if myString[j] != myString[j] {\n          \
    \      // This is not a palindrome suffix.\n                // So skip this character.\n\
    \                break\n            }\n            longestPalindromeSuffix = myString[j]\
    \ + longestPalindromeSuffix\n        }\n        // If this suffix is a palindrome\
    \ suffix, then append it to longestPalindromePrefix.\n        if longestPalindromeSuffix\
    \ == longestPalindromeSuffix {\n            longestPalindromePrefix = myString[:i]\
    \ + longestPalindromePrefix\n        }\n    }\n    // Append reverse of the longest\
    \ palindrome prefix to myString.\n    return longestPalindromePrefix + myString[len(longestPalindromePrefix):]\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    longestPalindromeLength := len(myString)\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        longestPalindrome = myString[:i] + myString[longestPalindromeLength-i:]\
    \ + longestPalindrome\n    }\n    return longestPalindrome\n}\n", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Initialize our return value\n\
    \    var myPalindrome string = \"\"\n\n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // We will use this to find the palindromic\
    \ suffix.\n    var longestPalindrome string = \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        // Find the longest postfix of supplied string that is a palindrome.\n\
    \        // We will use this to find the palindromic suffix.\n        longestPalindrome\
    \ = longestPalindrome + myString[len(myString)-i:]\n        // Find the palindromic\
    \ suffix that comes before the longest postfix.\n        // We will use this to\
    \ find the palindromic prefix.\n        myPalindrome = myPalindrome + myString[0:len(myString)-len(longestPalindrome)]\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    myPalindrome = myPalindrome + myString[len(myPalindrome):]\n\
    \n    // Return the palindrome string\n    return myPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n\
    \    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n  \
    \      suffix := myString[i:]\n        postfix := append(prefix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := append(postfix, suffix...)\n        postfix := append(postfix,\
    \ suffix...)\n        postfix := append(postfix, suffix...)\n        postfix :=\
    \ append(postfix, suffix...)\n        postfix := append(postfix, suffix...)\n\
    \        postfix := ", "    // Find longest postfix of myString that is a palindrome\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[0:i]\n        reversedPostfix\
    \ := myString[len(postfix):]\n        if myString[i] == reversedPostfix[len(reversedPostfix)-1]\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix\n    longestPalindrome\
    \ = longestPalindrome + myString[0:longestPalindromeLen]\n    return longestPalindrome\n\
    }\n", "    var myStringLen int = len(myString)\n    var myStringPrefix string\n\
    \    var myStringSuffix string\n    var myStringReversedSuffix string\n    var\
    \ myStringReversedPrefix string\n\n    // Find longest postfix of string that\
    \ is a palindrome.\n    for i := 0; i < myStringLen; i++ {\n        myStringPrefix\
    \ = myString[:i]\n        myStringSuffix = myString[i:]\n        myStringReversedSuffix\
    \ = myStringSuffix[:len(myStringSuffix)/2]\n        myStringReversedPrefix = myStringPrefix[len(myStringPrefix)-len(myStringReversedSuffix):]\n\
    \        if myStringSuffix == myStringReversedSuffix {\n            return myStringPrefix\
    \ + myStringReversedPrefix\n        }\n    }\n\n    return \"\"\n}\n", "    //\
    \ Find longest postfix of myString that is a palindrome\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        postfix := myString[i:]\n        postfix := append(postfix, postfix[:len(postfix)-1])\n\
    \        postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)\n        postfix := append(postfix,\
    \ postfix[:1]...)\n        postfix := append(postfix, postfix[:1]...)\n      \
    \  postfix := append(postfix, postfix[:1]...)", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        postfix += myString[len(myString)-i:len(myString)]\n        postfix +=\
    \ myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n \
    \       postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += my", "    // Initialize result\
    \ with empty string\n    var result string = \"\"\n    // Initialize a slice with\
    \ myString\n    var mySlice = myString\n    // Initialize a slice with myString\
    \ reversed\n    var mySliceRev string = \"\"\n    // Initialize a slice with myString\
    \ reversed\n    var mySliceRevRev string = \"\"\n    // Initialize a slice with\
    \ myString reversed\n    var mySliceRevRevRev string = \"\"\n    // Initialize\
    \ a slice with myString reversed\n    var mySliceRevRevRevRev string = \"\"\n\
    \    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRevRevRevRevRevRevRevRevRev\
    \ string = \"\"\n    // Initialize a slice with myString reversed\n    var mySliceRevRevRevRevRev",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        postfix := myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+1]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i]\n        postfix += myString[len(myString)-i:len(myString)]\n\
    \        postfix += myString[:i+", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n\
    \    }\n    longestPalindrome += myString[longestPalindromeLen : len(myString)]\n\
    \    return longestPalindrome\n}\n", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    longestPalindrome := \"\"\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        longestPalindrome += myString[i]\n    }\n\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    longestPalindrome += myString[:len(myString)-len(longestPalindrome)]\n\
    \n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    longestPalindromeLen += len(myString)\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n  \
    \      postfix := myString[:i+1]\n        postfix += suffix\n        postfix +=\
    \ prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix\n        postfix += suffix\n        postfix += prefix\n        postfix\
    \ += suffix\n        postfix += prefix\n        postfix += suffix\n        postfix\
    \ += prefix", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n\
    \    longestPalindromeLength := len(myString)\n    for i := 0; i < longestPalindromeLength;\
    \ i++ {\n        postfix := myString[longestPalindromeLength - i]\n        postfix\
    \ := append(postfix, postfix[len(postfix)-1])\n        postfix := append(postfix,\
    \ postfix[:len(postfix)-1])\n        if postfix != myString {\n            longestPalindrome\
    \ = postfix\n            longestPalindromeLength = len(postfix)\n        }\n \
    \   }\n    return longestPalindrome\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    // Algorithm idea is simple:\n  \
    \  // - Find the longest postfix of supplied string that is a palindrome.\n  \
    \  // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += len(myString) - i\n        longestPalindrome = myString[:i+1] + myString[i+longestPalindromeLen:]\n\
    \        if longestPalindrome == myString[:i+1] + myString[i+longestPalindromeLen:]\
    \ {\n            return longestPalindrome\n        }\n    }\n    return \"\"\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ := len(myString)\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-(i+1)]\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    for i := len(myString) - 1; i >= 0; i-- {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    \n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    longestPalindrome\
    \ += myString[len(myString)-len(longestPalindrome):]\n    \n    // Return the\
    \ result.\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        prefix := myString[:i]\n        suffix := myString[i+1:]\n        if\
    \ suffix == reverseString(prefix) {\n            longestPalindrome = prefix +\
    \ suffix\n            longestPalindromeLen = len(longestPalindrome)\n        }\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    longestPalindromeLen := 0\n        for j := 0; j < i; j++ {\n           \
    \ if myString[j] != myString[len(myString)-j-1] {\n                longestPalindromeLen\
    \ += 1\n            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString[:i+longestPalindromeLen]\n     \
    \   }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        prefix := myString[:i]\n        suffix := myString[i:]\n        longestPalindromeLen\
    \ := len(longestPalindrome)\n        if longestPalindromeLen > len(prefix) + len(suffix)\
    \ {\n            longestPalindrome = prefix\n        } else {\n            longestPalindrome\
    \ += suffix\n        }\n    }\n    return longestPalindrome\n}\n", "    // Initialize\
    \ result with empty string.\n    var result string\n\n    // Initialize longest\
    \ postfix of supplied string that is a palindrome.\n    var longestPalindrome\
    \ string\n\n    // Initialize string prefix that comes before the palindromic\
    \ suffix.\n    var prefix string\n\n    // Initialize string suffix that comes\
    \ after the palindromic suffix.\n    var suffix string\n\n    // Initialize length\
    \ of supplied string.\n    var length int\n\n    // Initialize a boolean flag\
    \ to indicate whether a palindrome is found.\n    var found bool\n\n    // Initialize\
    \ a boolean flag to indicate whether a palindrome is found.\n    var foundPalindrome\
    \ bool\n\n    // Initialize a boolean flag to indicate whether a palindrome is\
    \ found.\n    var foundPalindromeSuffix bool\n\n    // Initialize a boolean flag\
    \ to indicate whether a palindrome is found.\n    var foundPalindromePrefix bool\n\
    \n    // Initialize a boolean flag to indicate whether a palindrome is found.\n\
    \    var foundPalindromeSuffix bool\n\n    // Initialize a boolean flag to indicate\
    \ whether a palindrome is found.\n    var foundPalindromePrefix bool\n\n    //\
    \ Initialize a boolean flag to indicate whether a palindrome is found.\n    var\
    \ foundPalindromeSuffix bool\n\n    // Initialize a boolean flag to indicate whether\
    \ a palindrome is found.\n    var foundPalindromePrefix bool\n\n    // Initialize\
    \ a boolean flag to indicate whether a palindrome is found.\n    var foundPalindromeSuffix\
    \ bool\n\n    // Initialize a boolean flag to indicate whether a palindrome is\
    \ found.\n    var foundPalindromePrefix bool\n\n    // Initialize a boolean flag\
    \ to indicate whether a palindrome is found.\n    var foundPalindromeSuffix bool\n\
    \n    // Initialize a boolean flag to indicate whether a palindrome is found.\n\
    \    var foundPalindromePrefix bool\n\n    // Initialize a boolean flag to indicate\
    \ whether a palindrome is found.\n    var foundPalindromeSuffix bool\n\n    //\
    \ Initialize a boolean flag to indicate whether a palindrome is found.\n    var\
    \ foundPalindromePrefix bool\n\n    // Initialize a boolean flag to indicate whether\
    \ a palindrome is found.\n    var foundPalindromeSuffix bool\n\n    // Initialize\
    \ a boolean flag to indicate whether a palindrome is found.\n    var foundPalindromePrefix\
    \ bool\n\n    // Initialize a boolean flag to indicate whether a palindrome is\
    \ found.\n    var foundP", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longestPalindromeLen int\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        if myString[i] != myString[len(myString)-i-1] {\n            longestPalindromeLen\
    \ = i + 1\n            break\n        }\n    }\n    \n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversedString string\n    for i := 0; i < longestPalindromeLen; i++\
    \ {\n        reversedString += myString[len(myString)-i]\n    }\n    \n    return\
    \ reversedString\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += 1 // Increment length by 1 each time we encounter a character\n        longestPalindrome\
    \ += myString[i]\n    }\n    for i := 0; i < longestPalindromeLen; i++ {\n   \
    \     longestPalindrome += myString[len(myString)-i]\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen := longestPalindromeLen\
    \ + 1\n        longestPalindrome += myString[i]\n    }\n    longestPalindromeLen\
    \ -= 1 // Remove last character from longest palindrome\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        longestPalindrome += myString[len(myString)-(i+1)]\n    }\n \
    \   return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := i; j < len(myString);\
    \ j++ {\n            if myString[j] != myString[len(myString)-1-j] {\n       \
    \         longestPalindromeLen += 1\n            }\n        }\n        if longestPalindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = myString\n       \
    \ }\n    }\n    return longestPalindrome\n}\n", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string ", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLength\
    \ = 0\n        longestPalindrome = myString\n        for j := 0; j < len(myString);\
    \ j++ {\n            if myString[j] != myString[len(myString)-1-j] {\n       \
    \         longestPalindromeLength += 1\n                longestPalindrome = myString[:j+1]\
    \ + myString[len(myString)-1-j:]\n                break\n            }\n     \
    \   }\n        if longestPalindromeLength > longestPalindromeLength {\n      \
    \      longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        postfix := myString[:i+1]\n        \n        // Check if postfix\
    \ is a palindrome.\n        if isPalindrome(postfix) {\n            longestPalindrome\
    \ = postfix\n            longestPalindromeLen = len(postfix)\n            break\n\
    \        }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    prefix := myString[:longestPalindromeLen]\n\
    \    return prefix + longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     postfix := myString[i:]\n        postfix += myString[:i]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-1-i:]\n\
    \        postfix += myString[len(myString)-2-i:]\n        postfix += myString[len(myString)-3-i:]\n\
    \        postfix += myString[len(myString)-4-i:]\n        postfix += myString[len(myString)-5-i:]\n\
    \        postfix += myString[len(myString)-6:]\n        postfix += myString[len(myString)-7:]\n\
    \        postfix += myString[len(myString)-8:]\n        postfix += myString[len(myString)-9:]\n\
    \        postfix += myString[len(myString)-10:]\n        postfix += myString[len(myString)-11:]\n\
    \        postfix += myString[len(myString)-12:]\n        postfix += myString[len(myString)-13:]\n\
    \        postfix += myString[len(myString)-14:]\n        postfix += myString[len(myString)-15:]\n\
    \        postfix += myString[len(myString)-16:]\n        postfix += myString[len(myString)-17:]\n\
    \        postfix += myString[len(myString)-18:]\n        postfix += myString[len(myString)-19:]\n\
    \        postfix += myString[len(myString)-20:]\n        postfix += myString[len(myString)-21:]\n\
    \        postfix += myString[len(myString)-22:]\n        postfix += myString[len(myString)-23:]\n\
    \        postfix += myString[len(myString)-24:]\n        postfix += myString[len(myString)-25:]\n\
    \        postfix += myString[len(myString)-26:]\n        postfix += myString[len(myString)-27:]\n\
    \        postfix += myString[len(myString)-28:]\n        postfix += myString[len(myString)-29:]\n\
    \        postfix += myString[len(myString)-30]\n        postfix += myString[len(myString)-31:]\n\
    \        postfix += myString[len(myString)-32:]\n        postfix += myString[len(myString)-33:]\n\
    \        postfix += myString[len(myString)-34:]\n        postfix += myString[len(myString)-35:]\n\
    \        postfix += myString[len(myString)-36:]", "    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        longestPalindromeLen := 0\n        longestPalindrome += myString[i]\n\
    \        for j := i; j < len(myString); j++ {\n            if myString[j] != myString[len(myString)-1-j]\
    \ {\n                longestPalindromeLen += 1\n                break\n      \
    \      }\n        }\n        if longestPalindromeLen > longestPalindromeLen {\n\
    \            longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[:i]\n        reverse :=\
    \ myString[len(postfix):]\n        if myString[i] == reverse[0] {\n          \
    \  longestPalindrome = postfix\n            longestPalindromeLen = len(postfix)\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    result := myString\n \
    \   for i := 0; i < longestPalindromeLen; i++ {\n        result = result + myString[len(myString)-(i+1):]\n\
    \    }\n    return result\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ += 1 // increment length by 1\n        longestPalindrome += myString[i]\n  \
    \  }\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[len(myString)-i]\n    }\n    return longestPalindrome\n}\n", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[i:]\n        postfix := append(postfix, myString[:i]...)\n\
    \        postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, myString[:i]...)\n        postfix := append(postfix,\
    \ myString[:i]...)\n        postfix := append(postfix, myString[:i]...)\n    \
    \    postfix := append(postfix, ", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    longestPalindromeLen += len(myString)\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        suffix := myString[i+1:]\n  \
    \      postfix := reversePostfix(prefix)\n        if postfix != suffix {\n   \
    \         longestPalindromeLen += len(postfix)\n            if longestPalindromeLen\
    \ > longestPalindromeLen {\n                longestPalindrome = postfix\n    \
    \        }\n        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLength := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLength = 0\n        for j := 0; j < len(myString);\
    \ j++ {\n            if myString[i] == myString[j] {\n                longestPalindromeLength++\n\
    \            }\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = myString[:longestPalindromeLength]\n    \
    \    }\n    }\n    return longestPalindrome + myString[len(longestPalindrome):]\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i\
    \ := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome = myString[:longestPalindromeLen] + myString[len(myString)\
    \ - longestPalindromeLen:] + longestPalindrome\n    }\n    return longestPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLength = 0\n    \
    \    for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j]\
    \ {\n                longestPalindromeLength++\n            }\n        }\n   \
    \     if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = myString[:i]\n            longestPalindromeLength = i\n        }\n    }\n\
    \    return longestPalindrome + myString[len(longestPalindrome):]\n}\n", "   \
    \ // Find longest postfix of myString that is a palindrome\n    longestPalindrome\
    \ := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n        postfix := myString[:i+1]\n\
    \        if isPalindrome(postfix) {\n            longestPalindrome = postfix\n\
    \            break\n        }\n    }\n    // Append reverse of myString prefix\
    \ that comes before the palindromic suffix\n    return longestPalindrome + reverse(myString[:len(myString)-len(longestPalindrome)])\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        longestPalindrome += myString[i]\n    }\n\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    longestPalindrome += myString[len(longestPalindrome):]\n\n    // Return the\
    \ result.\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n   \
    \     longestPalindromeLen := 0\n        for j := 0; j < len(myString); j++ {\n\
    \            if myString[i] == myString[j] {\n                longestPalindromeLen\
    \ += 1\n            }\n        }\n        if longestPalindromeLen > longestPalindromeLen\
    \ {\n            longestPalindrome = myString[:longestPalindromeLen]\n       \
    \ }\n    }\n    return longestPalindrome + make_palindrome(myString[len(longestPalindrome):])\n\
    }\n", "    // If string is empty return empty string\n    if len(myString) ==\
    \ 0 {\n        return \"\"\n    }\n\n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        postfix := myString[:i]\n        postfix +=\
    \ myString[len(myString)-i:]\n        postfix += myString[:len(myString)-i]\n\
    \        postfix += myString[len(myString)-len(postfix):]\n        postfix +=\
    \ myString[:len(myString)-len(postfix)-1]\n        postfix += myString[len(myString)-len(postfix)-1:len(myString)]\n\
    \        postfix += myString[len(myString)-len(postfix)-1:len(myString)-1]\n \
    \       postfix += myString[len(myString)-len(postfix)-1:len(myString)-2]\n  \
    \      postfix += myString[len(myString)-len(postfix)-1:len(myString)-3]\n   \
    \     postfix += myString[len(myString)-len(postfix)-1:len(myString)-4]\n    \
    \    postfix += myString[len(myString)-len(postfix)-1:len(myString)-5]\n     \
    \   postfix += myString[len(myString)-len(postfix)-1:len(myString)-6]\n      \
    \  postfix += myString[len(myString)-len(postfix)-1:len(myString)-7]\n       \
    \ postfix += myString[len(myString)-len(postfix)-1:len(myString)-8]\n        postfix\
    \ += myString[len(myString)-len(postfix)-1:len(myString)-9]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-1:len(myString)-10]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-1:len(myString)-11]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-1:len(myString)-12]\n        postfix +=\
    \ myString[len(myString)-len(postfix)-1:len(myString)-13]\n        postfix +=\
    \ myString", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[:i]\n        postfix += myString[len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(postfix)-len(postfix)]\n        if postfix !=\
    \ myString {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    return longestPalindrome\
    \ + myString[:longestPalindromeLen]\n}\n", "    longestPalindrome := \"\"\n  \
    \  longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n     \
    \   postfix := myString[i:]\n        postfix += myString[:i]\n        postfix\
    \ += myString[:len(myString)-i]\n        postfix += myString[len(myString)-1-i:]\n\
    \        postfix += myString[len(myString)-2-i:]\n        postfix += myString[len(myString)-3-i:]\n\
    \        postfix += myString[len(myString)-4-i:]\n        postfix += myString[len(myString)-5-i:]\n\
    \        postfix += myString[len(myString)-6:]\n        postfix += myString[len(myString)-7:]\n\
    \        postfix += myString[len(myString)-8:]\n        postfix += myString[len(myString)-9:]\n\
    \        postfix += myString[len(myString)-10:]\n        postfix += myString[len(myString)-11:]\n\
    \        postfix += myString[len(myString)-12:]\n        postfix += myString[len(myString)-13:]\n\
    \        postfix += myString[len(myString)-14:]\n        postfix += myString[len(myString)-15:]\n\
    \        postfix += myString[len(myString)-16:]\n        postfix += myString[len(myString)-17:]\n\
    \        postfix += myString[len(myString)-18:]\n        postfix += myString[len(myString)-19:]\n\
    \        postfix += myString[len(myString)-20:]\n        postfix += myString[len(myString)-21:]\n\
    \        postfix += myString[len(myString)-22:]\n        postfix += myString[len(myString)-23:]\n\
    \        postfix += myString[len(myString)-24:]\n        postfix += myString[len(myString)-25:]\n\
    \        postfix += myString[len(myString)-26:]\n        postfix += myString[len(myString)-27:]\n\
    \        postfix += myString[len(myString)-28:]\n        postfix += myString[len(myString)-29:]\n\
    \        postfix += myString[len(myString)-30]\n        postfix += myString[len(myString)-31:]\n\
    \        postfix += myString[len(myString)-32:]\n        postfix += myString[len(myString)-33:]\n\
    \        postfix += myString[len(myString)-34:]\n        postfix += myString[len(myString)-35:]\n\
    \        postfix += myString[len(myString)-36:]", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        postfix := myString[:i]\n\
    \        reverse := myString[i:]\n        if isPalindrome(postfix) {\n       \
    \     longestPalindrome = longestPalindrome + reverse + postfix\n            longestPalindromeLength\
    \ = len(longestPalindrome)\n        }\n    }\n    return longestPalindrome\n}\n",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longestPalindrome\
    \ string\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome\
    \ += myString[i]\n    }\n    \n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reversedString\
    \ string\n    for i := 0; i < len(myString); i++ {\n        reversedString +=\
    \ myString[len(myString)-i-1]\n    }\n    \n    // Return the string that is the\
    \ palindrome of the supplied string.\n    return longestPalindrome + reversedString\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString)\
    \ - 1; i >= 0; i-- {\n        char := myString[i]\n        if char == char {\n\
    \            longestPalindrome = append(longestPalindrome, char)\n           \
    \ longestPalindromeLen++\n        } else {\n            if longestPalindromeLen\
    \ > 0 {\n                longestPalindrome = append(longestPalindrome, myString[longestPalindromeLen-1])\n\
    \                longestPalindromeLen--\n            }\n        }\n    }\n   \
    \ // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    longestPalindrome = append(longestPalindrome, myString[longestPalindromeLen:])\n\
    \    return string(longestPalindrome)\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n  \
    \  for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n    \
    \    suffix := myString[i:]\n        longestPalindromeLen += len(prefix)\n   \
    \     longestPalindromeLen += len(suffix)\n        longestPalindromeLen += longestPalindromeLen\
    \ / 2\n        if longestPalindromeLen > len(longestPalindrome) {\n          \
    \  longestPalindrome = prefix\n            longestPalindromeLen = len(prefix)\n\
    \        }\n        if longestPalindromeLen < len(longestPalindrome) {\n     \
    \       longestPalindrome = suffix\n            longestPalindromeLen = len(suffix)\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    longestPalindromePos := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLen := 0\n      \
    \  longestPalindromePos = 0\n        for j := 0; j < len(myString); j++ {\n  \
    \          if myString[i] == myString[j] {\n                longestPalindromeLen\
    \ += 1\n                if longestPalindromeLen > longestPalindromePos {\n   \
    \                 longestPalindromePos = longestPalindromeLen\n              \
    \      longestPalindrome = myString[:longestPalindromePos] + myString[longestPalindromePos:]\n\
    \                }\n            }\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    longestPalindrome := \"\"\n    for i := len(myString) - 1; i >= 0; i-- {\n\
    \        longestPalindrome += myString[i]\n    }\n\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    longestPalindrome += myString[len(longestPalindrome):]\n\n    // Return the\
    \ result.\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n\
    \    longestPalindromeLen := 0\n    longestPalindromeLen += len(myString)\n  \
    \  for i := 0; i < len(myString); i++ {\n        longestPalindromeLen += myString[i]\n\
    \    }\n    for i := 0; i < longestPalindromeLen; i++ {\n        longestPalindrome\
    \ += myString[len(myString)-1-i]\n    }\n    return longestPalindrome\n}\n", " \
    \   longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    longestPalindromeLen\
    \ += len(myString)\n    for i := 0; i < len(myString); i++ {\n        prefix :=\
    \ myString[:i]\n        suffix := myString[i+1:]\n        postfix := \"\"\n  \
    \      postfix += suffix\n        postfix += reverse(prefix)\n        if postfix\
    \ != suffix {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    return myString[:longestPalindromeLen]\
    \ + longestPalindrome\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLen\
    \ := 0\n        longestPalindrome += myString[i]\n        for j := 0; j < len(myString);\
    \ j++ {\n            if myString[j] != myString[len(myString)-1-j] {\n       \
    \         longestPalindromeLen += 1\n                if longestPalindromeLen >\
    \ longestPalindromeLen {\n                    longestPalindrome = myString[:j+1]\
    \ + myString[j+longestPalindromeLen:]\n                    longestPalindromeLen\
    \ = j + longestPalindromeLen\n                }\n                break\n     \
    \       }\n        }\n    }\n    return longestPalindrome\n}\n", "    // Find\
    \ the longest postfix of supplied string that is a palindrome.\n    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := len(myString) - 1; i >=\
    \ 0; i-- {\n        postfix := myString[:i+1]\n        if isPalindrome(postfix)\
    \ {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    prefix :=\
    \ myString[:longestPalindromeLen]\n    return prefix + reverseString(prefix)\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longestPalindrome\
    \ string\n    for i := 0; i < len(myString); i++ {\n        // Find the longest\
    \ postfix of supplied string that is a palindrome.\n        // Algorithm idea\
    \ is simple:\n        // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n        // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n        // >>> make_palindrome(\"\
    \")\n        // \"\"\n        // >>> make_palindrome(\"cat\")\n        // \"catac\"\
    \n        // >>> make_palindrome(\"cata\")\n        // \"catac\"\n        \n \
    \       // Find the longest postfix of supplied string that is a palindrome.\n\
    \        // Algorithm idea is simple:\n        // - Find the longest postfix of\
    \ supplied string that is a palindrome.\n        // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \        // >>> make_palindrome(\"\")\n        // \"\"\n        // >>> make_palindrome(\"\
    cat\")\n        // \"catac\"\n        // >>> make_palindrome(\"cata\")\n     \
    \   // \"catac\"\n        \n        // Find the longest postfix of supplied string\
    \ that is a palindrome.\n        // Algorithm idea is simple:\n        // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n        // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n        // >>> make_palindrome(\"\")\n        // \"\"\n        // >>>\
    \ make_palindrome(\"cat\")\n        // \"catac\"\n        // >>> make_palindrome(\"\
    cata\")\n        // \"catac\"\n        \n        // Find the longest postfix of\
    \ supplied string that is a p", "    longestPalindrome := \"\"\n    longestPalindromeLength\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeLength\
    \ = 0\n        for j := 0; j < len(myString); j++ {\n            if myString[i]\
    \ == myString[j] {\n                longestPalindromeLength++\n            }\n\
    \        }\n        if longestPalindromeLength > longestPalindromeLength {\n \
    \           longestPalindrome = myString\n        }\n    }\n    return longestPalindrome\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[:i]\n        postfix += myString[len(postfix)-len(postfix):]\n\
    \        postfix += myString[:len(postfix)-len(postfix)]\n        if postfix !=\
    \ myString {\n            longestPalindrome = postfix\n            longestPalindromeLen\
    \ = len(postfix)\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    return myString + myString[:longestPalindromeLen-len(myString)]\
    \ + longestPalindrome\n}\n", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    longestPalindrome := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    longestPalindrome\
    \ = longestPalindrome[:len(longestPalindrome)-1]\n\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    prefix := \"\"\n    for i := 0; i < len(longestPalindrome); i++ {\n     \
    \   prefix += longestPalindrome[len(longestPalindrome)-i-1]\n    }\n\n    return\
    \ prefix + longestPalindrome\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
