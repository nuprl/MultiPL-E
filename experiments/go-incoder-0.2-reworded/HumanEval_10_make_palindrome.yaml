name: HumanEval_10_make_palindrome
language: go_test.go
prompt: "package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString\
  \ string) string {\n"
tests: "func TestMake_Palindrome(t *testing.T) {\n  candidate := make_palindrome\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     {\
  \ actual: candidate(\"x\"), expected: \"x\" },\n     { actual: candidate(\"xyz\"\
  ), expected: \"xyzyx\" },\n     { actual: candidate(\"xyx\"), expected: \"xyx\"\
  \ },\n     { actual: candidate(\"jerry\"), expected: \"jerryrrej\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    longestPalindrome := \"\"\n    longestPalindromeLen := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLen += len(myString)\
    \ - i\n        longestPalindrome += myString[i : i+longestPalindromeLen]\n   \
    \ }\n    longestPalindromeLen -= len(myString)\n    longestPalindrome += myString[0\
    \ : longestPalindromeLen]\n    return longestPalindrome\n}\n", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // Algorithm idea\
    \ is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        suffix := myString[i:]\n        longestPalindromeLen := len(longestPalindrome)\n\
    \        longestPalindrome = longestPalindrome + suffix\n        if longestPalindromeLen\
    \ > len(prefix) {\n            longestPalindrome = longestPalindrome + prefix\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    var myPalindrome string\
    \ = \"\"\n    var myPalindromeLen int = 0\n    var myPalindromeLen int = len(myString)\n\
    \    var myPalindromePrefix string = \"\"\n    var myPalindromeSuffix string =\
    \ \"\"\n    var myPalindromeSuffixLen int = 0\n    var myPalindromeSuffixLen int\
    \ = len(myPalindromeSuffix)\n\n    for myPalindromeSuffixLen = myPalindromeLen\
    \ - 1; myPalindromeSuffixLen >= 0; myPalindromeSuffixLen-- {\n        myPalindromeSuffix\
    \ = myString[myPalindromeSuffixLen]\n        myPalindromePrefix = myString[0:myPalindromeSuffixLen]\n\
    \        myPalindrome = myPalindromePrefix + myPalindromeSuffix + myPalindrome\n\
    \        myPalindromeLen = len(myPalindrome)\n    }\n\n    return myPalindrome\n\
    }\n", "    longestPalindrome := \"\"\n    longestPalindromeLength := 0\n    for\
    \ i := 0; i < len(myString); i++ {\n        longestPalindromeLength = 0\n    \
    \    for j := 0; j < len(myString); j++ {\n            if myString[i] == myString[j]\
    \ {\n                longestPalindromeLength++\n            }\n        }\n   \
    \     if longestPalindromeLength > longestPalindromeLength {\n            longestPalindrome\
    \ = myString\n            longestPalindromeLength = longestPalindromeLength\n\
    \        }\n    }\n    return longestPalindrome\n}\n", "    // Initialize result\
    \ with empty string\n    var result string = \"\"\n\n    // Initialize a variable\
    \ to hold longest postfix of supplied string\n    var longestPostfix string =\
    \ \"\"\n\n    // Initialize a variable to hold a character from the supplied string\n\
    \    var currentChar string = \"\"\n\n    // Initialize a variable to hold a character\
    \ from the longest postfix of supplied string\n    var longestChar = \"\"\n\n\
    \    // Initialize a variable to hold a character from the longest postfix of\
    \ supplied string\n    var longestCharPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffix string = \"\"\n\n    // Initialize a variable to hold\
    \ a character from the longest postfix of supplied string\n    var longestCharSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffix string = \"\"\n\n\
    \    // Initialize a variable to hold a character from the longest postfix of\
    \ supplied string\n    var longestCharSuffixSuffixPrefix string = \"\"\n\n   \
    \ // Initialize a variable to hold a character from the longest postfix of supplied\
    \ string\n    var longestCharSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixPrefix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixSuffix string = \"\"\n\n    // Initialize\
    \ a variable to hold a character from the longest postfix of supplied string\n\
    \    var longestCharSuffixSuffixSuffixSuffixSuffixPrefix string = \"\"\n\n   \
    \ // Initialize a variable to hold a character from the longest postfix of supplied\
    \ string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffix string = \"\"\
    \n\n    // Initialize a variable to hold a character from the longest postfix\
    \ of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of supplied string\n    var longestCharSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix\
    \ string = \"\"\n\n    // Initialize a variable to hold a character from the longest\
    \ postfix of ", "    // Find the longest postfix of supplied string that is a\
    \ palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find longest postfix of myString\
    \ that is a palindrome\n    longestPalindrome := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindrome += myString[i]\n    }\n    longestPalindromeLen\
    \ := len(longestPalindrome)\n\n    // Append reverse of string prefix that comes\
    \ before the palindromic suffix\n    prefix := myString[:longestPalindromeLen]\n\
    \    reversedPrefix := make([]rune, len(prefix))\n    for i := 0; i < len(prefix);\
    \ i++ {\n        reversedPrefix[i] = prefix[len(prefix)-1-i]\n    }\n    reversedSuffix\
    \ := make([]rune, longestPalindromeLen)\n    for i := 0; i < longestPalindromeLen;\
    \ i++ {\n        reversedSuffix[i] = longestPalindrome[len(longestPalindrome)-1-i]\n\
    \    }\n\n    // Append the reversed prefix and suffix\n    return prefix + reversedPrefix\
    \ + reversedSuffix\n}\n", "    longestPalindrome := \"\"\n    longestPalindromeLen\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        prefix := myString[:i]\n\
    \        postfix := myString[i:]\n        postfix += strings.Reverse(prefix)\n\
    \        longestPalindromeLen := len(postfix)\n        if longestPalindromeLen\
    \ > longestPalindromeLen {\n            longestPalindrome = postfix\n        }\n\
    \    }\n    return longestPalindrome\n}\n", "    longestPalindrome := \"\"\n \
    \   longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++ {\n    \
    \    postfix := myString[i:]\n        postfix += \"-\"\n        postfix += myString[:i]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+1]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+2]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+3]\n        postfix += \"-\"\n        postfix += myString[:i+4]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+5]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+6]\n        postfix += \"-\"\n    \
    \    postfix += myString[:i+7]\n        postfix += \"-\"\n        postfix += myString[:i+8]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+9]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+10]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+11]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+12]\n        postfix += \"-\"\n        postfix += myString[:i+13]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+14]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+15]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+16]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+17]\n        postfix += \"-\"\n        postfix += myString[:i+18]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+19]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+20]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+21]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+22]\n        postfix += \"-\"\n        postfix += myString[:i+23]\n\
    \        postfix += \"-\"\n        postfix += myString[:i+24]\n        postfix\
    \ += \"-\"\n        postfix += myString[:i+25]\n        postfix += \"-\"\n   \
    \     postfix += myString[:i+26]\n        postfix += \"-\"\n        postfix +=\
    \ myString[:i+27]\n        postfix += \"-\"\n        post", "    longestPalindrome\
    \ := \"\"\n    longestPalindromeLen := 0\n    for i := 0; i < len(myString); i++\
    \ {\n        prefix := myString[:i]\n        suffix := myString[i:]\n        postfix\
    \ := reverseString(prefix)\n        if postfix != suffix {\n            longestPalindrome\
    \ = prefix + postfix\n            longestPalindromeLen = len(longestPalindrome)\n\
    \        }\n    }\n    if longestPalindromeLen > 0 {\n        return longestPalindrome\
    \ + reverseString(myString[:longestPalindromeLen])\n    }\n    return myString\n\
    }\n", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    longestPalindrome := \"\
    \"\n    longestPalindromeLength := 0\n    for i := 0; i < len(myString); i++ {\n\
    \        postfix := myString[:i]\n        postfix += myString[len(myString)-i:]\n\
    \        postfix += myString[:len(myString)-i]\n        postfix += myString[len(myString)-len(postfix):]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ myString[len(myString)-len(postfix):len(myString)]\n        postfix += myString[:len(myString)-len(postfix)]\n\
    \        postfix += myString[len(myString)-len(postfix):len(myString)]\n     \
    \   postfix += myString[:len(myString)-len(postfix)]\n        postfix += myString[len(myString)-len(postfix):len(myString)]\n\
    \        postfix += myString[:len(myString)-len(postfix)]\n        postfix +=\
    \ my", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    var myStringLen int = len(myString)\n\
    \    var myStringPrefix string\n    var myStringSuffix string\n    var myStringPalindrome\
    \ string\n    var myStringPalindromeLen int\n\n    // Find longest postfix of\
    \ myString that is a palindrome\n    for i := 0; i < myStringLen; i++ {\n    \
    \    myStringPrefix = myString[0:i]\n        myStringSuffix = myString[i:]\n \
    \       myStringPalindrome = myStringPrefix + reverse(myStringSuffix) + myStringSuffix\n\
    \        myStringPalindromeLen = len(myStringPalindrome)\n        if myStringPalindromeLen\
    \ > myStringLen {\n            myStringLen = myStringPalindromeLen\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    myStringPalindrome = myString[0:myStringLen]\
    \ + reverse(myString[myStringLen:]) + myString[myStringLen:]\n\n    return myStringPalindrome\n\
    }\n", "    // Find longest postfix of myString that is a palindrome.\n    // If\
    \ no such postfix exists, return myString unchanged.\n    longestPalindrome :=\
    \ \"\"\n    for i := 0; i < len(myString); i++ {\n        longestPalindrome +=\
    \ myString[i]\n    }\n    longestPalindromeLen := len(longestPalindrome)\n   \
    \ longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen /=\
    \ 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    longestPalindromeLen += longestPalindromeLen % 2\n    longestPalindromeLen\
    \ /= 2\n    ", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longestPalindrome\
    \ string = \"\"\n    var longestPalindromeLen int = 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        longestPalindromeLen += 1 // Increment the length of the longest\
    \ palindrome so far.\n        longestPalindrome += myString[i]\n        if myString[len(myString)-i-1]\
    \ == myString[len(myString)-i] {\n            longestPalindromeLen += 1 // Increment\
    \ the length of the longest palindrome so far.\n        }\n    }\n    \n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // Algorithm idea is simple:\n    // - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longestPalindromeReverse string = \"\"\n    var longestPalindromeReverseLen\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        longestPalindromeReverseLen\
    \ += 1 // Increment the length of the longest palindrome reverse.\n        longestPalindromeReverse\
    \ += myString[len(myString)-i-1]\n        if myString[len(myString)-i-1] == myString[len(myString)-i]\
    \ {\n            longestPalindromeReverseLen += 1 // Increment the length of the\
    \ longest palindrome reverse.\n        }\n    }\n    \n    // Return the concatenation\
    \ of both strings.\n    return longest", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string ", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string ", "    // Find longest postfix of myString\
    \ that is a palindrome.\n    // The longest postfix is found by reversing a prefix\
    \ of myString that comes before a palindromic suffix.\n    // The prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the longest\
    \ prefix of myString that is a palindrome.\n    // The longest prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the longest\
    \ prefix of myString that is a palindrome.\n    // The longest prefix is found\
    \ by finding the longest prefix of myString that is a palindrome.\n    // The\
    \ longest prefix is found by finding the longest prefix of myString that is a\
    \ palindrome.\n    // The longest prefix is found by finding the longest prefix\
    \ of myString that is a palindrome.\n    // The longest prefix is found by finding\
    \ the longest prefix of myString that is a palindrome.\n    // The longest prefix\
    \ is found by finding the longest prefix of myString that is a palindrome.\n \
    \   // The longest prefix is found by finding the longest prefix of myString that\
    \ is a palindrome.\n    // The longest prefix is found by finding the ", "   \
    \ // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(\"\")\n    // \"\"\
    \n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"\
    cata\")\n    // \"catac\"\n    \n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(\"\")\n    // \"\"\n    // >>> make_palindrome(\"\
    cat\")\n    // \"catac\"\n    // >>> make_palindrome(\"cata\")\n    // \"catac\"\
    \n    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(\"\
    \")\n    // \"\"\n    // >>> make_palindrome(\"cat\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(\"cata\")\n    // \"catac\"\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
