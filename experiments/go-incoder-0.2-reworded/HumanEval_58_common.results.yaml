language: go_test.go
name: HumanEval_58_common
results:
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    result := append(result,\
    \ l1...)\n    result := append(result, l2...)\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7pjlgvy_test.go:15:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:16:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz2t5us5_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpiz2t5us5_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range m\
    \ {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr507keft_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    result := append(result,\
    \ l1...)\n    result := append(result, l2...)\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7pjlgvy_test.go:15:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:16:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; ok {\n            delete(m, v)\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmjqgfmnc_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpmjqgfmnc_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpmjqgfmnc_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5ue781ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5ue781ud_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5ue781ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5ue781ud_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp48bkxmbs_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp48bkxmbs_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n    \
    \    tmp48bkxmbs_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got\
    \ '[%!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmp48bkxmbs_test.go:46:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz2t5us5_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpiz2t5us5_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5ue781ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5ue781ud_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9e18i14e_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplh5t8zmk_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmplh5t8zmk_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n  \
    \  result := []int{}\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3q82a_y7_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    result := append(result,\
    \ l1...)\n    result := append(result, l2...)\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7pjlgvy_test.go:15:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:16:12: no new variables on left side of :=

    /tmp/tmps7pjlgvy_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5ue781ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5ue781ud_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp061geac_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range m\
    \ {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr507keft_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n                break\n            }\n      \
    \  }\n    }\n    return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyvzi59zn_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=5)\
    \ %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyvzi59zn_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpyvzi59zn_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    var res []int\n    for v := range m {\n        if m[v] == 0 {\n  \
    \          res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpdi23dlsd_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpdi23dlsd_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpdi23dlsd_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range m\
    \ {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr507keft_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp061geac_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz2t5us5_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpiz2t5us5_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n  \
    \  result := []int{}\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3q82a_y7_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range m\
    \ {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr507keft_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        for _, y := range l2 {\n            if x == y {\n            \
    \    result = append(result, x)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk7rd64oi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpk7rd64oi_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5ue781ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5ue781ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5ue781ud_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz2t5us5_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpiz2t5us5_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n  \
    \  result := make([]int, 0, len(m))\n    for v := range m {\n        result =\
    \ append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7k1ex4b3_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, ok := l2[x]; ok {\n            result = append(result, x)\n\
    \        }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n\
    \            result = append(result, x)\n        }\n    }\n    return sortUnique(result)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh40zq1t_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpbh40zq1t_test.go:21:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpbh40zq1t_test.go:25:12: undefined: sortUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ooazc3t_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5ooazc3t_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5ooazc3t_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprvw6572y_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprvw6572y_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprvw6572y_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpfgr_10pn_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpfgr_10pn_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpfgr_10pn_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073711
