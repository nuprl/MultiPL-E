language: go_test.go
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgve7ayif_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        } else {\n  \
    \          result -= 1\n        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7mh41p7_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        } else if char\
    \ == char.ToUpper() {\n            result += 1\n        } else {\n           \
    \ result += 1\n        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdyo4zre_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmpcdyo4zre_test.go:18:32: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp8rq5n69b_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp8rq5n69b_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp8rq5n69b_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp8rq5n69b_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql3drmq_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char == char.ToLower() || char == char.ToUpper() {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprxn804nx_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmprxn804nx_test.go:16:51: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char.ToLower() {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsscsryij_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.toUpper() {\n            result += 1\n        } else if char\
    \ == char.toLower() {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz91lipu_test.go:16:25: char.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpoz91lipu_test.go:18:32: char.toLower undefined (type rune has no field
    or method toLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        } else {\n  \
    \          result -= 1\n        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7mh41p7_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, char := range myString\
    \ {\n        chars[char]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_q37fale_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char.ToLower() {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsscsryij_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.toUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcj4jto8w_test.go:16:25: char.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.toUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcj4jto8w_test.go:16:25: char.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() || char == char.ToUpper() {\n            result +=\
    \ 1\n        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei1h17rx_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmpei1h17rx_test.go:16:51: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.toUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcj4jto8w_test.go:16:25: char.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp804cdvgn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp804cdvgn_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char {\n            count++\n        }\n    }\n    return count\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=go,string |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv82ds2oj_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075401
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, char := range myString\
    \ {\n        chars[char]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_q37fale_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_jcz_9n_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char.ToUpper() && char != char.ToLower() {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3t3xrjy_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpc3t3xrjy_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char.ToLower() {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsscsryij_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgve7ayif_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        } else if char\
    \ == char.ToUpper() {\n            result += 1\n        } else {\n           \
    \ fmt.Println(\"char is neither upper nor lower\")\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=go,string |>\n<| c |>\nThis code does not work\
    \ if you have a string with multiple consecutive upper case letters. For example,\
    \ `count_distinct_characters(\"abCdEf\")` returns `3` instead of `4`.\n<|/ c |>\n\
    <| c |>\nI agree, that's why I added the comment \"// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\"\n<|/\
    \ c |>\n<| c |>\nI see your point. My comment was meant to point out that your\
    \ answer does not address the issue of consecutive upper case letters.\n<|/ c\
    \ |>\n<| c |>\nI added a comment about consecutive upper case letters. I hope\
    \ it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n  \
    \  \"fmt\"\n    \"strings\"\n)\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj3uiw6mv_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075401
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char >= 'a' && char <= 'z' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n \
    \ candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp9t33jrbk_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp9t33jrbk_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp9t33jrbk_test.go:40: expected '%!s(int=5)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075403
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result +=\
    \ 1\n        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwsipf0i_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpkwsipf0i_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneixxxdt_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, r := range myString\
    \ {\n        chars[r]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp7tn9gvyt_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp7tn9gvyt_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToUpper() && char != char.ToLower() {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvipdw7jk_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpvipdw7jk_test.go:16:51: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char == char.ToLower() || char == char.ToUpper() {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprxn804nx_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmprxn804nx_test.go:16:51: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimgz9hki_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    for _, char := range myString {\n    \
    \    if char != char.ToLower() {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsscsryij_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    chars := make(map[rune]int)\n    for _, char := range myString\
    \ {\n        chars[char]++\n    }\n    return len(chars)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_q37fale_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_q37fale_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char == char.ToUpper() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzmxz3j2_test.go:16:25: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  if char != char.ToLower() {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nq1fe3c_test.go:16:25: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n\
    // 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    result := 0\n    for _, char := range myString {\n      \
    \  result += 1\n    }\n    return result\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo651rct_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075402
