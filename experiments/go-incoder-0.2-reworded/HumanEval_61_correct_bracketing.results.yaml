language: go_test.go
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdmpaj3bt_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for i := 0; i < len(brackets); i++ {\n  \
    \      if brackets[i] == '(' {\n            if brackets[i+1] != ')' {\n      \
    \          return false\n            }\n        }\n        if brackets[i] == ')'\
    \ {\n            if brackets[i-1] != '(' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmplc6felf2_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmplc6felf2_test.go:43\
    \ +0x1c\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \"(\" && c != \")\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_d9bwyw_test.go:21:17: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    /tmp/tmpw_d9bwyw_test.go:21:29: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\",\
    \ -1)\n    brackets = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyugqywla_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6iozuye_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjmlgenji_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpjmlgenji_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyjr1cigj_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyjr1cigj_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da340, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, char := range brackets {\n        if char == '(' {\n            openingBrackets[char]\
    \ = true\n        } else {\n            closingBrackets[char] = true\n       \
    \ }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n        if !closingBrackets[char] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgf2vn31z_test.go:24:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpgf2vn31z_test.go:26:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpgf2vn31z_test.go:30:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpgf2vn31z_test.go:33:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()[]\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[][]\", \"\
    []\", -1)\n    brackets = strings.Replace(brackets, \"[]()[]\", \"()[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[][][]\", \"[][]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[][]()[]\", \"[][]()[]\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"[][][][]\", \"[][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][]()[]\", \"[][][]()[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][]\", \"[][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][]()[]\", \"[][][][]()[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][]\", \"[][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][]\", \"[][][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][][]\", \"[][][][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][][][]\", \"[][][][][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][][][]\", \"[][][][][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][][][]\", \"[][][][][][][][][][]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][][][][][][][][]\", \"[][][]\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptyulboab_test.go:43:66: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"/\", \"/((\", -1)\n    brackets = strings.Replace(brackets, \"\\\\\", \"\\\
    \\(\", -1)\n    brackets = strings.Replace(brackets, \"?\", \"?(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"$\", \"$(\", -1)\n    brackets = strings.Replace(brackets, \"%\", \"%(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"^\", \"^(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"&\", \"&(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"*\", \"*(\", -1)\n    brackets = strings.Replace(brackets, \"-\", \"-(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"+\", \"+(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \",\", \",(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"=\", \"=((\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\"\
    , -1)\n    brackets = strings.Replace(brackets, \")\", \"))\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\",\
    \ -1)\n    brackets = strings.Replace(bra\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9c6gac_b_test.go:51:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets, \"~\", \"~(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"-\", \"-(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"_\", \"_(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"=\", \"=\", -1)\n    brackets = strings.Replace(brackets, \"?\", \"?(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"+\", \"+(\", -1)\n    brackets = strings.Replace(brackets, \"*\", \"*(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"(\", \"(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"~\", \"~(\", -1)\n    brackets = strings.Replace(brackets, \"-\", \"-(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"_\", \"_(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbu4ec2fy_test.go:51:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \"(\" && c != \")\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_d9bwyw_test.go:21:17: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    /tmp/tmpw_d9bwyw_test.go:21:29: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"))\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"))\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"))\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz514n8bw_test.go:51:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc34fpu8n_test.go:53:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '('\
    \ {\n            openingBrackets[c] = true\n        } else if c == ')' {\n   \
    \         closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp5g9hw8un_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp5g9hw8un_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp5g9hw8un_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp5g9hw8un_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"~\", \"~(\", -1)\n    brackets = strings.Replace(brackets, \"!\", \"!(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"^\", \"^(\", -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"*\", \"*(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"~\", \"~(\", -1)\n    brackets = strings.Replace(brackets, \"!\", \"!(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"^\", \"^(\", -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\",\
    \ -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp007439vi_test.go:51:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '(' {\n            openingBrackets[char] = true\n        } else if char ==\
    \ ')' {\n            closingBrackets[char] = true\n        }\n    }\n    for _,\
    \ char := range brackets {\n        if !openingBrackets[char] {\n            return\
    \ false\n        }\n        if !closingBrackets[char] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuw_wb_m_test.go:23:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpeuw_wb_m_test.go:25:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpeuw_wb_m_test.go:29:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpeuw_wb_m_test.go:32:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()\", \"()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()\", \"()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()\", \"()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()\", \"()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0efm07mf_test.go:39:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptff7lvfb_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    count := 0\n    for len(stack) > 0 {\n        count += len(stack)\n     \
    \   stack = stack[:0]\n        stack = append(stack, stack[0])\n        stack\
    \ = stack[:0]\n        stack = append(stack, stack[0])\n    }\n    return count\
    \ == len(brackets)\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxc3_z2ay_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    for _, c := range brackets\
    \ {\n        if c == '(' {\n            stack = append(stack, c)\n        } else\
    \ if c == ')' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n            if stack[len(stack)-1]\
    \ != '(' {\n                return false\n            }\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60nte6z9_test.go:22:35: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp60nte6z9_test.go:28:39: invalid operation: stack[len(stack) - 1] != ''(''
    (mismatched types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()\", \"()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()\", \"()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()\", \"()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()\", \"()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ydseiby_test.go:39:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"?\", \"?(\", -1)\n    brackets = strings.Replace(brackets, \"=\", \"=(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"-\", \"(-(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"_\", \"(_(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"+\", \"(+(\", -1)\n    brackets = strings.Replace(brackets, \"*\", \"(*(\"\
    , -1)\n    brackets = strings.Replace(brackets, \"/\", \"(/(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"(%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"@\", \"(@(\", -1)\n    brackets = strings.Replace(brackets, \"~\", \"(~(\"\
    , -1)\n    brackets = strings.Replace(brackets, \"$\", \"($(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"&\", \"(&(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"|\", \"(|(\", -1)\n    brackets = strings.Replace(brackets, \"^\", \"(^(\"\
    , -1)\n    brackets = strings.Replace(brackets, \"~\", \"(~(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"`\", \"(`(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets, \"?\", \"?(\"\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ryhepnw_test.go:50:51: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \"(\" && c != \")\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptegxb_e3_test.go:21:17: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    /tmp/tmptegxb_e3_test.go:21:29: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, c := range brackets {\n        if\
    \ c != ')' && c != '(' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpj39onsmp_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpj39onsmp_test.go:36\
    \ +0x1c\ntesting.tRunner(0xc0000da340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    i := 0\n    for ; i < len(stack); i++ {\n        if stack[i] == \"(\" {\n\
    \            stack[i] = \")\"\n            stack = append(stack, \")\")\n    \
    \    } else if stack[i] == \")\" {\n            stack[i] = \"(\"\n           \
    \ stack = append(stack, \"(\")\n        } else {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowe2ikcb_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '(' {\n \
    \           if brackets[i+1] != ')' {\n                return false\n        \
    \    }\n        }\n        if brackets[i] == ')' {\n            if brackets[i-1]\
    \ != '(' {\n                return false\n            }\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpwr_3vxso_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpwr_3vxso_test.go:44\
    \ +0x1c\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for i := 0; i < len(brackets); i++ {\n  \
    \      if brackets[i] == '(' {\n            if brackets[i+1] != ')' {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpnm3gi6b8_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpnm3gi6b8_test.go:38\
    \ +0x1c\ntesting.tRunner(0xc0000da340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    for _, c := range brackets\
    \ {\n        if c == '(' {\n            stack = append(stack, c)\n        } else\
    \ if c == ')' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n            if stack[len(stack)-1]\
    \ != '(' {\n                return false\n            }\n        } else {\n  \
    \          return false\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpviwhocuc_test.go:22:35: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpviwhocuc_test.go:28:39: invalid operation: stack[len(stack) - 1] != ''(''
    (mismatched types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for i := 0; i < len(brackets); i++ {\n  \
    \      if brackets[i] == '(' {\n            if brackets[i+1] != ')' {\n      \
    \          return false\n            }\n            i += 2\n        } else if\
    \ brackets[i] == ')' {\n            if brackets[i-1] != '(' {\n              \
    \  return false\n            }\n            i -= 2\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp5semeipp_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp5semeipp_test.go:44\
    \ +0x1c\ntesting.tRunner(0xc0000da340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmposlh_jje_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != ')' && c != '(' {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyde43s3v_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyde43s3v_test.go:41\
    \ +0x208\ntesting.tRunner(0xc0001031e0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    i := 0\n    for ; i < len(stack); i++ {\n        if stack[i] == \"(\" {\n\
    \            if stack[i+1] != \")\" {\n                return false\n        \
    \    }\n            i++\n        } else {\n            if stack[i] != \")\" {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q5zspr2_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6iozuye_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != brackets[0] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy30mv35s_test.go:21:17: invalid operation: c != brackets[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    for len(stack) > 0 {\n        current := stack[len(stack)-1]\n        if\
    \ current == \"(\" {\n            stack = append(stack, \")\")\n        } else\
    \ {\n            stack = append(stack, \"(\")\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmc5ro2fm_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm39lsbec_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != ')' {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpcvninsjf_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpcvninsjf_test.go:41\
    \ +0x1dc\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for i := 0;\
    \ i < len(brackets); i++ {\n        if brackets[i] == '(' {\n            if brackets[i+1]\
    \ != ')' {\n                return false\n            }\n        }\n        if\
    \ brackets[i] == ')' {\n            if brackets[i-1] != '(' {\n              \
    \  return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpbi7b0185_test.go:27\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpbi7b0185_test.go:44\
    \ +0x239\ntesting.tRunner(0xc0001031e0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != brackets[0] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy30mv35s_test.go:21:17: invalid operation: c != brackets[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"/\", \"/((\", -1)\n    brackets = strings.Replace(brackets, \"\\\\\", \"/((\"\
    , -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"-\", \"-(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"_\", \"_(\", -1)\n    brackets = strings.Replace(brackets, \"?\", \"?(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets, \"^\", \"^(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"*\", \"*(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"+\", \"+(\", -1)\n    brackets = strings.Replace(brackets, \",\", \",(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"-\", \",(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"=\", \"=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"(\", -1)\n    brackets = strings.Replace(brackets, \")\", \")\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"{\", \"{\", -1)\n\
    \    brackets = strings.Replace(brackets, \"}\", \"}\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">\", -1)\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyvokdogh_test.go:53:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := range\
    \ brackets {\n        stacks[i] = make([]bool, len(brackets))\n    }\n    stacks[0][0]\
    \ = true\n    stacks[0][1] = true\n    stacks[1][0] = true\n    stacks[1][1] =\
    \ true\n    stacks[2][0] = true\n    stacks[2][1] = true\n    stacks[3][0] = true\n\
    \    stacks[3][1] = true\n    stacks[4][0] = true\n    stacks[4][1] = true\n \
    \   stacks[5][0] = true\n    stacks[5][1] = true\n    stacks[6][0] = true\n  \
    \  stacks[6][1] = true\n    stacks[7][0] = true\n    stacks[7][1] = true\n   \
    \ stacks[8][0] = true\n    stacks[8][1] = true\n    stacks[9][0] = true\n    stacks[9][1]\
    \ = true\n    stacks[10][0] = true\n    stacks[10][1] = true\n    stacks[11][0]\
    \ = true\n    stacks[11][1] = true\n    stacks[12][0] = true\n    stacks[12][1]\
    \ = true\n    stacks[13][0] = true\n    stacks[13][1] = true\n    stacks[14][0]\
    \ = true\n    stacks[14][1] = true\n    stacks[15][0] = true\n    stacks[15][1]\
    \ = true\n    stacks[16][0] = true\n    stacks[16][1] = true\n    stacks[17][0]\
    \ = true\n    stacks[17][1] = true\n    stacks[18][0] = true\n    stacks[18][1]\
    \ = true\n    stacks[19][0] = true\n    stacks[19][1] = true\n    stacks[20][0]\
    \ = true\n    stacks[20][1] = true\n    stacks[21][0] = true\n    stacks[21][1]\
    \ = true\n    stacks[22][0] = true\n    stacks[22][1] = true\n    stacks[23][0]\
    \ = true\n    stacks[23][1] = true\n    stacks[24][0] = true\n    stacks[24][1]\
    \ = true\n    stacks[25][0] = true\n    stacks[25][1] = true\n    stacks[26][0]\
    \ = true\n    stacks[26][1] = true\n    stacks[27][0] = true\n    stacks[27][1]\
    \ = true\n    stacks[28][0] = true\n    stacks[28][1] = true\n    stacks[29][0]\
    \ = true\n    stacks[29][1] = true\n    stacks[30][0] = true\n    stacks[30][1]\
    \ = true\n    stacks[31][0] = true\n    stacks[31][1] = true\n    \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyozqy8vy_test.go:88:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"/\", \"/((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"\\\\\", \"/((\", -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\"\
    , -1)\n    brackets = strings.Replace(brackets, \"-\", \"-(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"_\", \"_(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"+\", \"+(\", -1)\n    brackets = strings.Replace(brackets, \"*\", \"*(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"?\", \"?(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"=\", \"=\", -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<=\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">=\", \">=\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!=\", \"!=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"==\", \"==\", -1)\n    brackets = strings.Replace(brackets, \"!=\", \"!=\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<=\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">=\", \">=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"=\", \"=\", -1)\n\
    \    brackets = strings.Replace(brackets, \"!=\", \"!=\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"==\", \"==\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!=\", \"!=\", -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<=\"\
    , -1)\n    bracket\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate :=\
    \ correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"), expected:\
    \ true },\n     { actual: candidate(\"(()())\"), expected: true },\n     { actual:\
    \ candidate(\"()()(()())()\"), expected: true },\n     { actual: candidate(\"\
    ()()((()()())())(()()(()))\"), expected: true },\n     { actual: candidate(\"\
    ((()())))\"), expected: false },\n     { actual: candidate(\")(()\"), expected:\
    \ false },\n     { actual: candidate(\"(\"), expected: false },\n     { actual:\
    \ candidate(\"((((\"), expected: false },\n     { actual: candidate(\")\"), expected:\
    \ false },\n     { actual: candidate(\"(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())())(()\"), expected: false },\n     { actual: candidate(\"\
    ()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwxo1hdir_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n \
    \   brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"()()()\", \"()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()()\", -1)\n    brackets = strings.Replace(brackets, \")((\", \"()\", -1)\n \
    \   brackets = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets =\
    \ strings.Replace(brackets, \")()()\", \"()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()\",\
    \ \"()()\", -1)\n    brackets = strings.Replace(brackets, \")((\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()\",\
    \ \"()()\", -1)\n    brackets = strings.Replace(brackets, \")((\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzakt64fe_test.go:49:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    for _, c := range brackets {\n        if c != \")\" && c != \"(\" {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_ifp7ym_test.go:19:16: undefined: strings

    /tmp/tmph_ifp7ym_test.go:25:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmph_ifp7ym_test.go:25:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()\", \"()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()\", \"()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()\", \"()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()\", \"()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xpdl3v6_test.go:38:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    i := 0\n    for ; i < len(stack); i++ {\n        if stack[i] == \"(\" {\n\
    \            stack[i] = \")\"\n            stack = append(stack, \")\")\n    \
    \        stack = append(stack, stack[i])\n            stack = append(stack, \"\
    (\")\n            i += 2\n        } else if stack[i] == \")\" {\n            stack\
    \ = append(stack, \"(\")\n            stack = append(stack, stack[i])\n      \
    \      stack = append(stack, \")\")\n            i += 2\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps3he_6ac_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    bracketCount := 0\n    for len(stack) > 0 {\n        bracket := stack[len(stack)-1]\n\
    \        stack = stack[:len(stack)-1]\n        if bracket == \"(\" {\n       \
    \     bracketCount++\n        } else if bracket == \")\" {\n            bracketCount--\n\
    \            if bracketCount < 0 {\n                return false\n           \
    \ }\n        }\n    }\n    return bracketCount == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwwxcj3x_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"\
    ()\", -1)\n    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwtvgebzs_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[1 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmposlh_jje_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]\", \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbpxrhx3q_test.go:53:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\", \"()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()()\"\
    , \"()\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9i44f5mw_test.go:41:78: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '(' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else if char == ')' {\n           \
    \ closingBrackets = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi3xtnlzw_test.go:24:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpi3xtnlzw_test.go:26:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9lr12cch_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"(()\", -1)\n    brackets = strings.Replace(brackets, \")(\", \")(\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()\", \")()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \")()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()\", \")(()\", -1)\n    brackets = strings.Replace(brackets, \")(()()\"\
    , \")(()()\", -1)\n    brackets = strings.Replace(brackets, \")(()()\", \")(()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()\", \")(()()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()\", \")(()()()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()()\", \")(()()()()()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \")(()()()()()\", \")(()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()\", \")(()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()()\", \")(()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()()()\", \")(()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()()()\", \")(()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()()()()\", \")(()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()()()()()()()\", \"\
    )(\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp25tr6nc0_test.go:41:68: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\",\
    \ -1)\n    brackets = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyugqywla_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"(,\", -1)\n    brackets = strings.Replace(brackets, \")(\", \")[\"\
    , -1)\n    brackets = strings.Replace(brackets, \")[\", \"][\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"][\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"][\", \"](\"\
    , -1)\n    brackets = strings.Replace(brackets, \")[\", \"][\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\"\
    , -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\"\
    , -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\"\
    , -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\"\
    , -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"](\", \")[\", -1)\n    brackets = strings.Replace(brackets, \"](\", \")[\"\
    , -1)\n    brackets = strings.\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp58cuvems_test.go:51:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc34fpu8n_test.go:53:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ brackets[1 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdsi8bds2_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpdsi8bds2_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()()()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()()()()\", \"()()()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()\", \"()()()()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()\", \"()()()()()()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()\", \"()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()\", \"()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()\", \"()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()\", \"()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\", \"\
    ()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\"\
    , \"()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()()()\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4bhnzlla_test.go:39:74: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()[]\", \"[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][]\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()[]\", \"[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[][][]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[]()()[]\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()[][]\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[][][][]\"\
    , \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]()()[][]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()[][][]\", \"[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[][][][][]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[]()()[][][]\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()[][][][]\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[][][][][][]\"\
    , \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]()()[][][][]\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()[][][][][]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][]\", \"[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[]()()[][][][][]\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()[][][][][][]\", \"[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[][][][][][][][]\", \"[]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[]()()\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz1au77s3_test.go:47:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \")((\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \")(()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()()(\", \"()\", -1)\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1dhnllcd_test.go:44:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]int, 0)\n    stack := append(stack, len(brackets))\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    for len(brackets) > 0 {\n \
    \       i := stack[len(stack)-1]\n        if brackets[i] == '(' {\n          \
    \  stack = append(stack, i+1)\n            brackets = brackets[i+1 : len(brackets)-1]\n\
    \        } else {\n            if brackets[i] != ')' {\n                return\
    \ false\n            }\n            brackets = brackets[i+1 : len(brackets)-1]\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return true\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrkn1ehi_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"~\", \"~(\", -1)\n    brackets = strings.Replace(brackets, \"!\", \"!(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"^\", \"^(\", -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"*\", \"*(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"~\", \"~(\", -1)\n    brackets = strings.Replace(brackets, \"!\", \"!(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"^\", \"^(\", -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\",\
    \ -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp007439vi_test.go:51:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptff7lvfb_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != '(' && char != ')' {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpx3eigwnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpx3eigwnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpx3eigwnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpx3eigwnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpx3eigwnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpx3eigwnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpx3eigwnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpx3eigwnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != ')' {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpcvninsjf_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpcvninsjf_test.go:41\
    \ +0x1dc\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"/\", \"/((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"\\\\\", \"/((\", -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\"\
    , -1)\n    brackets = strings.Replace(brackets, \"-\", \"-(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"_\", \"_((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"+\", \"+((\", -1)\n    brackets = strings.Replace(brackets, \"=\", \"=((\"\
    , -1)\n    brackets = strings.Replace(brackets, \"!\", \"!((\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"?\", \"?((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"*\", \"*((\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\"\
    , -1)\n    brackets = strings.Replace(brackets, \")\", \"((\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">(\", -1)\n    brackets = strings.Replace(brackets, \"/\", \"/((\"\
    , -1)\n    brackets = strings.Replace(brackets, \"\\\\\", \"/((\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"-\", \"-(\", -1)\n    brackets = strings.Replace(brackets, \"_\", \"_((\"\
    , -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbvflkl8g_test.go:51:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9bsfadvn_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuagibsi__test.go:50:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    for len(stack) > 0 {\n        current := stack[len(stack)-1]\n        stack\
    \ = stack[:len(stack)-1]\n        if current == \"(\" {\n            stack = append(stack,\
    \ \")\")\n        } else if current == \")\" {\n            if len(stack) == 0\
    \ {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9faoex4s_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyjr1cigj_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyjr1cigj_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da340, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    for len(stack) > 0 {\n        current := stack[len(stack)-1]\n        stack\
    \ = stack[:len(stack)-1]\n        if current == \"(\" {\n            stack = append(stack,\
    \ \")\")\n        } else if current == \")\" {\n            if len(stack) == 0\
    \ {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9faoex4s_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    brackets := brackets[0]\n    for len(stack) > 0 {\n        bracket := stack[len(stack)-1]\n\
    \        stack = stack[:len(stack)-1]\n        if bracket == brackets {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplde_v4cv_test.go:20:11: no new variables on left side of :=

    /tmp/tmplde_v4cv_test.go:21:14: no new variables on left side of :=

    /tmp/tmplde_v4cv_test.go:21:17: cannot use brackets[0] (value of type byte) as
    type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for i := 0; i < len(brackets); i++ {\n  \
    \      if brackets[i] == '(' {\n            if brackets[i+1] != ')' {\n      \
    \          return false\n            }\n        }\n        if brackets[i] == ')'\
    \ {\n            if brackets[i-1] != '(' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmplc6felf2_test.go:20\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmplc6felf2_test.go:43\
    \ +0x1c\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets, \"~\", \"~(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"$\", \"$(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"%\", \"%(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"^\", \"^(\", -1)\n    brackets = strings.Replace(brackets, \"&\", \"&(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"*\", \"*(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"-\", \"-(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",\", \",(\", -1)\n    brackets = strings.Replace(brackets, \"/\", \"/(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"=\", \"=\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"?\", \"?(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!\", \"!(\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"|\", \"|(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphz06d9ww_test.go:51:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()()()()\"\
    , \"()\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk7xik5jb_test.go:47:61: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != ')' && c != '(' {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyde43s3v_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyde43s3v_test.go:41\
    \ +0x208\ntesting.tRunner(0xc0001031e0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \")((\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()()(\", \"()\", -1)\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw1lkde1s_test.go:47:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()\", \"()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()\", \"()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()\", \"()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()\", \"()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(bra\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp26u71a8v_test.go:38:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    i := 0\n    for ; i < len(stack); i++ {\n        if stack[i] == \"(\" {\n\
    \            stack[i] = \")\"\n            stack = append(stack, \")\")\n    \
    \        stack = append(stack, stack[i+1])\n            i += 2\n        } else\
    \ if stack[i] == \")\" {\n            stack = append(stack, \"(\")\n         \
    \   stack = append(stack, stack[i+1])\n            i += 2\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsiefif5m_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()\", \"(()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()\", \")()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\"\
    , \"(()()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \")()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"(()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \")()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets, \")(()\"\
    , \")(()\", -1)\n    brackets = strings.Replace(brackets, \")(()()\", \")(()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()\", \")(()()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()\", \")(()()()\", -1)\n  \
    \  brackets = strings.Replace(brackets, \")(()()()\", \")(()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()\", \")(()()()\", -1)\n    brackets =\
    \ strings.Replace(brackets, \")(()()()\", \")(()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()\", \")(()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    )(()()()\", \")(()()()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()\"\
    , \")(()()()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()\", \"\
    )(()()()\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4cfq3bpw_test.go:46:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()()()()\"\
    , \"()\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk7xik5jb_test.go:47:61: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073980
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_pdypokw_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyjr1cigj_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyjr1cigj_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da340, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '(' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else if c == ')' {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        } else {\n            return false\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for _, c := range\
    \ openingBrackets {\n        if _, ok := closingBrackets[len(closingBrackets)-1];\
    \ !ok {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00w4k5mc_test.go:24:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp00w4k5mc_test.go:26:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp00w4k5mc_test.go:34:12: c declared but not used

    /tmp/tmp00w4k5mc_test.go:35:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9lr12cch_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\", \"()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4eo9eyb_test.go:42:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \"(\" && c != \")\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_d9bwyw_test.go:21:17: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    /tmp/tmpw_d9bwyw_test.go:21:29: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc34fpu8n_test.go:53:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \")\" && c != \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbetjrwrc_test.go:21:17: invalid operation: c != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpbetjrwrc_test.go:21:29: invalid operation: c != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        openingBrackets[r]\
    \ = true\n    }\n    for _, r := range brackets {\n        closingBrackets[r]\
    \ = true\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n        if !closingBrackets[r] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpkjmdww_t_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpkjmdww_t_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpkjmdww_t_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpkjmdww_t_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpkjmdww_t_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpkjmdww_t_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpkjmdww_t_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpkjmdww_t_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073981
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9lr12cch_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4xzxnt1_test.go:22:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpr4xzxnt1_test.go:25:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpr4xzxnt1_test.go:28:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpr4xzxnt1_test.go:31:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpou5ak37y_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyjr1cigj_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyjr1cigj_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da340, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    for _, c := range brackets\
    \ {\n        if c == '(' {\n            stack = append(stack, c)\n        } else\
    \ if c == ')' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n            if stack[len(stack)-1]\
    \ != '(' {\n                return false\n            }\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60nte6z9_test.go:22:35: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp60nte6z9_test.go:28:39: invalid operation: stack[len(stack) - 1] != ''(''
    (mismatched types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1x3_q3g_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpz1x3_q3g_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpz1x3_q3g_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpz1x3_q3g_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ brackets[0 : len(brackets)-1]\n    for _, char := range brackets {\n       \
    \ if char != \")\" && char != \"(\" {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8_6oc0r_test.go:22:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmpb8_6oc0r_test.go:22:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpyjr1cigj_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpyjr1cigj_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da340, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"(,\", -1)\n    brackets = strings.Replace(brackets, \"(,\", \"(,\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(\", \")\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",(\", \",\", -1)\n    brackets = strings.Replace(brackets, \",\", \",\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(,)\", \"(,\", -1)\n    brackets = strings.Replace(brackets, \"(,\", \"(,\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()\", \")\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",,\", \"(,\", -1)\n    brackets = strings.Replace(brackets, \",,\", \"(,\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \")\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",,(\", \",\", -1)\n    brackets = strings.Replace(brackets, \",,(\", \",\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \")\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",,(,\", \",\", -1)\n    brackets = strings.Replace(brackets, \",,(,\", \"\
    ,\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \")\", -1)\n   \
    \ brackets = strings.Replace(brackets, \")()\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \",,(,\", \",\", -1)\n    brackets = strings.Replace(brackets, \",,(,\", \"\
    ,\", -1)\n    brackets = strings.Replace(brackets, \")()\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsz37tt0w_test.go:50:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \")(\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\",\
    \ -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9lr12cch_test.go:52:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()()()()()()()()()\", \"()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()()()()()\"\
    , \"()\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9i44f5mw_test.go:41:78: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073979
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]string, 0)\n    stack := append(stack, brackets)\n\
    \    for len(stack) > 0 {\n        current := stack[len(stack)-1]\n        stack\
    \ = stack[:len(stack)-1]\n        if current == \"(\" {\n            stack = append(stack,\
    \ \")\")\n        } else if current == \")\" {\n            if len(stack) == 0\
    \ {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n</code>\n<|/ a tags=go |>\n<| c |>\nThis doesn't work if the brackets are nested.\
    \ e.g. `correct_bracketing(\"(()())\")` returns `true` but should be `false`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the brackets are nested. e.g. `correct_bracketing(\"\
    (()())\")` returns `true` but should be `false`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the brackets are nested. e.g. `correct_bracketing(\"(()())\")` returns\
    \ `true` but should be `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if the brackets\
    \ are nested. e.g. `correct_bracketing(\"(()())\")` returns `true` but should\
    \ be `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if the brackets are nested.\
    \ e.g. `correct_bracketing(\"(()())\")` returns `true` but should be `false`.\n\
    <|/ c |>\n<| a dscore=4 |>\nI wrote a package for this: https://github.com/jonas/brackets\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/jonas/brackets\"\
    \n)\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8kqjqgmq_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]int, 0)\n    stack := append(stack, len(brackets))\n\
    \    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '(' {\n \
    \           stack = append(stack, i)\n        }\n        if brackets[i] == ')'\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61f43z5m_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n \
    \   brackets = strings.Replace(brackets, \"(()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")(()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()\", \"()\", -1)\n    brackets =\
    \ strings.Replace(brackets, \")(()()()()()()()\", \"()\", -1)\n    brackets =\
    \ strings.Replace(brackets, \")(()()()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()()()()()()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphh27b8_i_test.go:47:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, char := range brackets {\n        if char == '(' {\n            openingBrackets++\n\
    \        } else if char == ')' {\n            closingBrackets++\n        }\n \
    \   }\n    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmppx58wbm9_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmppx58wbm9_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()(\", \"()\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")((\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()(\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \")()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()(\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()(\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()()(\", \"()\", -1)\n  \
    \  brackets = strings.Replace(brackets, \")(()()()(\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(()()()(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()(\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()()()(\", \"()\"\
    , -1)\n    brackets = \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxpiyetuv_test.go:49:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"(\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"[]\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[]\", \"[]\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()\", \"()\", -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc34fpu8n_test.go:53:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '(' {\n            openingBrackets[c] = true\n        } else if c == ')' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvff9s8a7_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvff9s8a7_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6k4inr_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()\", \"()()()()()\", -1)\n    brackets = strings.Replace(brackets, \"\
    ()()()()()()\", \"()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()\", \"()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()\", \"()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()\", \"()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()\", \"()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()\", \"()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()()()()()()\",\
    \ \"()()()()()()()()()()()()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()()()()()()()\", \"()()()()()()()()()()()()()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()()()()()()()()()()()\", \"()()()()()()()()()()()()()()\"\
    , -1)\n    brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xpdl3v6_test.go:38:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := 0\n    closingBrackets := 0\n    for\
    \ _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmp9p1ybi9g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp9p1ybi9g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \")\" && char != \"(\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"()\"), expected: true },\n     { actual: candidate(\"\
    (()())\"), expected: true },\n     { actual: candidate(\"()()(()())()\"), expected:\
    \ true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"), expected:\
    \ true },\n     { actual: candidate(\"((()())))\"), expected: false },\n     {\
    \ actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y5f9lf3_test.go:21:20: invalid operation: char != ")" (mismatched types
    rune and untyped string)

    /tmp/tmp0y5f9lf3_test.go:21:35: invalid operation: char != "(" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()()()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()()()()()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()()()()()()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()()()()()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")()()()()()()()\", \"()\", -1)\n \
    \   brackets = strings.Replace(brackets, \"()()()()()()()()\", \"()\", -1)\n \
    \   brackets = strings.Replace(bra\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    ()\"), expected: true },\n     { actual: candidate(\"(()())\"), expected: true\
    \ },\n     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkzjcutsy_test.go:47:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073981
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '(' {\n            openingBrackets++\n        } else if char ==\
    \ ')' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"()\"\
    ), expected: true },\n     { actual: candidate(\"(()())\"), expected: true },\n\
    \     { actual: candidate(\"()()(()())()\"), expected: true },\n     { actual:\
    \ candidate(\"()()((()()())())(()()(()))\"), expected: true },\n     { actual:\
    \ candidate(\"((()())))\"), expected: false },\n     { actual: candidate(\")(()\"\
    ), expected: false },\n     { actual: candidate(\"(\"), expected: false },\n \
    \    { actual: candidate(\"((((\"), expected: false },\n     { actual: candidate(\"\
    )\"), expected: false },\n     { actual: candidate(\"(()\"), expected: false },\n\
    \     { actual: candidate(\"()()(()())())(()\"), expected: false },\n     { actual:\
    \ candidate(\"()()(()())()))()\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmp0erztf3w_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmp0erztf3w_test.go:45\
    \ +0x1be\ntesting.tRunner(0xc0000da1a0, 0x527d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[1 : len(brackets)-1]\n    brackets = brackets[0 : \n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n  \
    \   { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
    ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
    ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false\
    \ },\n     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
    (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false\
    \ },\n     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
    (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
    \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptff7lvfb_test.go:66:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073976
