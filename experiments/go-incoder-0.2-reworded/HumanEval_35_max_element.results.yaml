language: go_test.go
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    max := l[0]\n    for _, v := range l {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    return max\n\
    }\n\nfunc TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    max := l[0]\n    for _, v := range l {\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t *testing.T)\
    \ {\n  candidate := max_element\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 3 },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n\
    // 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\n\
    func max_element(l []int) int {\n    if len(l) == 0 {\n        return -1\n   \
    \ }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    return max\n}\n\nfunc TestMax_Element(t\
    \ *testing.T) {\n  candidate := max_element\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073290
