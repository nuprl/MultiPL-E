language: go_test.go
name: HumanEval_135_can_arrange
results:
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpoabgx2r9_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpoabgx2r9_test.go:37\
    \ +0x572\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 4 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpoad1ydfn_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpoad1ydfn_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000d8000, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ arr[i-1] {\n            maxIndex = i\n            break\n        }\n    }\n\
    \    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpb2zwbdax_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpb2zwbdax_test.go:35\
    \ +0x552\ntesting.tRunner(0xc0001991e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return i\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp3wvs38s6_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp3wvs38s6_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr {\n        if v >= max {\n\
    \            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuigwn6xd_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp3yp4fxfx_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp3yp4fxfx_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n            break\n        }\n    }\n    return max\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp9zi5ue8w_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp9zi5ue8w_test.go:35\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= arr[max] {\n         \
    \   max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpnla_cquv_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpnla_cquv_test.go:34\
    \ +0x592\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoglgunq7_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n            continue\n        }\n        max = i\n        break\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpjorjg127_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpjorjg127_test.go:38\
    \ +0x552\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ i++\n        } else {\n            return max\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmprd80aw01_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmprd80aw01_test.go:40\
    \ +0x5d2\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n            break\n        }\n    }\n    return max\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp9zi5ue8w_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp9zi5ue8w_test.go:35\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v >= max {\n            max = v\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpmm16jm_o_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpmm16jm_o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpmm16jm_o_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpmm16jm_o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073393
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return i\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp3wvs38s6_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp3wvs38s6_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp3wvs38s6_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int = -1\n    var i int\n    for i = 1; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[i-1] {\n            max = i\n            break\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmplat58t4y_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmplat58t4y_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmplat58t4y_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmplat58t4y_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n            continue\n        }\n        max = i\n        break\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpjorjg127_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpjorjg127_test.go:38\
    \ +0x552\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n            break\n        }\n    }\n    return max\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpos_u3mhs_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpos_u3mhs_test.go:35\
    \ +0x552\ntesting.tRunner(0xc00019b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n            continue\n        }\n        max = i\n        break\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpjorjg127_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpjorjg127_test.go:38\
    \ +0x552\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n            continue\n        }\n        max = i\n        break\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpjorjg127_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpjorjg127_test.go:38\
    \ +0x552\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    if max < 0 {\n        return -1\n    }\n    return max\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp39f8j4zl_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp39f8j4zl_test.go:41\
    \ +0x5e6\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = i + 1\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2rva8mpi_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2rva8mpi_test.go:38\
    \ +0x5c6\ntesting.tRunner(0xc0001031e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <=\
    \ arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpv7eii6at_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpv7eii6at_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpvytwey2t_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpvytwey2t_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for i := 1;\
    \ i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpz400r1g9_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpz400r1g9_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpz400r1g9_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpz400r1g9_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ <= arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmjl0jye_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpn37wppm2_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpn37wppm2_test.go:38\
    \ +0x5f9\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr[1:] {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpehzcvdhx_test.go:22:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ arr[i-1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp3dxmpx6g_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp3dxmpx6g_test.go:34\
    \ +0x552\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoglgunq7_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= max {\n            return\
    \ -1\n        }\n        if arr[i] > max {\n            max = arr[i]\n       \
    \ }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpjmbdc0nh_test.go:47: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpjmbdc0nh_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpjmbdc0nh_test.go:47: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpjmbdc0nh_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v >= max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptbt0ud_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpts5fra5d_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpts5fra5d_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v >= max {\n            max = v\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpmm16jm_o_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpmm16jm_o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpmm16jm_o_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpmm16jm_o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073393
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2n68zfzi_test.go:46: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2n68zfzi_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= max {\n   \
    \         max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpd7rtcp_h_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpd7rtcp_h_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpd7rtcp_h_test.go:44: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxIndex {\n            maxIndex = arr[i]\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpbwix61wa_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpbwix61wa_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpbwix61wa_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpbwix61wa_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= max {\n            max\
    \ = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpd3n428fw_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpd3n428fw_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpd3n428fw_test.go:44: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = i + 1\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2rva8mpi_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2rva8mpi_test.go:38\
    \ +0x5c6\ntesting.tRunner(0xc0001031e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpn37wppm2_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpn37wppm2_test.go:38\
    \ +0x5f9\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 4 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpoad1ydfn_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpoad1ydfn_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000d8000, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        }\n        i++\n    }\n    return max\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpy8s03b1f_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpy8s03b1f_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpp_u_6vfw_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpp_u_6vfw_test.go:34\
    \ +0x592\ntesting.tRunner(0xc0001191e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= max {\n   \
    \         max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpd7rtcp_h_test.go:44: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpd7rtcp_h_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpd7rtcp_h_test.go:44: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n            break\n        }\n    }\n    return max\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp9zi5ue8w_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp9zi5ue8w_test.go:35\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= arr[max] {\n         \
    \   max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpnla_cquv_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpnla_cquv_test.go:34\
    \ +0x592\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= max {\n            continue\n\
    \        }\n        max = i\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6jimangp_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6jimangp_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6jimangp_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6jimangp_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp3yp4fxfx_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp3yp4fxfx_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= arr[max] {\n         \
    \   max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpnla_cquv_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpnla_cquv_test.go:34\
    \ +0x592\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpts5fra5d_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpts5fra5d_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ return -1\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmptilj_7ps_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmptilj_7ps_test.go:39\
    \ +0x5d2\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n            break\n        }\n    }\n    return max\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpos_u3mhs_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpos_u3mhs_test.go:35\
    \ +0x552\ntesting.tRunner(0xc00019b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzqc532kk_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpzqc532kk_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpzqc532kk_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpzqc532kk_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ return -1\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmptilj_7ps_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmptilj_7ps_test.go:39\
    \ +0x5d2\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ return -1\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmptilj_7ps_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmptilj_7ps_test.go:39\
    \ +0x5d2\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    for _, v :=\
    \ range arr[1:] {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmponqve_mw_test.go:47: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmponqve_mw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] == max {\n            i++\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073403
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = i + 1\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2rva8mpi_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2rva8mpi_test.go:38\
    \ +0x5c6\ntesting.tRunner(0xc0001031e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = 0\n \
    \       }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2zv6lx9t_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2zv6lx9t_test.go:38\
    \ +0x5a6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] >= arr[i-1] {\n           \
    \ i++\n        } else {\n            return max\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmprd80aw01_test.go:24\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmprd80aw01_test.go:40\
    \ +0x5d2\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 4 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpoad1ydfn_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpoad1ydfn_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000d8000, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for _, v := range arr {\n        if v > max {\n     \
    \       max = v\n        }\n        if v == max {\n            i++\n        }\n\
    \    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6kguvdlo_test.go:48: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6kguvdlo_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr {\n        if v >= max {\n\
    \            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuigwn6xd_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpf0oz1c1o_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpf0oz1c1o_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = i + 1\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpkn2gfypv_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpkn2gfypv_test.go:38\
    \ +0x5c6\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5v5x_zj_test.go:19:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    var maxValue int = -1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n     \
    \       maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2ddjj8p3_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2ddjj8p3_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2ddjj8p3_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2ddjj8p3_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] <= arr[max] {\n         \
    \   max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpnla_cquv_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpnla_cquv_test.go:34\
    \ +0x592\ntesting.tRunner(0xc000103520, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := range arr {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpho2lqij6_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpho2lqij6_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_n7pwkl2_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_n7pwkl2_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n            i = i + 1\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2rva8mpi_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2rva8mpi_test.go:38\
    \ +0x5c6\ntesting.tRunner(0xc0001031e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ maxIndex int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxIndex {\n            maxIndex = arr[i]\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpbwix61wa_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpbwix61wa_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpbwix61wa_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpbwix61wa_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            max = i\n        } else {\n            i++\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppa_z1ngz_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppa_z1ngz_test.go:37\
    \ +0x5e6\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n\
    \            i++\n        } else {\n            max = i\n        }\n    }\n  \
    \  return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpts5fra5d_test.go:21\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpts5fra5d_test.go:37\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
