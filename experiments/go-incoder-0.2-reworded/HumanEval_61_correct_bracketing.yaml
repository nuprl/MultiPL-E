name: HumanEval_61_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"()\"), expected: true },\n    \
  \ { actual: candidate(\"(()())\"), expected: true },\n     { actual: candidate(\"\
  ()()(()())()\"), expected: true },\n     { actual: candidate(\"()()((()()())())(()()(()))\"\
  ), expected: true },\n     { actual: candidate(\"((()())))\"), expected: false },\n\
  \     { actual: candidate(\")(()\"), expected: false },\n     { actual: candidate(\"\
  (\"), expected: false },\n     { actual: candidate(\"((((\"), expected: false },\n\
  \     { actual: candidate(\")\"), expected: false },\n     { actual: candidate(\"\
  (()\"), expected: false },\n     { actual: candidate(\"()()(()())())(()\"), expected:\
  \ false },\n     { actual: candidate(\"()()(()())()))()\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")\", \"()\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"((\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")(\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \")()()\", \"()\", -1)\n    ",
  "    brackets = brackets[1 : len(brackets)-1]\n    for _, c := range brackets {\n\
    \        if c != \")\" && c != \"(\" {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := 0\n    closingBrackets := 0\n    for _, char := range\
    \ brackets {\n        if char == '(' {\n            openingBrackets++\n      \
    \  } else if char == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n    for i\
    \ := 0; i < len(brackets); i++ {\n        if brackets[i] == '(' {\n          \
    \  if brackets[i+1] != ')' {\n                return false\n            }\n  \
    \      }\n        if brackets[i] == ')' {\n            if brackets[i-1] != '('\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    for _, c := range\
    \ brackets {\n        if c != \"(\" && c != \")\" {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '(' {\n            openingBrackets[c] = true\n        } else\
    \ if c == ')' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = brackets[1 :\
    \ len(brackets)-1]\n    brackets = strings.Replace(brackets, \"(\", \"((\", -1)\n\
    \    brackets = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"[\", \"[(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"]\", \"](\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(\", \"((\", -1)\n    brackets = strings.Replace(brackets, \")\", \")(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"{(\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"}(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<\", \"<(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"[(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"](\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"(\", \"((\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")\", \")(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace(brackets, \">\", \">(\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"{\", \"{(\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"}\", \"}(\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<(\", -1)\n    brackets = strings.Replace", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : ", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"(\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()\", \"()\"\
    , -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"\
    ()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\"\
    , \"()\", -1)\n    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"()()()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"(()()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \")()()\",\
    \ \"()\", -1)\n    brackets = strings.Replace(brackets, \"()()()\", \"()\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(()()\", \"()\", -1)\n    brackets\
    \ = strings.Replace(brackets, \")(()\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"()()()\", \"()\", -1)\n    ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '(' {\n            openingBrackets[c] = true\n        } else\
    \ if c == ')' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for c := range openingBrackets {\n        if !closingBrackets[c] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : ", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = brackets[0 : len(brackets)-1]\n    brackets = brackets[0 : ",
  "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := 0\n    closingBrackets\
    \ := 0\n    for _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '(' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n        if !closingBrackets[char] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    openingBrackets := 0\n    closingBrackets\
    \ := 0\n    for _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n", "    openingBrackets :=\
    \ 0\n    closingBrackets := 0\n    for _, char := range brackets {\n        if\
    \ char == '(' {\n            openingBrackets++\n        } else if char == ')'\
    \ {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n", "    openingBrackets := 0\n    closingBrackets :=\
    \ 0\n    for _, c := range brackets {\n        if c == '(' {\n            openingBrackets++\n\
    \        } else if c == ')' {\n            closingBrackets++\n        }\n    }\n\
    \    return openingBrackets == closingBrackets\n}\n", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"(\", \"[\", -1)\n\
    \    brackets = strings.Replace(brackets, \")\", \"]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"(\", -1)\n    brackets = strings.Replace(brackets, \"]\", \")\", -1)\n\
    \    brackets = strings.Replace(brackets, \"()\", \"[]\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"[]\", \"()\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[]()\", \"()\", -1)\n    brackets = strings.Replace(brackets, \"()[]\", \"\
    []\", -1)\n    brackets = strings.Replace(brackets, \"()()\", \"()\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"[][]\", \"[]\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"[]()[]\", \"()[]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[][][]\", \"[][]\", -1)\n    brackets = strings.Replace(brackets, \"[][]()[]\"\
    , \"[][]()[]\", -1)\n    brackets = strings.Replace(brackets, \"[][][][]\", \"\
    [][][][]\", -1)\n    brackets = strings.Replace(brackets, \"[][][]()[]\", \"[][][]()[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][]\", \"[][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][]()[]\", \"[][][][]()[]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][]\", \"[][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][]\", \"[][][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][][]\", \"[][][][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][][][]\", \"[][][][][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][][][]\", \"[][][][][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][][][]\", \"[][][][][][][][][][]\"\
    , -1)\n    brackets = strings.Replace(brackets, \"[][][][][][][][][][]\", \"[][][]",
  "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := 0\n    closingBrackets\
    \ := 0\n    for _, char := range brackets {\n        if char == '(' {\n      \
    \      openingBrackets++\n        } else if char == ')' {\n            closingBrackets++\n\
    \        }\n    }\n    return openingBrackets == closingBrackets\n}\n", "    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, c := range brackets {\n        if\
    \ c == '(' {\n            openingBrackets++\n        } else if c == ')' {\n  \
    \          closingBrackets++\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
