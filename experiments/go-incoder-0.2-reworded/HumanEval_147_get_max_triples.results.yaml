language: go_test.go
name: HumanEval_147_get_max_triples
results:
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] + a[j] + a[k] == 3 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgl4rsww1_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        if i > 0 && i < n-1 {\n            if a[i] > a[i-1] + a[i+1] {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppaa0fh6h_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    result := 0\n    for i := 0; i < n; i++ {\n    \
    \    if a[i] > 0 {\n            result += 3\n        }\n        if a[i] > result\
    \ {\n            result = a[i]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt059sa0m_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n        for\
    \ j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var result int\n    for i := 0; i < n; i++\
    \ {\n        if a[i] > 0 {\n            result += a[i]\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsag_15cv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4kj2g6q_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    for i := 0; i < len(a); i++ {\n        for j := i + 1; j < len(a);\
    \ j++ {\n            for k := j + 1; k < len(a); k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    return i + 1\n                }\n\
    \            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpyunidg_y_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpyunidg_y_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpyunidg_y_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpyunidg_y_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksto6061_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[j] < a[k] {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_klactr7_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_klactr7_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var result int\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] + a[j] + a[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp8xodwsae_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp8xodwsae_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000cc680, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpixvbxm09_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpixvbxm09_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpixvbxm09_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n               \
    \     max++\n                }\n            }\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp318p7ing_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n\
    \            for k := j; k <= n; k++ {\n                if i+j+k == i*i*i {\n\
    \                    a = append(a, i*i*i)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp15d8e6no_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp15d8e6no_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp15d8e6no_test.go:48: expected '%!s(int=36)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp15d8e6no_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=80)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i*i - i + 1\n \
    \               a[j] = j*j - j + 1\n                a[k] = k*k - k + 1\n     \
    \           if a[i] > a[j] && a[i] > a[k] {\n                    return 1\n  \
    \              }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmphi1q5noo_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmphi1q5noo_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph56dmrhz_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     if i > 0 && i < n-1 && a[i] > a[i-1] && a[i] > a[i+1] {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp48irm4f_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qjec2uv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n   \
    \         for k := j; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp4plxm76p_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp4plxm76p_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp4plxm76p_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpixvbxm09_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpixvbxm09_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpixvbxm09_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var result int\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    result = result\
    \ + 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp652wqtau_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    \n    var count int\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if a[i] > a[j] && a[i] > a[k] {\n                    count++\n          \
    \      }\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp3hsbo94j_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp3hsbo94j_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp3hsbo94j_test.go:54: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp3hsbo94j_test.go:54:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpt79eg70h_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpt79eg70h_test.go:42\
    \ +0x43\ntesting.tRunner(0xc000184ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n        for\
    \ j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] + a[j] + a[k] == 3 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp4qan_oc0_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp4qan_oc0_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000003d40, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    count := 0\n    \n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    \n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ybl3nz_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if i > 0 && a[i-1]+a[i] > 3 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43mg4y7y_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph56dmrhz_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if i+1 < len(a) && a[i]+a[i+1] == a[i]+a[i+1]+3 {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ul_pnh_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for _, v := range a {\n \
    \       if v%3 != 0 {\n            continue\n        }\n        count += 3\n \
    \       break\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8bovs8l5_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                   \
    \ count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4q74sue_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] + a[j] + a[k] == 3 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgl4rsww1_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] > 0 {\n            count += 3\n            count += a[i] - a[i]\
    \ - a[i]\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc9winx7_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qjec2uv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < n; i++ {\n  \
    \      for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7jqf1sw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < len(a); i++ {\n        for j :=\
    \ i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n  \
    \              if a[i] + a[j] + a[k] == 3 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpylvp13o1_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpylvp13o1_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpylvp13o1_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpylvp13o1_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] > 0 {\n            count += 3\n            \n       \
    \     for j := i + 1; j < len(a); j++ {\n                if a[j] > 0 {\n     \
    \               count += 3\n                    \n                    for k :=\
    \ j + 1; k < len(a); k++ {\n                        if a[k] > 0 {\n          \
    \                  count += 3\n                        }\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq8i2y5w_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    \n    var count int\n    for i := 0; i < len(a); i++ {\n  \
    \      for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    \n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpyes0bdyb_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpyes0bdyb_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpyes0bdyb_test.go:55: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpyes0bdyb_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n\
    \            for k := j; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpxrjjfn6m_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpxrjjfn6m_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpxrjjfn6m_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjq6hefv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4kj2g6q_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp87z5cjk7_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp87z5cjk7_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvx1fb6u_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] > 0 {\n            count += 3\n            \n       \
    \     for j := i + 1; j < len(a); j++ {\n                if a[j] > 0 {\n     \
    \               count += 3\n                    \n                    for k :=\
    \ j + 1; k < len(a); k++ {\n                        if a[k] > 0 {\n          \
    \                  count += 3\n                        }\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq8i2y5w_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n        for\
    \ j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpm_epdy61_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpm_epdy61_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    return 1\n                }\n            }\n   \
    \     }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpvh6rxdbi_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpvh6rxdbi_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpvh6rxdbi_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpvh6rxdbi_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpt79eg70h_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpt79eg70h_test.go:42\
    \ +0x43\ntesting.tRunner(0xc000184ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    \n    return count\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y86vqq7_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp8y86vqq7_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp8y86vqq7_test.go:55: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp8y86vqq7_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpka838q6f_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    n := 0\n    for i := 0; i < n; i++ {\n        if\
    \ a[i] > 0 {\n            n += 1\n        }\n    }\n    return n\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsutiv5dn_test.go:23:5: undefined: sort

    /tmp/tmpsutiv5dn_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n\
    \        k := i + 1\n        for j < n && k < n {\n            if arr[j] + arr[k]\
    \ == 3 {\n                max++\n            }\n            j++\n            k++\n\
    \        }\n        i++\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpg9m2ira3_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpg9m2ira3_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpg9m2ira3_test.go:56: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpg9m2ira3_test.go:56:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplehyxjvm_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n        \
    \        }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp2gwqxyt5_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp2gwqxyt5_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                   \
    \ count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeek6_ffq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    \n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i\
    \ < len(a); i++ {\n        if i > 0 && a[i-1] == a[i] {\n            continue\n\
    \        }\n        if i > 0 && a[i-1] + a[i] == 3 {\n            continue\n \
    \       }\n        if i > 0 && a[i-1] + a[i] + 1 == 3 {\n            continue\n\
    \        }\n        \n        if a[i] > 3 {\n            count++\n        }\n\
    \    }\n    \n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9ltx5ah_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n   \
    \         for k := 1; k <= j; k++ {\n                if i*i + j*j + k*k == i*i*i\
    \ + j*j*j {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9_nw4epa_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp9_nw4epa_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp9_nw4epa_test.go:48: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp9_nw4epa_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    for i := 1; i <= n; i++ {\n        for j := 1; j\
    \ <= n; j++ {\n            for k := 1; k <= n; k++ {\n                if i+j+k\
    \ == 3*(i+j+k) {\n                    return 1\n                }\n          \
    \  }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ei6zkcb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    count := 0\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] > 0 {\n            count += 3\n            count += a[i]\
    \ - 1\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5tkbt5x_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if a[i] < a[j]\
    \ && a[i] < a[k] {\n                    max++\n                }\n           \
    \ }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpp258demk_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpp258demk_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_58e_oq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var result int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    result++\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp3h22am3e_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp3h22am3e_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    result := 0\n    for _, v := range a {\n       \
    \ if v%3 != 0 {\n            continue\n        }\n        result += 1\n    }\n\
    \    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6wjuel5_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjq6hefv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    \n    sort.Ints(a)\n    \n    var result int\n    \n    for\
    \ i := 0; i < len(a); i++ {\n        if i > 0 && a[i-1] > a[i] {\n           \
    \ break\n        }\n        \n        if a[i] > 3*a[i-1]+1 {\n            result\
    \ = result + 1\n        }\n    }\n    \n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1oic408m_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqzgdir2y_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] > a[j] && a[i] > a[k] {\n                    return 1\n\
    \                } else if a[j] > a[k] {\n                    return 2\n     \
    \           } else if a[i] > a[j] && a[j] > a[k] {\n                    return\
    \ 3\n                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmplbgs2z3p_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmplbgs2z3p_test.go:46\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpt79eg70h_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpt79eg70h_test.go:42\
    \ +0x43\ntesting.tRunner(0xc000184ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var triples int\n    for i := 0; i < n; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if a[i] + a[j] + a[k] == 3 {\n                    triples++\n  \
    \              }\n            }\n        }\n    }\n    return triples\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg3ku1kn6_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp2amlm7ag_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp2amlm7ag_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var result int\n    for i := 0; i < len(a); i++ {\n        for j :=\
    \ 0; j < len(a); j++ {\n            for k := 0; k < len(a); k++ {\n          \
    \      if a[i] < a[j] && a[i] < a[k] {\n                    result = result +\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp4a44csfp_test.go:52: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp4a44csfp_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=55)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp4a44csfp_test.go:52: expected '%!s(int=36)', got '%!s(int=285)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp4a44csfp_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=328350)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if a[i] < a[j]\
    \ && a[i] < a[k] {\n                    max++\n                }\n           \
    \ }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpp258demk_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpp258demk_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph56dmrhz_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 1; i <= n; i++\
    \ {\n        for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n;\
    \ k++ {\n                if a[i] > a[j] && a[i] > a[k] && a[j] > a[k] {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjtabfl6_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    n := 0\n    for i := 0; i < len(a); i++ {\n    \
    \    if a[i] > 0 {\n            n += 1\n            if a[i] > a[i+1] {\n     \
    \           n += 3\n            }\n        }\n    }\n    return n\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbn6eao0_test.go:23:5: undefined: sort

    /tmp/tmptbn6eao0_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmppq9hyvn9_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmppq9hyvn9_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[i] < a[k] {\n                    return 1\n\
    \                }\n                if a[j] < a[i] && a[j] < a[k] {\n        \
    \            return 1\n                }\n                if a[k] < a[i] && a[k]\
    \ < a[j] {\n                    return 1\n                }\n            }\n \
    \       }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpvv800f0j_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpvv800f0j_test.go:48\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    count := 0\n    for i := 1; i <= n; i++ {\n\
    \        for j := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n  \
    \              if i+j+k == 3*i {\n                    count++\n              \
    \  }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstmh_bl8_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for _, v := range a {\n     \
    \   if v%3 != 0 {\n            continue\n        }\n        count += 3\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rhhkz3h_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    \n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n   \
    \             }\n            }\n        }\n    }\n    \n    return max\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpm1uwvr6x_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpm1uwvr6x_test.go:46\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n\
    \            for k := j; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpts2yomf0_test.go:23\
    \ +0x29\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpts2yomf0_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0001991e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if i+1 < len(a) && i+2 < len(a) && a[i] + a[j] + a[k] == 3 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8f8au6b_test.go:23:5: undefined: sort

    /tmp/tmpc8f8au6b_test.go:27:53: undefined: j

    /tmp/tmpc8f8au6b_test.go:27:60: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    result++\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_6e84ji2_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_6e84ji2_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < len(a);\
    \ i++ {\n        if i+1 < len(a) && i+2 < len(a) && a[i] + a[i+1] + a[i+2] ==\
    \ 3*i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpraojruka_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n\
    \        for j < n {\n            k := j + 1\n            for k < n {\n      \
    \          if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n   \
    \             }\n                k++\n            }\n            j++\n       \
    \ }\n        i++\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpmk_3jl1k_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpmk_3jl1k_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpmk_3jl1k_test.go:58: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpmk_3jl1k_test.go:58:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6ypjz1a_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqilmp9_h_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var result int\n    for i := 0; i < n; i++\
    \ {\n        if a[i] > 0 {\n            result += 3\n        }\n        if a[i]\
    \ > 0 && a[i+1] > 0 {\n            result += 3\n        }\n        if a[i] > 0\
    \ && a[i+1] > 0 && a[i+2] > 0 {\n            result += 3\n        }\n    }\n \
    \   return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdntjn8l_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    \n    sort.Ints(a)\n    \n    var triples int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if a[i] < a[j] && a[i] < a[k] {\n                   \
    \ triples++\n                }\n            }\n        }\n    }\n    \n    return\
    \ triples\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppf5i6bch_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    \n    var max int\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if a[i] + a[j] + a[k] == 3 {\n                    max++\n          \
    \      }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpk7fpmnfp_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpk7fpmnfp_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpk7fpmnfp_test.go:54: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpk7fpmnfp_test.go:54:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqqi9x7fr_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < len(a); i++\
    \ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k\
    \ < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] {\n         \
    \           count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrbt965f_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksto6061_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n\
    \        for j < n {\n            k := j + 1\n            for k < n {\n      \
    \          if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n   \
    \             }\n                k++\n            }\n            j++\n       \
    \ }\n        i++\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpmk_3jl1k_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpmk_3jl1k_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpmk_3jl1k_test.go:58: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpmk_3jl1k_test.go:58:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var result int\n    for i := 0; i < len(a); i++ {\n        for j :=\
    \ 0; j < len(a); j++ {\n            for k := 0; k < len(a); k++ {\n          \
    \      if i+j+k == len(a) && a[i] < a[j] && a[j] < a[k] {\n                  \
    \  result++\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp0ru2ikvh_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp0ru2ikvh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp0ru2ikvh_test.go:52: expected '%!s(int=36)', got '%!s(int=8)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp0ru2ikvh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=833)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp9w65dpj7_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp9w65dpj7_test.go:42\
    \ +0x43\ntesting.tRunner(0xc00011b1e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp3h6okmqu_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp3h6okmqu_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] > 0 {\n            count += 3\n            for j := i\
    \ + 1; j < len(a); j++ {\n                if a[j] > 0 {\n                    count\
    \ += 3\n                    for k := j + 1; k < len(a); k++ {\n              \
    \          if a[k] > 0 {\n                            count += 3\n           \
    \                 if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n           \
    \                     return count\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpminqml3v_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3lnpcgo_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < len(a); i++\
    \ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k\
    \ < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_78z3wy_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpt79eg70h_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpt79eg70h_test.go:42\
    \ +0x43\ntesting.tRunner(0xc000184ea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] > 0 {\n            count += 3\n            if a[i] >\
    \ a[i+1] && a[i] > a[i+2] {\n                count += 2\n            }\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptp3954n2_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmphjo95ged_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmphjo95ged_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    \n    max := 0\n    i := 0\n    for j := 0; j < n; j++ {\n       \
    \ for k := 0; k < n; k++ {\n            if a[i] < a[j] && a[i] < a[k] {\n    \
    \            max++\n            }\n        }\n        i++\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmprxmjusv1_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmprxmjusv1_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmprxmjusv1_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmprxmjusv1_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var triples int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawurfwzq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_58e_oq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpcn57l987_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpcn57l987_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        if i > 0 && a[i-1] > a[i] {\n            count++\n        }\n\
    \        if i > 0 && a[i-1] < a[i] {\n            count--\n        }\n       \
    \ if a[i] > 3*a[i-1] {\n            count++\n        }\n        if a[i] < 3*a[i-1]\
    \ {\n            count--\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowxshyxw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var result int\n    for i := 0; i < len(a);\
    \ i++ {\n        if i > 0 && a[i-1] + a[i] == a[i-2]+a[i] {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxw258rf_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    max++\n                }\n       \
    \     }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp1i9c50m6_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp1i9c50m6_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] + a[j] + a[k] == 3 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp4qan_oc0_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp4qan_oc0_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000003d40, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuq9hk5b7_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuq9hk5b7_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n        for j\
    \ < n {\n            k := j + 1\n            for k < n {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n        \
    \        }\n                k++\n            }\n            j++\n        }\n \
    \       i++\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpebbkaep0_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpebbkaep0_test.go:49\
    \ +0x43\ntesting.tRunner(0xc000103380, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[j] < a[k] {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp706tbrll_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp706tbrll_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var triples int\n    for i := 0; i < n; i++ {\n \
    \       for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86k5o5gy_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp92_dfjcs_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp92_dfjcs_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074348
