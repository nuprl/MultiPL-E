language: go_test.go
name: HumanEval_48_is_palindrome
results:
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\"\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpggw78n4a_test.go:57:42: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073848
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ - 1\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo4ocdjc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpuo4ocdjc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle && end > middle {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwv0smgbh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpwv0smgbh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj5xp9ex_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"#\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"$\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"=\", \"\", -1)\n    text := strings.Replace(text, \",\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"<\", \"\", -1)\n    text := strings.Replace(text, \">\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"[\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"]\", \"\", -1)\n    text := strings.Replace(text, \"{\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"}\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"[\", \"\", -1)\n    text := strings.Replace(text, \"]\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"=\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \";\", \"\", -1)\n    text := strings.Replace(text, \"<\", \"\", -1)\n    text\
    \ := strings.Replace(text, \">\", \"\", -1)\n    text := strings.\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcsataysb_test.go:59:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[middle] != text[left] {\n            return\
    \ false\n        }\n        left++\n        right--\n        middle = (left +\
    \ right) / 2\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmps_4ksbts_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmps_4ksbts_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.TrimSpace(text)\n\
    \    if len(text) < 2 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    for i < len(text)/2 && j < len(text)/2 {\n        if text[i] != text[j]\
    \ {\n            return false\n        }\n        i++\n        j--\n    }\n  \
    \  return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_mo_v60_test.go:18:10: no new variables on left side of :=

    /tmp/tmpq_mo_v60_test.go:18:13: undefined: strings

    /tmp/tmpq_mo_v60_test.go:19:10: no new variables on left side of :=

    /tmp/tmpq_mo_v60_test.go:19:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ - 1\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo4ocdjc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpuo4ocdjc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.ToUpper(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \";\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"[\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"]\", \"\", -1)\n    text := strings.Replace(text, \"{\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"}\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"=\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"<\", \"\", -1)\n    text := strings.Replace(text, \">\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \";\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp720yqjug_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073848
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65ez06t8_test.go:18:10: no new variables on left side of :=

    /tmp/tmp65ez06t8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    // Check if text is empty or length\
    \ is 1\n    if length == 0 || text == \"\" {\n        return true\n    }\n   \
    \ \n    // Check if text is palindrome by comparing first and last characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1:end-1])\n\
    \    }\n    \n    // If text is not palindrome, return false\n    return false\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw8v48sh3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpw8v48sh3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n\n    if length % 2 == 0 {\n        return is_palindrome(text[:length/2])\
    \ && is_palindrome(text[length/2:])\n    }\n\n    return is_palindrome(text[:length/2])\
    \ && is_palindrome(text[:length/2]+text[length/2:])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv_gtwa6__test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpv_gtwa6__test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv_gtwa6__test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    left\
    \ := 0\n    right := len(text) - 1\n\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n\n        left++\n  \
    \      right--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    // Checks for palindrome by comparing\
    \ first and last character\n    // If they are same, return true\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    \n    return true\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp450g46i7_test.go:18:10: no new variables on left side of :=

    /tmp/tmp450g46i7_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length - 1\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < middle && end > middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start += 1\n        end -= 1\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmqf5ffv_test.go:18:10: no new variables on left side of :=

    /tmp/tmpnmqf5ffv_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073850
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0:length]\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[middle] {\n            return false\n        }\n        start++\n  \
    \      middle++\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8pmax9y8_test.go:18:10: no new variables on left side of :=

    /tmp/tmp8pmax9y8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073850
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    text\
    \ := strings.ToLower(text)\n    text := strings.Replace(text, \" \", \"\", -1)\n\
    \    text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4tl1n9tt_test.go:61:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073850
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8325anc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpv8325anc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n\n    length\
    \ := len(text)\n    start := 0\n    end := length - 1\n\n    // Loop until we\
    \ reach the middle\n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == text\n    }\n    if length == 2 {\n        return text == text[:1]\
    \ + text[1:len(text)]\n    }\n    if length == 3 {\n        return text == text[:1]\
    \ + text[1:2] + text[2:len(text)]\n    }\n    if length == 4 {\n        return\
    \ text == text[:1] + text[1:2] + text[2:3] + text[3:len(text)]\n    }\n    if\
    \ length == 5 {\n        return text == text[:1] + text[1:2] + text[2:3] + text[3:4]\
    \ + text[4:len(text)]\n    }\n    if length == 6 {\n        return text == text[:1]\
    \ + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:len(text)]\n    }\n\
    \    if length == 7 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] + text[6:len(text)]\n    }\n    if length\
    \ == 8 {\n        return text == text[:1] + text[1:2] + text[2:3] + text[3:4]\
    \ + text[4:5] + text[5:6] + text[6:7] + text[7:len(text)]\n    }\n    if length\
    \ == 9 {\n        return text == text[:1] + text[1:2] + text[2:3] + text[3:4]\
    \ + text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:len(text)]\n    }\n\
    \    if length == 10 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:9] + text[9:len(text)]\n\
    \    }\n    if length == 11 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:9] + text[9:10]\
    \ + text[10:len(text)]\n    }\n    if length == 12 {\n        return text == text[:1]\
    \ + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8]\
    \ + text[8:9] + text[9:10] + text[10:11] + text[11:len(text)]\n    }\n    if \n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzrz85wdp_test.go:60:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073850
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    i := 0\n    j := length\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfdsbvox_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkfdsbvox_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    left\
    \ := 0\n    right := len(text) - 1\n\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n\n    for start < end {\n        if text[start] != text[end] {\n      \
    \      return false\n        }\n        start++\n        end--\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6l9dcga_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj5xp9ex_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for\
    \ start < end {\n        if text[middle] != text[middle+1] {\n            return\
    \ false\n        }\n        middle++\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz2gdzaxx_test.go:18:10: no new variables on left side of :=

    /tmp/tmpz2gdzaxx_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == text[0:1]\n    }\n    start := 0\n    end := length-1\n   \
    \ middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc1i0au0_test.go:18:10: no new variables on left side of :=

    /tmp/tmprc1i0au0_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    start := 0\n    end :=\
    \ length-1\n    middle := (start + end) / 2\n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sdjik3a_test.go:18:10: no new variables on left side of :=

    /tmp/tmp6sdjik3a_test.go:18:13: undefined: strings

    /tmp/tmp6sdjik3a_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    middle := length / 2\n    return is_palindrome(text[:middle]) && is_palindrome(text[middle:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpbgm6d5xo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpbgm6d5xo_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpbgm6d5xo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length - 1\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89y8ooc__test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    for start < end {\n  \
    \      if text[start] != text[end] {\n            return false\n        }\n  \
    \      start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    char\
    \ := text[middle]\n    for left < right {\n        if char != text[left] {\n \
    \           return false\n        }\n        left++\n        right--\n       \
    \ middle = (left + right) / 2\n        char = text[middle]\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpp9tw10ln_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpp9tw10ln_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpqsq5itaj_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpqsq5itaj_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpqsq5itaj_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    first := text[0]\n    last := text[length-1]\n    if first\
    \ != last {\n        return false\n    }\n    return is_palindrome(text[1:length-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpxr7l8sym_test.go:27\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpxr7l8sym_test.go:27 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpxr7l8sym_test.go:38 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65ez06t8_test.go:18:10: no new variables on left side of :=

    /tmp/tmp65ez06t8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\"\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6pad_5q_test.go:57:42: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    while (start < end) {\n      \
    \  if text[start] != text[end] {\n            return false\n        }\n      \
    \  start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaiyghj2m_test.go:23:25: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[middle]\
    \ != text[middle+1] {\n            return false\n        }\n        middle++\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp66k3iigu_test.go:18:10: no new variables on left side of :=

    /tmp/tmp66k3iigu_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpx76u5vo0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpx76u5vo0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    if length == 2 {\n        return text\
    \ == text[0]+text[1]\n    }\n    if length == 3 {\n        return text == text[0]+text[1]+text[2]\n\
    \    }\n    if length == 4 {\n        return text == text[0]+text[1]+text[2]+text[3]\n\
    \    }\n    if length == 5 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]\n\
    \    }\n    if length == 6 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]\n\
    \    }\n    if length == 7 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]\n\
    \    }\n    if length == 8 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]\n\
    \    }\n    if length == 9 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]\n\
    \    }\n    if length == 10 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]+text[9]\n\
    \    }\n    if length == 11 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]+text[9]+text[10]\n\
    \    }\n    if length == 12 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]+text[9]+text[10]+text[11]\n\
    \    }\n    if length == 13 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]+text[9]+text[10]+text[11]+text[12]\n\
    \    }\n    if length == 14 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text[5]+text[6]+text[7]+text[8]+text[9]+text[10]+text[11]+text[12]+text[13]\n\
    \    }\n    if length == 15 {\n        return text == text[0]+text[1]+text[2]+text[3]+text[4]+text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvnc608yl_test.go:67:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (length-1)/2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpioksj1_test.go:18:10: no new variables on left side of :=

    /tmp/tmpbpioksj1_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 2 {\n        return text == text[0:1]\n    }\n\
    \    if length == 1 {\n        return text == text[0:2]\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    text\
    \ := text[:len(text)-1]\n    return text == string(text[:len(text)-1])\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpniqfh6mj_test.go:21:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpx76u5vo0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpx76u5vo0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpozupw_uk_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    middle := (end - start) / 2\n    char :=\
    \ text[middle]\n    for start < end {\n        if text[start] != char {\n    \
    \        return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp94kxvsx0_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp94kxvsx0_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    i := 0\n    j := length\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfdsbvox_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkfdsbvox_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length / 2\n    for start < middle {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjud7iufh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpjud7iufh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[:len(text)/2]\n    }\n    if length%2 == 0 {\n      \
    \  return text == text[:len(text)/2] + text[len(text)/2:]\n    }\n    return text\
    \ == text[:len(text)/2] + text[len(text)/2:len(text)/2] + text[len(text)/2:]\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6umzhks_test.go:18:10: no new variables on left side of :=

    /tmp/tmpl6umzhks_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 2 {\n        return text == text[0:1]\n    }\n\
    \    if length == 1 {\n        return text == text[0:0]\n    }\n    return is_palindrome(text[0:length/2])\
    \ && is_palindrome(text[length/2:])\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp26vjtyev_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmp26vjtyev_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmp26vjtyev_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073854
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    middle := (length-1)/2\n\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpunugjj6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmpunugjj6v_test.go:18:13: undefined: strings

    /tmp/tmpunugjj6v_test.go:22:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[:len(text)/2]\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    middle := middle + 1\n    for start < middle {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0t3tvdnb_test.go:18:10: no new variables on left side of :=

    /tmp/tmp0t3tvdnb_test.go:18:13: undefined: strings

    /tmp/tmp0t3tvdnb_test.go:29:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.TrimSpace(text)\n\
    \    text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \";\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \":\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"_\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \",\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \":\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"_\", \"\", -1)\n    text := strings.Replace(text\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppbb_9dk8_test.go:58:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.TrimSpace(text)\n\
    \    text := strings.ToUpper(text)\n    text := strings.Replace(text, \" \", \"\
    \", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"$\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"+\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"=\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"[\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"]\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"@\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"#\", \"\", -1)\n    text := strings.Replace(text, \"$\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"%\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"^\", \"\", -1)\n    text := strings.Replace(text, \"&\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"=\", \"\", -1)\n    text\
    \ := strings.Replace(text\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44222xlc_test.go:58:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == text[0:length]\n    }\n    if length == 2 {\n        return\
    \ text == text[0:length-1] && text == text[1:length]\n    }\n    start := 0\n\
    \    end := length-1\n    middle := length / 2\n    for start < middle {\n   \
    \     if text[start] != text[end] {\n            return false\n        }\n   \
    \     start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpblfxtkfx_test.go:18:10: no new variables on left side of :=

    /tmp/tmpblfxtkfx_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073854
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    middle := length / 2\n    return is_palindrome(text[:middle]) && is_palindrome(text[middle:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpbgm6d5xo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpbgm6d5xo_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpbgm6d5xo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    i := 0\n    j := length\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfdsbvox_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkfdsbvox_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := text[0:len(text)/2]\n    right := text[len(text)/2:len(text)]\n    return\
    \ left == right\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpswzdzpf4_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpswzdzpf4_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpswzdzpf4_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < middle {\n        if text[start] != text[end] {\n     \
    \       return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073854
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(text) - 1\n    for i < j {\n        if text[i] != text[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:length]\n \
    \   }\n    i := 0\n    j := length - 1\n    for i < j {\n        if text[i] !=\
    \ text[j] {\n            return false\n        }\n        i++\n        j--\n \
    \   }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073854
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ i := middle; i >= 0; i-- {\n        if text[i] != text[right] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpa3n61c5z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpa3n61c5z_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := text[:len(text)-1]\n    right := text[1:len(text)]\n    return left == right\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpux0yckag_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpux0yckag_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"[\", \"\", -1)\n    text := strings.Replace(text, \"]\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"<\", \"\", -1)\n    text := strings.Replace(text,\
    \ \">\", \"\", -1)\n    text := strings.Replace(text, \"=\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"|\", \"\", -1)\n    text \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiv3n3nm6_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    char := text[middle]\n    for start < end {\n        if text[start]\
    \ != char {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmptmexgfcy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmptmexgfcy_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcn9dxpi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqcn9dxpi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpx76u5vo0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpx76u5vo0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"_\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"[\", \"\", -1)\n    text := strings.Replace(text, \"]\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"=\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"<\", \"\", -1)\n    text := strings.Replace(text,\
    \ \">\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    \nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0oi2gzp1_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073854
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    switch {\n    case length == 1:\n        return text == text\n    case\
    \ length == 2:\n        return text == text[:middle] + text[middle:]\n    case\
    \ length == 3:\n        return text == text[:middle] + text[middle:middle+1] +\
    \ text[middle+1:]\n    case length == 4:\n        return text == text[:middle]\
    \ + text[middle:middle+1] + text[middle+1:middle+2] + text[middle+2:]\n    case\
    \ length == 5:\n        return text == text[:middle] + text[middle:middle+1] +\
    \ text[middle+1:middle+2] + text[middle+2:middle+3] + text[middle+3:]\n    case\
    \ length == 6:\n        return text == text[:middle] + text[middle:middle+1] +\
    \ text[middle+1:middle+2] + text[middle+2:middle+3] + text[middle+3:middle+4]\
    \ + text[middle+4:]\n    case length == 7:\n        return text == text[:middle]\
    \ + text[middle:middle+1] + text[middle+1:middle+2] + text[middle+2:middle+3]\
    \ + text[middle+3:middle+4] + text[middle+4:middle+5] + text[middle+5:]\n    case\
    \ length == 8:\n        return text == text[:middle] + text[middle:middle+1] +\
    \ text[middle+1:middle+2] + text[middle+2:middle+3] + text[middle+3:middle+4]\
    \ + text[middle+4:middle+5] + text[middle+5:middle+6] + text[middle+6:]\n    case\
    \ length == 9:\n        return text == text[:middle] + text[middle:middle+1] +\
    \ text[middle+1:middle+2] + text[middle+2:middle+3] + text[middle+3:middle+4]\
    \ + text[middle+4:middle+5] + text[middle+5:middle+6] + text[middle+6:middle+7]\
    \ + text[middle+7:]\n    case length == 10:\n        return text == text[:middle]\
    \ + text[middle:middle+1] + text[middle+1:middle+2] + text[middle+2:middle+3]\
    \ + text[middle+3:middle+4] + text[middle+4:middle+5] + text[middle+5:middle+6]\
    \ + text[middle+6:middle+7] + text[middle+7:middle+8] + text[middle+8:]\n    case\
    \ length == 11:\n        return text == text[:middle] + text[middle:middle+1]\
    \ + text[middle+1:middle+2] + text[middle+2:middle+3] + \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpencwxmqp_test.go:48:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    char := text[middle]\n\n    for start < end {\n        if text[start]\
    \ != char {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpsbppl7ih_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpsbppl7ih_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[middle] != text[start] {\n            return false\n\
    \        }\n        start++\n        end--\n        middle = (start + end) / 2\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp8jmvattn_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp8jmvattn_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    start := 0\n    end :=\
    \ length-1\n    middle := (start + end) / 2\n    for start < middle {\n      \
    \  if text[start] != text[end] {\n            return false\n        }\n      \
    \  start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1rzo2uw4_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1rzo2uw4_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length / 2\n    for start < middle && end > middle {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ejxbd3__test.go:18:10: no new variables on left side of :=

    /tmp/tmp3ejxbd3__test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    for start < end {\n  \
    \      if text[start] != text[end] {\n            return false\n        }\n  \
    \      start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 2 {\n     \
    \   return text == text[0:1]\n    }\n    if length == 1 {\n        return text\
    \ == text[0:2]\n    }\n    start := 0\n    end := length - 1\n    middle := (start\
    \ + end) / 2\n    switch {\n    case (text[middle] == text[middle+1]):\n     \
    \   return is_palindrome(text[0:middle]) && is_palindrome(text[middle+1:])\n \
    \   case (text[middle] == text[middle-1]):\n        return is_palindrome(text[0:middle])\
    \ && is_palindrome(text[middle+1:])\n    case (text[middle] == text[middle+1]\
    \ && text[middle] == text[middle-1]):\n        return is_palindrome(text[0:middle])\
    \ && is_palindrome(text[middle+1:])\n    case (text[middle] == text[middle-1]\
    \ && text[middle] == text[middle+1]):\n        return is_palindrome(text[0:middle])\
    \ && is_palindrome(text[middle+1:])\n    default:\n        return false\n    }\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppxkq6ryr_test.go:18:10: no new variables on left side of :=

    /tmp/tmppxkq6ryr_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65ez06t8_test.go:18:10: no new variables on left side of :=

    /tmp/tmp65ez06t8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpbp35_pif_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle && end >= middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle && end > middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start\
    \ += 1\n        end -= 1\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpooso49qe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpooso49qe_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    while (start < end) {\n      \
    \  if text[start] != text[end] {\n            return false\n        }\n      \
    \  start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaiyghj2m_test.go:23:25: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpqsq5itaj_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpqsq5itaj_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpqsq5itaj_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < middle {\n        if text[start] != text[end] {\n     \
    \       return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073854
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := length / 2\n    for start < middle && end > middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi78f12v_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqi78f12v_test.go:18:13: undefined: strings

    /tmp/tmpqi78f12v_test.go:24:24: invalid operation: text == text[0] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[:len(text)/2]\n    }\n    if length == 2 {\n        return\
    \ text == text[:len(text)/2] + text[len(text)/2:]\n    }\n    if length == 3 {\n\
    \        return text == text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\n\
    \    }\n    if length == 4 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:]\n    }\n    if length == 5 {\n   \
    \     return text == text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if length == 6 {\n   \
    \     return text == text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if\
    \ length == 7 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:]\n    }\n    if length == 8 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if\
    \ length == 9 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if\
    \ length == 10 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n\
    \    }\n    if length == 11 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfdmskxec_test.go:54:100: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \" \")\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp848tqmat_test.go:75:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kq4hko5_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-(i+1)] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kz4qe7s_test.go:18:10: no new variables on left side of :=

    /tmp/tmp2kz4qe7s_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8325anc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpv8325anc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    if length == 2 {\n        return text\
    \ == text[0] + text[1]\n    }\n    i := 0\n    j := length - 1\n    for i < j\
    \ {\n        if text[i] != text[j] {\n            return false\n        }\n  \
    \      i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo455keg_test.go:18:10: no new variables on left side of :=

    /tmp/tmpuo455keg_test.go:18:13: undefined: strings

    /tmp/tmpuo455keg_test.go:24:24: invalid operation: text == text[0] (mismatched
    types string and byte)

    /tmp/tmpuo455keg_test.go:27:24: invalid operation: text == text[0] + text[1] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[:len(text)/2]\n    }\n    if length%2 == 0 {\n      \
    \  return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n \
    \   }\n    return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_a00m8if_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_a00m8if_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    if length == 2 {\n        return text\
    \ == text[0] + text[1]\n    }\n    if length == 3 {\n        return text == text[0]\
    \ + text[1] + text[2]\n    }\n    if length == 4 {\n        return text == text[0]\
    \ + text[1] + text[2] + text[3]\n    }\n    if length == 5 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4]\n    }\n    if length ==\
    \ 6 {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4]\
    \ + text[5]\n    }\n    if length == 7 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6]\n    }\n    if length == 8\
    \ {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4] +\
    \ text[5] + text[6] + text[7]\n    }\n    if length == 9 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6] + text[7]\
    \ + text[8]\n    }\n    if length == 10 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9]\n\
    \    }\n    if length == 11 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\n\
    \    }\n    if length == 12 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\
    \ + text[11]\n    }\n    if length == 13 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9]\
    \ + text[10] + text[11] + text[12]\n    }\n    if length == 14 {\n        return\
    \ text == text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6]\
    \ + text[7] + text[8] + text[9] + text[10] + text[11] + text[12] + text[13]\n\
    \    }\n    if length == 15 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\
    \ + text[11] + text[12] + text[13] + text[\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_uwvgsqz_test.go:67:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    text\
    \ := strings.ToLower(text)\n    text := strings.Replace(text, \" \", \"\", -1)\n\
    \    text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"@\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"[\", \"\", -1)\n    text := strings.Replace(text, \"]\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"<\", \"\", -1)\n    text\
    \ := strings.Replace(text, \">\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"|\", \"\", -1)\n    text := strings.Replace(text, \"~\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"@\", \"\", -1)\n    text := strings.Replace(text, \"$\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"%\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"^\", \"\", -1)\n    text := strings.Replace(text, \"&\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"*\", \"\", -1)\n    text := \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz1k9_dh_test.go:61:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcn9dxpi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqcn9dxpi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == text[:1]\n    }\n    if length == 2 {\n        return text\
    \ == text[:1] + text[1:]\n    }\n    if length == 3 {\n        return text ==\
    \ text[:1] + text[1:2] + text[2:]\n    }\n    if length == 4 {\n        return\
    \ text == text[:1] + text[1:2] + text[2:3] + text[3:]\n    }\n    if length ==\
    \ 5 {\n        return text == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:]\n\
    \    }\n    if length == 6 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:]\n    }\n    if length == 7 {\n        return\
    \ text == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6]\
    \ + text[6:]\n    }\n    if length == 8 {\n        return text == text[:1] + text[1:2]\
    \ + text[2:3] + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:]\n   \
    \ }\n    if length == 9 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:9] + text[9]\n\
    \    }\n    if length == 10 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:9] + text[9:10]\
    \ + text[10]\n    }\n    if length == 11 {\n        return text == text[:1] +\
    \ text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6] + text[6:7] + text[7:8]\
    \ + text[8:9] + text[9:10] + text[10:11] + text[11:]\n    }\n    if length ==\
    \ 12 {\n        return text == text[:1] + text[1:2] + text[2:3] + text[3:4] +\
    \ text[4:5] + text[5:6] + text[6:7] + text[7:8] + text[8:9] + text[9:10] + text[10:11]\
    \ + text[11:12] + text[12:13] + text[13:]\n    }\n    if length == 13 {\n    \
    \    return text \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0benlxmq_test.go:61:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.ToUpper(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \",\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \",\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpghk35nvk_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kq4hko5_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    if first != last {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpttkrvslh_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpttkrvslh_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpttkrvslh_test.go:37 +0x62\ntesting.tRunner(0xc0000da340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:length]\n \
    \   }\n    start := 0\n    end := length-1\n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpbp35_pif_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n\n    left\
    \ := text[:len(text)/2]\n    right := text[len(text)/2:]\n\n    return left ==\
    \ reverse(left)\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3xf6lp2j_test.go:23:5: right declared but not used

    /tmp/tmp3xf6lp2j_test.go:25:20: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"#\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"$\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"_\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"=\", \"\", -1)\n    text := strings.Replace(text, \"+\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"|\", \"\", -1)\n    text := strings.Replace(text, \"~\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"`\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"@\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"#\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"$\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"_\", \"\", -1)\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp033f0_1e_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    middle := (length-1)/2\n    \n    for\
    \ start < middle {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start += 1\n        end -= 1\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x4u5i_o_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4x4u5i_o_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcrx38u5k_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
